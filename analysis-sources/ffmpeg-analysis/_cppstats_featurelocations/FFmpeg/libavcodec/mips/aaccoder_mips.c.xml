<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\aaccoder_mips.c">






















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aactab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacenctab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacenc_utils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>BandCodingPath</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>prev_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>
}</block></struct></type> <name>BandCodingPath</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>uquad_sign_bits</name><index>[<expr><literal type="number">81</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>upair7_sign_bits</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>upair12_sign_bits</name><index>[<expr><literal type="number">169</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>esc_sign_bits</name><index>[<expr><literal type="number">289</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_SQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vec</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"slt %[qc1], $zero, %[qc1] \n\t"
"slt %[qc2], $zero, %[qc2] \n\t"
"slt %[qc3], $zero, %[qc3] \n\t"
"slt %[qc4], $zero, %[qc4] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_codes</name><index>[<expr><name>curidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_UQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vec</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 2 \n\t"
"ori %[sign], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign], %[t0], %[qc1] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"slt %[t2], %[t2], $zero \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign], %[t0], %[qc2] \n\t"
"slt %[t4], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count], $zero, %[qc3] \n\t"
"sll %[t0], %[sign], 1 \n\t"
"or %[t0], %[t0], %[t2] \n\t"
"movn %[sign], %[t0], %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count], %[count], %[t4] \n\t"
"addu %[count], %[count], %[t1] \n\t"
"sll %[t0], %[sign], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign], %[t0], %[qc4] \n\t"
"addu %[count], %[count], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign]"=&amp;r"(sign), [count]"=&amp;r"(count),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_SPAIR_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vec</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 4 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>vec1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>vec1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_UPAIR7_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vec</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx1</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>, <decl><type ref="prev"/><name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 7 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "t0", "t1", "t2", "t3", "t4",
"memory"
);</asm>

<expr_stmt><expr><name>curidx1</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx1</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count1</name><operator>)</operator> <operator>|</operator> <name>sign1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx1</name></expr>]</index></name> <operator>+</operator> <name>count1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count2</name><operator>)</operator> <operator>|</operator> <name>sign2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator> <name>count2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx1</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_UPAIR12_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vec</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx1</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>, <decl><type ref="prev"/><name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 12 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx1</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx1</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count1</name><operator>)</operator> <operator>|</operator> <name>sign1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx1</name></expr>]</index></name> <operator>+</operator> <name>count1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count2</name><operator>)</operator> <operator>|</operator> <name>sign2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator> <name>count2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx1</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vec</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_ESC_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator> <operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vectors</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator> <operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>, <decl><type ref="prev"/><name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 16 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count1</name><operator>)</operator> <operator>|</operator> <name>sign1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator> <name>count1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count2</name><operator>)</operator> <operator>|</operator> <name>sign2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator> <name>count2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>,<decl><type ref="prev"/><name>e2</name></decl>,<decl><type ref="prev"/><name>e3</name></decl>,<decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vectors</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_vectors</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>, <decl><type ref="prev"/><name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUNDING</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 16 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"shll_s.w %[c1], %[qc1], 18 \n\t"
"shll_s.w %[c2], %[qc2], 18 \n\t"
"shll_s.w %[c3], %[qc3], 18 \n\t"
"shll_s.w %[c4], %[qc4], 18 \n\t"
"srl %[c1], %[c1], 18 \n\t"
"srl %[c2], %[c2], 18 \n\t"
"srl %[c3], %[c3], 18 \n\t"
"srl %[c4], %[c4], 18 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[c1]"=&amp;r"(c1), [c2]"=&amp;r"(c2),
[c3]"=&amp;r"(c3), [c4]"=&amp;r"(c4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count1</name><operator>)</operator> <operator>|</operator> <name>sign1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator> <name>count1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_vectors</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_vectors</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>count2</name><operator>)</operator> <operator>|</operator> <name>sign2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_bits</name> <operator>=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator> <name>count2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v_bits</name></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_vectors</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name><operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p_vectors</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v_codes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c4</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>v_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>||</operator> <name>energy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>, <decl><type ref="prev"/><name>e3</name></decl>, <decl><type ref="prev"/><name>e4</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name>c1</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name>c2</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e3</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name>c3</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e4</name> <operator>=</operator> <call><name>copysignf</name><argument_list>(<argument><expr><name>c4</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>e3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <operator>(</operator><name>e1</name><operator>*</operator><name>e1</name> <operator>+</operator> <name>e2</name><operator>*</operator><name>e2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>e3</name><operator>*</operator><name>e3</name> <operator>+</operator> <name>e4</name><operator>*</operator><name>e4</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_NONE_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_cost_ZERO_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*const quantize_and_encode_band_cost_arr[]</argument>)</argument_list></macro><operator>(</operator>struct <name>AACEncContext</name> <operator>*</operator><name>s</name><operator>,</operator>
<name>PutBitContext</name> <operator>*</operator><name>pb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>in</name><operator>,</operator> <name>float</name> <operator>*</operator><name>out</name><operator>,</operator>
<specifier>const</specifier> <name>float</name> <operator>*</operator><name>scaled</name><operator>,</operator> <name>int</name> <name>size</name><operator>,</operator> <name>int</name> <name>scale_idx</name><operator>,</operator>
<name>int</name> <name>cb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>lambda</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>uplim</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>float</name> <operator>*</operator><name>energy</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>ROUNDING</name><operator>)</operator> <operator>=</operator> <block>{
<expr><name>quantize_and_encode_band_cost_ZERO_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_SQUAD_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_SQUAD_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UQUAD_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UQUAD_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_SPAIR_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_SPAIR_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UPAIR7_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UPAIR7_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UPAIR12_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_UPAIR12_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_ESC_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_NONE_mips</name></expr>, 
<expr><name>quantize_and_encode_band_cost_ZERO_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_ZERO_mips</name></expr>,
<expr><name>quantize_and_encode_band_cost_ZERO_mips</name></expr>,
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quantize_and_encode_band_cost</name><parameter_list>( <parameter><type><name>s</name></type></parameter>, <parameter><type><name>pb</name></type></parameter>, <parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>, <parameter><type><name>scaled</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>scale_idx</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>lambda</name></type></parameter>, <parameter><type><name>uplim</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>energy</name></type></parameter>, <parameter><type><name>ROUNDING</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>quantize_and_encode_band_cost_arr[cb]( s, pb, in, out, scaled, size, scale_idx, cb, lambda, uplim, bits, energy, ROUNDING)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_and_encode_band_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>,
<argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>rtz</name><operator>)</operator></expr> ?</condition><then> <expr><name>ROUND_TO_ZERO</name></expr> </then><else>: <expr><name>ROUND_STANDARD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_ZERO_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_NONE_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_SQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"slt %[qc1], $zero, %[qc1] \n\t"
"slt %[qc2], $zero, %[qc2] \n\t"
"slt %[qc3], $zero, %[qc3] \n\t"
"slt %[qc4], $zero, %[qc4] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_UQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 2 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>uquad_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_SPAIR_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 4 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_UPAIR7_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 7 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator>
<name><name>upair7_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator>
<name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator>
<name><name>upair7_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_UPAIR12_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 12 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator>
<name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name> <operator>+</operator>
<name><name>upair12_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name> <operator>+</operator>
<name><name>upair12_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_numbits_ESC_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond0</name></decl>, <decl><type ref="prev"/><name>cond1</name></decl>, <decl><type ref="prev"/><name>cond2</name></decl>, <decl><type ref="prev"/><name>cond3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 15 \n\t"
"ori %[t5], $zero, 16 \n\t"
"shll_s.w %[c1], %[qc1], 18 \n\t"
"shll_s.w %[c2], %[qc2], 18 \n\t"
"shll_s.w %[c3], %[qc3], 18 \n\t"
"shll_s.w %[c4], %[qc4], 18 \n\t"
"srl %[c1], %[c1], 18 \n\t"
"srl %[c2], %[c2], 18 \n\t"
"srl %[c3], %[c3], 18 \n\t"
"srl %[c4], %[c4], 18 \n\t"
"slt %[cond0], %[t4], %[qc1] \n\t"
"slt %[cond1], %[t4], %[qc2] \n\t"
"slt %[cond2], %[t4], %[qc3] \n\t"
"slt %[cond3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t5], %[cond0] \n\t"
"movn %[qc2], %[t5], %[cond1] \n\t"
"movn %[qc3], %[t5], %[cond2] \n\t"
"movn %[qc4], %[t5], %[cond3] \n\t"
"ori %[t5], $zero, 31 \n\t"
"clz %[c1], %[c1] \n\t"
"clz %[c2], %[c2] \n\t"
"clz %[c3], %[c3] \n\t"
"clz %[c4], %[c4] \n\t"
"subu %[c1], %[t5], %[c1] \n\t"
"subu %[c2], %[t5], %[c2] \n\t"
"subu %[c3], %[t5], %[c3] \n\t"
"subu %[c4], %[t5], %[c4] \n\t"
"sll %[c1], %[c1], 1 \n\t"
"sll %[c2], %[c2], 1 \n\t"
"sll %[c3], %[c3], 1 \n\t"
"sll %[c4], %[c4], 1 \n\t"
"addiu %[c1], %[c1], -3 \n\t"
"addiu %[c2], %[c2], -3 \n\t"
"addiu %[c3], %[c3], -3 \n\t"
"addiu %[c4], %[c4], -3 \n\t"
"subu %[cond0], $zero, %[cond0] \n\t"
"subu %[cond1], $zero, %[cond1] \n\t"
"subu %[cond2], $zero, %[cond2] \n\t"
"subu %[cond3], $zero, %[cond3] \n\t"
"and %[c1], %[c1], %[cond0] \n\t"
"and %[c2], %[c2], %[cond1] \n\t"
"and %[c3], %[c3], %[cond2] \n\t"
"and %[c4], %[c4], %[cond3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[cond0]"=&amp;r"(cond0), [cond1]"=&amp;r"(cond1),
[cond2]"=&amp;r"(cond2), [cond3]"=&amp;r"(cond3),
[c1]"=&amp;r"(c1), [c2]"=&amp;r"(c2),
[c3]"=&amp;r"(c3), [c4]"=&amp;r"(c4),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>esc_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>esc_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name>c2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name>c3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name>c4</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>curbits</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>float</name> <argument_list>(<argument>*const get_band_numbits_arr[]</argument>)</argument_list></macro><operator>(</operator>struct <name>AACEncContext</name> <operator>*</operator><name>s</name><operator>,</operator>
<name>PutBitContext</name> <operator>*</operator><name>pb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>in</name><operator>,</operator>
<specifier>const</specifier> <name>float</name> <operator>*</operator><name>scaled</name><operator>,</operator> <name>int</name> <name>size</name><operator>,</operator> <name>int</name> <name>scale_idx</name><operator>,</operator>
<name>int</name> <name>cb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>lambda</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>uplim</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>bits</name><operator>)</operator> <operator>=</operator> <block>{
<expr><name>get_band_numbits_ZERO_mips</name></expr>,
<expr><name>get_band_numbits_SQUAD_mips</name></expr>,
<expr><name>get_band_numbits_SQUAD_mips</name></expr>,
<expr><name>get_band_numbits_UQUAD_mips</name></expr>,
<expr><name>get_band_numbits_UQUAD_mips</name></expr>,
<expr><name>get_band_numbits_SPAIR_mips</name></expr>,
<expr><name>get_band_numbits_SPAIR_mips</name></expr>,
<expr><name>get_band_numbits_UPAIR7_mips</name></expr>,
<expr><name>get_band_numbits_UPAIR7_mips</name></expr>,
<expr><name>get_band_numbits_UPAIR12_mips</name></expr>,
<expr><name>get_band_numbits_UPAIR12_mips</name></expr>,
<expr><name>get_band_numbits_ESC_mips</name></expr>,
<expr><name>get_band_numbits_NONE_mips</name></expr>, 
<expr><name>get_band_numbits_ZERO_mips</name></expr>,
<expr><name>get_band_numbits_ZERO_mips</name></expr>,
<expr><name>get_band_numbits_ZERO_mips</name></expr>,
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_band_numbits</name><parameter_list>( <parameter><type><name>s</name></type></parameter>, <parameter><type><name>pb</name></type></parameter>, <parameter><type><name>in</name></type></parameter>, <parameter><type><name>scaled</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>scale_idx</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>lambda</name></type></parameter>, <parameter><type><name>uplim</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_band_numbits_arr[cb]( s, pb, in, scaled, size, scale_idx, cb, lambda, uplim, bits)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name></type> <name>quantize_band_cost_bits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_band_numbits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>uplim</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_ZERO_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_NONE_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_SQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in_pos</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di0</name></decl>, <decl><type ref="prev"/><name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"slt %[qc1], $zero, %[qc1] \n\t"
"slt %[qc2], $zero, %[qc2] \n\t"
"slt %[qc3], $zero, %[qc3] \n\t"
"slt %[qc4], $zero, %[qc4] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"lwc1 $f0, 0(%[in_pos]) \n\t"
"lwc1 $f1, 0(%[vec]) \n\t"
"lwc1 $f2, 4(%[in_pos]) \n\t"
"lwc1 $f3, 4(%[vec]) \n\t"
"lwc1 $f4, 8(%[in_pos]) \n\t"
"lwc1 $f5, 8(%[vec]) \n\t"
"lwc1 $f6, 12(%[in_pos]) \n\t"
"lwc1 $f7, 12(%[vec]) \n\t"
"nmsub.s %[di0], $f0, $f1, %[IQ] \n\t"
"nmsub.s %[di1], $f2, $f3, %[IQ] \n\t"
"nmsub.s %[di2], $f4, $f5, %[IQ] \n\t"
"nmsub.s %[di3], $f6, $f7, %[IQ] \n\t"

".set pop \n\t"

: [di0]"=&amp;f"(di0), [di1]"=&amp;f"(di1),
[di2]"=&amp;f"(di2), [di3]"=&amp;f"(di3)
: [in_pos]"r"(in_pos), [vec]"r"(vec),
[IQ]"f"(IQ)
: "$f0", "$f1", "$f2", "$f3",
"$f4", "$f5", "$f6", "$f7",
"memory"
);</asm>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di0</name> <operator>*</operator> <name>di0</name> <operator>+</operator> <name>di1</name> <operator>*</operator> <name>di1</name>
<operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name> <operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name> <operator>*</operator> <operator>(</operator><name>IQ</name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_UQUAD_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in_pos</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di0</name></decl>, <decl><type ref="prev"/><name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 2 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>uquad_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"lwc1 %[di0], 0(%[in_pos]) \n\t"
"lwc1 %[di1], 4(%[in_pos]) \n\t"
"lwc1 %[di2], 8(%[in_pos]) \n\t"
"lwc1 %[di3], 12(%[in_pos]) \n\t"
"abs.s %[di0], %[di0] \n\t"
"abs.s %[di1], %[di1] \n\t"
"abs.s %[di2], %[di2] \n\t"
"abs.s %[di3], %[di3] \n\t"
"lwc1 $f0, 0(%[vec]) \n\t"
"lwc1 $f1, 4(%[vec]) \n\t"
"lwc1 $f2, 8(%[vec]) \n\t"
"lwc1 $f3, 12(%[vec]) \n\t"
"nmsub.s %[di0], %[di0], $f0, %[IQ] \n\t"
"nmsub.s %[di1], %[di1], $f1, %[IQ] \n\t"
"nmsub.s %[di2], %[di2], $f2, %[IQ] \n\t"
"nmsub.s %[di3], %[di3], $f3, %[IQ] \n\t"

".set pop \n\t"

: [di0]"=&amp;f"(di0), [di1]"=&amp;f"(di1),
[di2]"=&amp;f"(di2), [di3]"=&amp;f"(di3)
: [in_pos]"r"(in_pos), [vec]"r"(vec),
[IQ]"f"(IQ)
: "$f0", "$f1", "$f2", "$f3",
"memory"
);</asm>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di0</name> <operator>*</operator> <name>di0</name> <operator>+</operator> <name>di1</name> <operator>*</operator> <name>di1</name>
<operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name> <operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name> <operator>*</operator> <operator>(</operator><name>IQ</name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_SPAIR_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in_pos</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di0</name></decl>, <decl><type ref="prev"/><name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 4 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"srl %[t0], %[t0], 31 \n\t"
"srl %[t1], %[t1], 31 \n\t"
"srl %[t2], %[t2], 31 \n\t"
"srl %[t3], %[t3], 31 \n\t"
"subu %[t4], $zero, %[qc1] \n\t"
"subu %[t5], $zero, %[qc2] \n\t"
"subu %[t6], $zero, %[qc3] \n\t"
"subu %[t7], $zero, %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t5], %[t1] \n\t"
"movn %[qc3], %[t6], %[t2] \n\t"
"movn %[qc4], %[t7], %[t3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4), [t5]"=&amp;r"(t5), [t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"lwc1 $f0, 0(%[in_pos]) \n\t"
"lwc1 $f1, 0(%[vec]) \n\t"
"lwc1 $f2, 4(%[in_pos]) \n\t"
"lwc1 $f3, 4(%[vec]) \n\t"
"lwc1 $f4, 8(%[in_pos]) \n\t"
"lwc1 $f5, 0(%[vec2]) \n\t"
"lwc1 $f6, 12(%[in_pos]) \n\t"
"lwc1 $f7, 4(%[vec2]) \n\t"
"nmsub.s %[di0], $f0, $f1, %[IQ] \n\t"
"nmsub.s %[di1], $f2, $f3, %[IQ] \n\t"
"nmsub.s %[di2], $f4, $f5, %[IQ] \n\t"
"nmsub.s %[di3], $f6, $f7, %[IQ] \n\t"

".set pop \n\t"

: [di0]"=&amp;f"(di0), [di1]"=&amp;f"(di1),
[di2]"=&amp;f"(di2), [di3]"=&amp;f"(di3)
: [in_pos]"r"(in_pos), [vec]"r"(vec),
[vec2]"r"(vec2), [IQ]"f"(IQ)
: "$f0", "$f1", "$f2", "$f3",
"$f4", "$f5", "$f6", "$f7",
"memory"
);</asm>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di0</name> <operator>*</operator> <name>di0</name> <operator>+</operator> <name>di1</name> <operator>*</operator> <name>di1</name>
<operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name> <operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name> <operator>*</operator> <operator>(</operator><name>IQ</name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_UPAIR7_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>, <decl><type ref="prev"/><name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in_pos</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di0</name></decl>, <decl><type ref="prev"/><name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 7 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>upair7_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>upair7_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"lwc1 %[di0], 0(%[in_pos]) \n\t"
"lwc1 %[di1], 4(%[in_pos]) \n\t"
"lwc1 %[di2], 8(%[in_pos]) \n\t"
"lwc1 %[di3], 12(%[in_pos]) \n\t"
"abs.s %[di0], %[di0] \n\t"
"abs.s %[di1], %[di1] \n\t"
"abs.s %[di2], %[di2] \n\t"
"abs.s %[di3], %[di3] \n\t"
"lwc1 $f0, 0(%[vec]) \n\t"
"lwc1 $f1, 4(%[vec]) \n\t"
"lwc1 $f2, 0(%[vec2]) \n\t"
"lwc1 $f3, 4(%[vec2]) \n\t"
"nmsub.s %[di0], %[di0], $f0, %[IQ] \n\t"
"nmsub.s %[di1], %[di1], $f1, %[IQ] \n\t"
"nmsub.s %[di2], %[di2], $f2, %[IQ] \n\t"
"nmsub.s %[di3], %[di3], $f3, %[IQ] \n\t"

".set pop \n\t"

: [di0]"=&amp;f"(di0), [di1]"=&amp;f"(di1),
[di2]"=&amp;f"(di2), [di3]"=&amp;f"(di3)
: [in_pos]"r"(in_pos), [vec]"r"(vec),
[vec2]"r"(vec2), [IQ]"f"(IQ)
: "$f0", "$f1", "$f2", "$f3",
"memory"
);</asm>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di0</name> <operator>*</operator> <name>di0</name> <operator>+</operator> <name>di1</name> <operator>*</operator> <name>di1</name>
<operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name> <operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name> <operator>*</operator> <operator>(</operator><name>IQ</name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_UPAIR12_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign1</name></decl>, <decl><type ref="prev"/><name>count1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>count2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_int</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in_pos</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di0</name></decl>, <decl><type ref="prev"/><name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t4], $zero, 12 \n\t"
"ori %[sign1], $zero, 0 \n\t"
"ori %[sign2], $zero, 0 \n\t"
"slt %[t0], %[t4], %[qc1] \n\t"
"slt %[t1], %[t4], %[qc2] \n\t"
"slt %[t2], %[t4], %[qc3] \n\t"
"slt %[t3], %[t4], %[qc4] \n\t"
"movn %[qc1], %[t4], %[t0] \n\t"
"movn %[qc2], %[t4], %[t1] \n\t"
"movn %[qc3], %[t4], %[t2] \n\t"
"movn %[qc4], %[t4], %[t3] \n\t"
"lw %[t0], 0(%[in_int]) \n\t"
"lw %[t1], 4(%[in_int]) \n\t"
"lw %[t2], 8(%[in_int]) \n\t"
"lw %[t3], 12(%[in_int]) \n\t"
"slt %[t0], %[t0], $zero \n\t"
"movn %[sign1], %[t0], %[qc1] \n\t"
"slt %[t2], %[t2], $zero \n\t"
"movn %[sign2], %[t2], %[qc3] \n\t"
"slt %[t1], %[t1], $zero \n\t"
"sll %[t0], %[sign1], 1 \n\t"
"or %[t0], %[t0], %[t1] \n\t"
"movn %[sign1], %[t0], %[qc2] \n\t"
"slt %[t3], %[t3], $zero \n\t"
"sll %[t0], %[sign2], 1 \n\t"
"or %[t0], %[t0], %[t3] \n\t"
"movn %[sign2], %[t0], %[qc4] \n\t"
"slt %[count1], $zero, %[qc1] \n\t"
"slt %[t1], $zero, %[qc2] \n\t"
"slt %[count2], $zero, %[qc3] \n\t"
"slt %[t2], $zero, %[qc4] \n\t"
"addu %[count1], %[count1], %[t1] \n\t"
"addu %[count2], %[count2], %[t2] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[sign1]"=&amp;r"(sign1), [count1]"=&amp;r"(count1),
[sign2]"=&amp;r"(sign2), [count2]"=&amp;r"(count2),
[t0]"=&amp;r"(t0), [t1]"=&amp;r"(t1), [t2]"=&amp;r"(t2), [t3]"=&amp;r"(t3),
[t4]"=&amp;r"(t4)
: [in_int]"r"(in_int)
: "memory"
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">13</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>upair12_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>upair12_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"lwc1 %[di0], 0(%[in_pos]) \n\t"
"lwc1 %[di1], 4(%[in_pos]) \n\t"
"lwc1 %[di2], 8(%[in_pos]) \n\t"
"lwc1 %[di3], 12(%[in_pos]) \n\t"
"abs.s %[di0], %[di0] \n\t"
"abs.s %[di1], %[di1] \n\t"
"abs.s %[di2], %[di2] \n\t"
"abs.s %[di3], %[di3] \n\t"
"lwc1 $f0, 0(%[vec]) \n\t"
"lwc1 $f1, 4(%[vec]) \n\t"
"lwc1 $f2, 0(%[vec2]) \n\t"
"lwc1 $f3, 4(%[vec2]) \n\t"
"nmsub.s %[di0], %[di0], $f0, %[IQ] \n\t"
"nmsub.s %[di1], %[di1], $f1, %[IQ] \n\t"
"nmsub.s %[di2], %[di2], $f2, %[IQ] \n\t"
"nmsub.s %[di3], %[di3], $f3, %[IQ] \n\t"

".set pop \n\t"

: [di0]"=&amp;f"(di0), [di1]"=&amp;f"(di1),
[di2]"=&amp;f"(di2), [di3]"=&amp;f"(di3)
: [in_pos]"r"(in_pos), [vec]"r"(vec),
[vec2]"r"(vec2), [IQ]"f"(IQ)
: "$f0", "$f1", "$f2", "$f3",
"memory"
);</asm>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di0</name> <operator>*</operator> <name>di0</name> <operator>+</operator> <name>di1</name> <operator>*</operator> <name>di1</name>
<operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name> <operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name> <operator>*</operator> <operator>(</operator><name>IQ</name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_band_cost_ESC_mips</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>CLIPPED_ESCAPE</name> <init>= <expr><literal type="number">165140.0f</literal> <operator>*</operator> <name>IQ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qc1</name></decl>, <decl><type ref="prev"/><name>qc2</name></decl>, <decl><type ref="prev"/><name>qc3</name></decl>, <decl><type ref="prev"/><name>qc4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_codes</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator> <operator>)</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>, <decl><type ref="prev"/><name>curidx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>di1</name></decl>, <decl><type ref="prev"/><name>di2</name></decl>, <decl><type ref="prev"/><name>di3</name></decl>, <decl><type ref="prev"/><name>di4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond0</name></decl>, <decl><type ref="prev"/><name>cond1</name></decl>, <decl><type ref="prev"/><name>cond2</name></decl>, <decl><type ref="prev"/><name>cond3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qc1</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc2</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc3</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qc4</name> <operator>=</operator> <name><name>scaled</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>ROUND_STANDARD</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"

"ori %[t6], $zero, 15 \n\t"
"ori %[t7], $zero, 16 \n\t"
"shll_s.w %[c1], %[qc1], 18 \n\t"
"shll_s.w %[c2], %[qc2], 18 \n\t"
"shll_s.w %[c3], %[qc3], 18 \n\t"
"shll_s.w %[c4], %[qc4], 18 \n\t"
"srl %[c1], %[c1], 18 \n\t"
"srl %[c2], %[c2], 18 \n\t"
"srl %[c3], %[c3], 18 \n\t"
"srl %[c4], %[c4], 18 \n\t"
"slt %[cond0], %[t6], %[qc1] \n\t"
"slt %[cond1], %[t6], %[qc2] \n\t"
"slt %[cond2], %[t6], %[qc3] \n\t"
"slt %[cond3], %[t6], %[qc4] \n\t"
"movn %[qc1], %[t7], %[cond0] \n\t"
"movn %[qc2], %[t7], %[cond1] \n\t"
"movn %[qc3], %[t7], %[cond2] \n\t"
"movn %[qc4], %[t7], %[cond3] \n\t"

".set pop \n\t"

: [qc1]"+r"(qc1), [qc2]"+r"(qc2),
[qc3]"+r"(qc3), [qc4]"+r"(qc4),
[cond0]"=&amp;r"(cond0), [cond1]"=&amp;r"(cond1),
[cond2]"=&amp;r"(cond2), [cond3]"=&amp;r"(cond3),
[c1]"=&amp;r"(c1), [c2]"=&amp;r"(c2),
[c3]"=&amp;r"(c3), [c4]"=&amp;r"(c4),
[t6]"=&amp;r"(t6), [t7]"=&amp;r"(t7)
);</asm>

<expr_stmt><expr><name>curidx</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name>qc2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <name>qc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curidx2</name> <operator>+=</operator> <name>qc4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>esc_sign_bits</name><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>p_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <name><name>esc_sign_bits</name><index>[<expr><name>curidx2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codes</name><index>[<expr><name>curidx2</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>cond0</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>cond1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>cond2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>-</operator><name>cond3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cond0</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;=</operator> <name>CLIPPED_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>di1</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>CLIPPED_ESCAPE</name><operator>*</operator><name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di1</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name>c1</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di1</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cond1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;=</operator> <name>CLIPPED_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>CLIPPED_ESCAPE</name><operator>*</operator><name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name>c2</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di2</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cond2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t3</name> <operator>&gt;=</operator> <name>CLIPPED_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>di3</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>CLIPPED_ESCAPE</name><operator>*</operator><name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di3</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name>c3</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di3</name> <operator>=</operator> <name>t3</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cond3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t4</name> <operator>&gt;=</operator> <name>CLIPPED_ESCAPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>di4</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>CLIPPED_ESCAPE</name><operator>*</operator><name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di4</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name>c4</name> <operator>*</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>di4</name> <operator>=</operator> <name>t4</name> <operator>-</operator> <operator>(</operator><name>V</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>IQ</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>V</name><operator>*</operator><name>V</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>di1</name> <operator>*</operator> <name>di1</name> <operator>+</operator> <name>di2</name> <operator>*</operator> <name>di2</name>
<operator>+</operator> <name>di3</name> <operator>*</operator> <name>di3</name> <operator>+</operator> <name>di4</name> <operator>*</operator> <name>di4</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>curbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>float</name> <argument_list>(<argument>*const get_band_cost_arr[]</argument>)</argument_list></macro><operator>(</operator>struct <name>AACEncContext</name> <operator>*</operator><name>s</name><operator>,</operator>
<name>PutBitContext</name> <operator>*</operator><name>pb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>in</name><operator>,</operator>
<specifier>const</specifier> <name>float</name> <operator>*</operator><name>scaled</name><operator>,</operator> <name>int</name> <name>size</name><operator>,</operator> <name>int</name> <name>scale_idx</name><operator>,</operator>
<name>int</name> <name>cb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>lambda</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>uplim</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>float</name> <operator>*</operator><name>energy</name><operator>)</operator> <operator>=</operator> <block>{
<expr><name>get_band_cost_ZERO_mips</name></expr>,
<expr><name>get_band_cost_SQUAD_mips</name></expr>,
<expr><name>get_band_cost_SQUAD_mips</name></expr>,
<expr><name>get_band_cost_UQUAD_mips</name></expr>,
<expr><name>get_band_cost_UQUAD_mips</name></expr>,
<expr><name>get_band_cost_SPAIR_mips</name></expr>,
<expr><name>get_band_cost_SPAIR_mips</name></expr>,
<expr><name>get_band_cost_UPAIR7_mips</name></expr>,
<expr><name>get_band_cost_UPAIR7_mips</name></expr>,
<expr><name>get_band_cost_UPAIR12_mips</name></expr>,
<expr><name>get_band_cost_UPAIR12_mips</name></expr>,
<expr><name>get_band_cost_ESC_mips</name></expr>,
<expr><name>get_band_cost_NONE_mips</name></expr>, 
<expr><name>get_band_cost_ZERO_mips</name></expr>,
<expr><name>get_band_cost_ZERO_mips</name></expr>,
<expr><name>get_band_cost_ZERO_mips</name></expr>,
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_band_cost</name><parameter_list>( <parameter><type><name>s</name></type></parameter>, <parameter><type><name>pb</name></type></parameter>, <parameter><type><name>in</name></type></parameter>, <parameter><type><name>scaled</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>scale_idx</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>lambda</name></type></parameter>, <parameter><type><name>uplim</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>energy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_band_cost_arr[cb]( s, pb, in, scaled, size, scale_idx, cb, lambda, uplim, bits, energy)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name></type> <name>quantize_band_cost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>uplim</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>energy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacenc_quantization_misc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aaccoder_twoloop.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_ms_mips</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>sid_sf_boost</name></decl>, <decl><type ref="prev"/><name>prev_mid</name></decl>, <decl><type ref="prev"/><name>prev_side</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextband0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nextband1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>M</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>S</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>L34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>R34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>M34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S34</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>mslambda</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>nextband0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_mid</name> <operator>=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_side</name> <operator>=</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>bmax</name> <init>= <expr><call><name>bval2bmax</name><argument_list>(<argument><expr><name>g</name> <operator>*</operator> <literal type="number">17.0f</literal> <operator>/</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0.0045f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce0</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sce1</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>Mmax</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>Smax</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>M</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name>
<operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>-</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>M34</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>S34</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
<expr_stmt><expr><name>Mmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Mmax</name></expr></argument>, <argument><expr><name><name>M34</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Smax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Smax</name></expr></argument>, <argument><expr><name><name>S34</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>sid_sf_boost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid_sf_boost</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sid_sf_boost</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dist1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>B0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>B1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mididx</name></decl>, <decl><type ref="prev"/><name>sididx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>midcb</name></decl>, <decl><type ref="prev"/><name>sidcb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>minidx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mididx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minidx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sididx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minidx</name> <operator>-</operator> <name>sid_sf_boost</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name>
<operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>ff_sfdelta_can_replace</name><argument_list>(<argument><expr><name>sce0</name></expr></argument>, <argument><expr><name>nextband0</name></expr></argument>, <argument><expr><name>prev_mid</name></expr></argument>, <argument><expr><name>mididx</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>ff_sfdelta_can_replace</name><argument_list>(<argument><expr><name>sce1</name></expr></argument>, <argument><expr><name>nextband1</name></expr></argument>, <argument><expr><name>prev_side</name></expr></argument>, <argument><expr><name>sididx</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>midcb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name>Mmax</name></expr></argument>, <argument><expr><name>mididx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sidcb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name>Smax</name></expr></argument>, <argument><expr><name>sididx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>midcb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>midcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sidcb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>sidcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band0</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band1</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minthr</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>,<decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>M</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name>
<operator>+</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>-</operator> <name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>L34</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>R34</name></expr></argument>, <argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name></name><operator>+</operator><name>start</name><operator>+</operator><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>M34</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abs_pow34_v</name><argument_list>(<argument><expr><name>S34</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce0</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>L34</name></expr></argument>,
<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name>lambda</name> <operator>/</operator> <name><name>band0</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dist1</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce1</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>R34</name></expr></argument>,
<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name>lambda</name> <operator>/</operator> <name><name>band1</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
<argument><expr><name>M34</name></expr></argument>,
<argument><expr><name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mididx</name></expr></argument>,
<argument><expr><name>midcb</name></expr></argument>,
<argument><expr><name>lambda</name> <operator>/</operator> <name>minthr</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>+=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>S</name></expr></argument>,
<argument><expr><name>S34</name></expr></argument>,
<argument><expr><name><name>sce1</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name>sididx</name></expr></argument>,
<argument><expr><name>sidcb</name></expr></argument>,
<argument><expr><name>mslambda</name> <operator>/</operator> <operator>(</operator><name>minthr</name> <operator>*</operator> <name>bmax</name><operator>)</operator></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B0</name> <operator>+=</operator> <name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B1</name> <operator>+=</operator> <name>b3</name><operator>+</operator><name>b4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist1</name> <operator>-=</operator> <name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>-=</operator> <name>b3</name><operator>+</operator><name>b4</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist2</name> <operator>&lt;=</operator> <name>dist1</name> <operator>&amp;&amp;</operator> <name>B1</name> <operator>&lt;</operator> <name>B0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>mididx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sididx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>midcb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>sidcb</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>B1</name> <operator>&gt;</operator> <name>B0</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce0</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce0</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_mid</name> <operator>=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce1</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_side</name> <operator>=</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce0</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aaccoder_trellis.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_aac_coder_init_mips</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<decl_stmt><decl><type><name>AACCoefficientsEncoder</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>coder</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>option</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>coder</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>quantize_and_encode_band</name></name> <operator>=</operator> <name>quantize_and_encode_band_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>encode_window_bands_info</name></name> <operator>=</operator> <name>codebook_trellis_rate</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>search_for_quantizers</name></name> <operator>=</operator> <name>search_for_quantizers_twoloop</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>search_for_ms</name></name> <operator>=</operator> <name>search_for_ms_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
