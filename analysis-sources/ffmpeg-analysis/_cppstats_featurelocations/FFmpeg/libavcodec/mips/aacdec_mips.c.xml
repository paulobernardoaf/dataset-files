<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\aacdec_mips.c">





















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacdec_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aactab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/sinewin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>float_copy</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>loop_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>count</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"1: \n\t"
"lw %[temp0], 0(%[src]) \n\t"
"lw %[temp1], 4(%[src]) \n\t"
"lw %[temp2], 8(%[src]) \n\t"
"lw %[temp3], 12(%[src]) \n\t"
"lw %[temp4], 16(%[src]) \n\t"
"lw %[temp5], 20(%[src]) \n\t"
"lw %[temp6], 24(%[src]) \n\t"
"lw %[temp7], 28(%[src]) \n\t"
PTR_ADDIU "%[src], %[src], 32 \n\t"
"sw %[temp0], 0(%[dst]) \n\t"
"sw %[temp1], 4(%[dst]) \n\t"
"sw %[temp2], 8(%[dst]) \n\t"
"sw %[temp3], 12(%[dst]) \n\t"
"sw %[temp4], 16(%[dst]) \n\t"
"sw %[temp5], 20(%[dst]) \n\t"
"sw %[temp6], 24(%[dst]) \n\t"
"sw %[temp7], 28(%[dst]) \n\t"
"bne %[src], %[loop_end], 1b \n\t"
PTR_ADDIU "%[dst], %[dst], 32 \n\t"
".set pop \n\t"

: [temp0]"=&amp;r"(temp[0]), [temp1]"=&amp;r"(temp[1]),
[temp2]"=&amp;r"(temp[2]), [temp3]"=&amp;r"(temp[3]),
[temp4]"=&amp;r"(temp[4]), [temp5]"=&amp;r"(temp[5]),
[temp6]"=&amp;r"(temp[6]), [temp7]"=&amp;r"(temp[7]),
[src]"+r"(src), [dst]"+r"(dst)
: [loop_end]"r"(loop_end)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>lcg_random</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>previous_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{ <decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt> }</block> <decl><name>v</name> <init>= <expr><block>{ <expr><name>previous_val</name> <operator>*</operator> <literal type="number">1664525u</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr> }</block></expr></init></decl>;</union>
<return>return <expr><name><name>v</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_windowing_mips</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lwindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lwindow_prev</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>wi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name>dst0</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name>saved</name> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>win0</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>swindow</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>win1</name> <init>= <expr><name>win0</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>win0_prev</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>swindow_prev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>win1_prev</name> <init>= <expr><name>win0_prev</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0_prev</name> <init>= <expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src1_prev</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>temp0</name> <operator>=</operator> <name><name>src0_prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>src1_prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wi</name> <operator>=</operator> <operator>*</operator><name>win0_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wj</name> <operator>=</operator> <operator>*</operator><name>win1_prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>src0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp3</name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wj</name> <operator>-</operator> <name>temp1</name> <operator>*</operator> <name>wi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>temp1</name> <operator>*</operator> <name>wj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wi</name> <operator>=</operator> <operator>*</operator><name>win0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wj</name> <operator>=</operator> <operator>*</operator><name>win1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <name><name>src0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <name>temp2</name> <operator>*</operator> <name>wj</name> <operator>-</operator> <name>temp3</name> <operator>*</operator> <name>wi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <name>temp2</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>temp3</name> <operator>*</operator> <name>wj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>src0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp3</name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wj</name> <operator>-</operator> <name>temp1</name> <operator>*</operator> <name>wi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>temp1</name> <operator>*</operator> <name>wj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">384</literal></expr>]</index></name> <operator>=</operator> <name>temp2</name> <operator>*</operator> <name>wj</name> <operator>-</operator> <name>temp3</name> <operator>*</operator> <name>wi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><literal type="number">384</literal></expr>]</index></name> <operator>=</operator> <name>temp2</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>temp3</name> <operator>*</operator> <name>wj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <name><name>src0</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wj</name> <operator>-</operator> <name>temp1</name> <operator>*</operator> <name>wi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp0</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>temp1</name> <operator>*</operator> <name>wj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_prev</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src1_prev</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>win0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>win1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>win0_prev</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>win1_prev</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_ltp_mips</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LongTermPrediction</name> <modifier>*</modifier></type><name>ltp</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sfb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>predTime</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>predFreq</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_predTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>num_samples</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_samples</name> <operator>=</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><literal type="number">2048</literal> <operator>-</operator> <name>num_samples</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><literal type="number">2048</literal> <operator>-</operator> <name>num_samples</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_predTime</name> <operator>=</operator> <operator>&amp;</operator><name><name>predTime</name><index>[<expr><name>num_samples</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>predTime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2048</literal> <operator>-</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name></expr>]</index></name> <operator>*</operator> <name><name>ltp</name><operator>-&gt;</operator><name>coef</name></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<asm>__asm__ <specifier>volatile</specifier> (
"sw $0, 0(%[p_predTime]) \n\t"
"sw $0, 4(%[p_predTime]) \n\t"
"sw $0, 8(%[p_predTime]) \n\t"
"sw $0, 12(%[p_predTime]) \n\t"
PTR_ADDIU "%[p_predTime], %[p_predTime], 16 \n\t"

: [p_predTime]"+r"(p_predTime)
:
: "memory"
);</asm>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (
"sw $0, 0(%[p_predTime]) \n\t"
PTR_ADDIU "%[p_predTime], %[p_predTime], 4 \n\t"

: [p_predTime]"+r"(p_predTime)
:
: "memory"
);</asm>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>windowing_and_mdct_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>predFreq</name></expr></argument>, <argument><expr><name>predTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_tns</name></name><argument_list>(<argument><expr><name>predFreq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ltp</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>offsets</name><index>[<expr><name>sfb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>predFreq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fmul_and_reverse</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>count</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>count</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[temp0], 0(%[ptr2]) \n\t"
"lwc1 %[temp1], -4(%[ptr2]) \n\t"
"lwc1 %[temp2], -8(%[ptr2]) \n\t"
"lwc1 %[temp3], -12(%[ptr2]) \n\t"
"lwc1 %[temp4], 0(%[ptr3]) \n\t"
"lwc1 %[temp5], -4(%[ptr3]) \n\t"
"lwc1 %[temp6], -8(%[ptr3]) \n\t"
"lwc1 %[temp7], -12(%[ptr3]) \n\t"
"mul.s %[temp8], %[temp0], %[temp4] \n\t"
"mul.s %[temp9], %[temp1], %[temp5] \n\t"
"mul.s %[temp10], %[temp2], %[temp6] \n\t"
"mul.s %[temp11], %[temp3], %[temp7] \n\t"
"swc1 %[temp8], 0(%[ptr1]) \n\t"
"swc1 %[temp9], 4(%[ptr1]) \n\t"
"swc1 %[temp10], 8(%[ptr1]) \n\t"
"swc1 %[temp11], 12(%[ptr1]) \n\t"
PTR_ADDIU "%[ptr1], %[ptr1], 16 \n\t"
PTR_ADDIU "%[ptr2], %[ptr2], -16 \n\t"
PTR_ADDIU "%[ptr3], %[ptr3], -16 \n\t"

: [temp0]"=&amp;f"(temp[0]), [temp1]"=&amp;f"(temp[1]),
[temp2]"=&amp;f"(temp[2]), [temp3]"=&amp;f"(temp[3]),
[temp4]"=&amp;f"(temp[4]), [temp5]"=&amp;f"(temp[5]),
[temp6]"=&amp;f"(temp[6]), [temp7]"=&amp;f"(temp[7]),
[temp8]"=&amp;f"(temp[8]), [temp9]"=&amp;f"(temp[9]),
[temp10]"=&amp;f"(temp[10]), [temp11]"=&amp;f"(temp[11]),
[ptr1]"+r"(dst), [ptr2]"+r"(src0), [ptr3]"+r"(src1)
:
: "memory"
);</asm>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_ltp_mips</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved_ltp</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_saved_ltp</name> <init>= <expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">576</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>loop_end1</name> <init>= <expr><name>p_saved_ltp</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
"sw $0, 0(%[p_saved_ltp]) \n\t"
"sw $0, 4(%[p_saved_ltp]) \n\t"
"sw $0, 8(%[p_saved_ltp]) \n\t"
"sw $0, 12(%[p_saved_ltp]) \n\t"
"sw $0, 16(%[p_saved_ltp]) \n\t"
"sw $0, 20(%[p_saved_ltp]) \n\t"
"sw $0, 24(%[p_saved_ltp]) \n\t"
"sw $0, 28(%[p_saved_ltp]) \n\t"
PTR_ADDIU "%[p_saved_ltp],%[p_saved_ltp], 32 \n\t"
"bne %[p_saved_ltp], %[loop_end1], 1b \n\t"

: [p_saved_ltp]"+r"(p_saved_ltp)
: [loop_end1]"r"(loop_end1)
: "memory"
);</asm>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swindow</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmul_and_reverse</name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buff0</name> <init>= <expr><name>saved</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buff1</name> <init>= <expr><name>saved_ltp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>loop_end</name> <init>= <expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"1: \n\t"
"lw %[temp0], 0(%[src]) \n\t"
"lw %[temp1], 4(%[src]) \n\t"
"lw %[temp2], 8(%[src]) \n\t"
"lw %[temp3], 12(%[src]) \n\t"
"lw %[temp4], 16(%[src]) \n\t"
"lw %[temp5], 20(%[src]) \n\t"
"lw %[temp6], 24(%[src]) \n\t"
"lw %[temp7], 28(%[src]) \n\t"
PTR_ADDIU "%[src], %[src], 32 \n\t"
"sw %[temp0], 0(%[dst]) \n\t"
"sw %[temp1], 4(%[dst]) \n\t"
"sw %[temp2], 8(%[dst]) \n\t"
"sw %[temp3], 12(%[dst]) \n\t"
"sw %[temp4], 16(%[dst]) \n\t"
"sw %[temp5], 20(%[dst]) \n\t"
"sw %[temp6], 24(%[dst]) \n\t"
"sw %[temp7], 28(%[dst]) \n\t"
"sw $0, 2304(%[dst]) \n\t"
"sw $0, 2308(%[dst]) \n\t"
"sw $0, 2312(%[dst]) \n\t"
"sw $0, 2316(%[dst]) \n\t"
"sw $0, 2320(%[dst]) \n\t"
"sw $0, 2324(%[dst]) \n\t"
"sw $0, 2328(%[dst]) \n\t"
"sw $0, 2332(%[dst]) \n\t"
"bne %[src], %[loop_end], 1b \n\t"
PTR_ADDIU "%[dst], %[dst], 32 \n\t"
".set pop \n\t"

: [temp0]"=&amp;r"(temp0), [temp1]"=&amp;r"(temp1),
[temp2]"=&amp;r"(temp2), [temp3]"=&amp;r"(temp3),
[temp4]"=&amp;r"(temp4), [temp5]"=&amp;r"(temp5),
[temp6]"=&amp;r"(temp6), [temp7]"=&amp;r"(temp7),
[src]"+r"(buff0), [dst]"+r"(buff1)
: [loop_end]"r"(loop_end)
: "memory"
);</asm>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swindow</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmul_and_reverse</name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lwindow</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fmul_and_reverse</name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>lwindow</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>float_copy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name> <operator>+</operator> <literal type="number">2048</literal></expr></argument>, <argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_aacdec_init_mips</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>imdct_and_windowing</name></name> <operator>=</operator> <name>imdct_and_windowing_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_ltp</name></name> <operator>=</operator> <name>apply_ltp_mips</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update_ltp</name></name> <operator>=</operator> <name>update_ltp_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
