<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacenc_tns.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_tns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_Q_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_Q_BITS_IS8</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_ENABLE_COEF_COMPRESSION</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_GAIN_THRESHOLD_LOW</name></cpp:macro> <cpp:value>1.4f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_GAIN_THRESHOLD_HIGH</name></cpp:macro> <cpp:value>1.16f*TNS_GAIN_THRESHOLD_LOW</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>compress_coeffs</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>low_idx</name> <init>= <expr><ternary><condition><expr><name>c_bits</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_val</name> <init>= <expr><ternary><condition><expr><name>c_bits</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>high_idx</name> <init>= <expr><ternary><condition><expr><name>c_bits</name></expr> ?</condition><then> <expr><literal type="number">11</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TNS_ENABLE_COEF_COMPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>low_idx</name> <operator>&amp;&amp;</operator> <name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>high_idx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>high_idx</name><operator>)</operator></expr> ?</condition><then> <expr><name>shift_val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>ff_aac_encode_tns_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>filt</name></decl>, <decl><type ref="prev"/><name>coef_compress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>coef_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is8</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c_bits</name> <init>= <expr><ternary><condition><expr><name>is8</name></expr> ?</condition><then> <expr><name>TNS_Q_BITS_IS8</name> <operator>==</operator> <literal type="number">4</literal></expr> </then><else>: <expr><name>TNS_Q_BITS</name> <operator>==</operator> <literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>-</operator> <name>is8</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>n_filt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>filt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>filt</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>filt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>is8</name></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>is8</name></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>direction</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coef_compress</name> <operator>=</operator> <call><name>compress_coeffs</name><argument_list>(<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef_idx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>, <argument><expr><name>c_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>coef_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coef_len</name> <operator>=</operator> <name>c_bits</name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>coef_compress</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>coef_len</name></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef_idx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_aac_apply_tns</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>filt</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>order</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>inc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mmm</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lpc</name><index>[<expr><name>TNS_MAX_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>filt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>filt</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>filt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>compute_lpc_coefs</name><argument_list>(<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name><index>[<expr><call><name>FFMIN</name><argument_list>( <argument><expr><name>top</name></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tns</name><operator>-&gt;</operator><name>direction</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>start</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name></expr>]</index></name> <operator>+=</operator> <name><name>lpc</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>sce</name><operator>-&gt;</operator><name>pcoeffs</name><index>[<expr><name>start</name> <operator>-</operator> <name>i</name><operator>*</operator><name>inc</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>quantize_coefs</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>quant_arr</name> <init>= <expr><name><name>tns_tmp2_map</name><index>[<expr><name>c_bits</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>quant_array_idx</name><argument_list>(<argument><expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>quant_arr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>c_bits</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>quant_arr</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>ff_aac_search_for_tns</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gain</name></decl>, <decl><type ref="prev"/><name><name>coefs</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mmm</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>tns_max_bands</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is8</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c_bits</name> <init>= <expr><ternary><condition><expr><name>is8</name></expr> ?</condition><then> <expr><name>TNS_Q_BITS_IS8</name> <operator>==</operator> <literal type="number">4</literal></expr> </then><else>: <expr><name>TNS_Q_BITS</name> <operator>==</operator> <literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sfb_start</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>tns_min_sfb</name><index>[<expr><name>is8</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sfb_end</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>order</name> <init>= <expr><ternary><condition><expr><name>is8</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_LOW</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><name>TNS_MAX_ORDER</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slant</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sfb_len</name> <init>= <expr><name>sfb_end</name> <operator>-</operator> <name>sfb_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>coef_len</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb_end</name></expr>]</index></name> <operator>-</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb_start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>coef_len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>sfb_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>en</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oc_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>os_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coef_start</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb_start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>sfb_start</name></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name> <operator>&amp;&amp;</operator> <name>g</name> <operator>&lt;=</operator> <name>sfb_end</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&gt;</operator> <name>sfb_start</name> <operator>+</operator> <operator>(</operator><name>sfb_len</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>en</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>en</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>ff_lpc_calc_ref_coefs_f</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <name>coef_start</name></expr>]</index></name></expr></argument>,
<argument><expr><name>coef_len</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>order</name> <operator>||</operator> <operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>gain</name> <argument_list type="generic">&lt; <argument><expr><name>TNS_GAIN_THRESHOLD_LOW</name> <operator>||</operator> <name>gain</name></expr></argument> &gt;</argument_list></name> <name>TNS_GAIN_THRESHOLD_HIGH</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>is8</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>order</name> <operator>!=</operator> <name>TNS_MAX_ORDER</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>direction</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>slant</name> <operator>!=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>slant</name></expr> </then><else>: <expr><name><name>en</name><index>[<expr><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name><name>en</name><index>[<expr><operator>!</operator><name>g</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>g</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr> ?</condition><then> <expr><name>order</name><operator>/</operator><name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr> </then><else>: <expr><name>order</name> <operator>-</operator> <name>oc_start</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>g</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr> ?</condition><then> <expr><name>sfb_len</name><operator>/</operator><name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr> </then><else>: <expr><name>sfb_len</name> <operator>-</operator> <name>os_start</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quantize_coefs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coefs</name><index>[<expr><name>oc_start</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef_idx</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>c_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>oc_start</name> <operator>+=</operator> <name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>os_start</name> <operator>+=</operator> <name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
