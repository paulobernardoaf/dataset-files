<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aptxenc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aptx.h"</cpp:file></cpp:include>







<function><type><name>av_always_inline</name>
<specifier>static</specifier> <name>void</name></type> <name>aptx_qmf_polyphase_analysis</name><parameter_list>(<parameter><decl><type><name>FilterSignal</name></type> <name><name>signal</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>coeffs</name><index>[<expr><name>NB_FILTERS</name></expr>]</index><index>[<expr><name>FILTER_TAPS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>low_subband_output</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>high_subband_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>subbands</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_FILTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>aptx_qmf_filter_signal_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>NB_FILTERS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subbands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>aptx_qmf_convolution</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>low_subband_output</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name><name>subbands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>subbands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>high_subband_output</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name><name>subbands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>subbands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_qmf_tree_analysis</name><parameter_list>(<parameter><decl><type><name>QMFAnalysis</name> <modifier>*</modifier></type><name>qmf</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>subband_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>intermediate_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_qmf_polyphase_analysis</name><argument_list>(<argument><expr><name><name>qmf</name><operator>-&gt;</operator><name>outer_filter_signal</name></name></expr></argument>,
<argument><expr><name>aptx_qmf_outer_coeffs</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>intermediate_samples</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>intermediate_samples</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_qmf_polyphase_analysis</name><argument_list>(<argument><expr><name><name>qmf</name><operator>-&gt;</operator><name>inner_filter_signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>aptx_qmf_inner_coeffs</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>intermediate_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>subband_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>subband_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>av_always_inline</name>
<specifier>static</specifier> <name>int32_t</name></type> <name>aptx_bin_search</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>factor</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>intervals</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nb_intervals</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nb_intervals</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>MUL64</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name><name>intervals</name><index>[<expr><name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_quantize_difference</name><parameter_list>(<parameter><decl><type><name>Quantize</name> <modifier>*</modifier></type><name>quantize</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>sample_difference</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dither</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>quantization_factor</name></decl></parameter>,
<parameter><decl><type><name>ConstTables</name> <modifier>*</modifier></type><name>tables</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>intervals</name> <init>= <expr><name><name>tables</name><operator>-&gt;</operator><name>quantize_intervals</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>quantized_sample</name></decl>, <decl><type ref="prev"/><name>dithered_sample</name></decl>, <decl><type ref="prev"/><name>parity_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>mean</name></decl>, <decl><type ref="prev"/><name>interval</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>, <decl><type ref="prev"/><name>sample_difference_abs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample_difference_abs</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>sample_difference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_difference_abs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sample_difference_abs</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quantized_sample</name> <operator>=</operator> <call><name>aptx_bin_search</name><argument_list>(<argument><expr><name>sample_difference_abs</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>quantization_factor</name></expr></argument>,
<argument><expr><name>intervals</name></expr></argument>, <argument><expr><name><name>tables</name><operator>-&gt;</operator><name>tables_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rshift32_clip24</name><argument_list>(<argument><expr><call><name>MULH</name><argument_list>(<argument><expr><name>dither</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rshift64</name><argument_list>(<argument><expr><call><name>MUL64</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>tables</name><operator>-&gt;</operator><name>quantize_dither_factors</name><index>[<expr><name>quantized_sample</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>intervals</name> <operator>+=</operator> <name>quantized_sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mean</name> <operator>=</operator> <operator>(</operator><name><name>intervals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>(</operator><name><name>intervals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>sample_difference</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dithered_sample</name> <operator>=</operator> <call><name>rshift64_clip24</name><argument_list>(<argument><expr><call><name>MUL64</name><argument_list>(<argument><expr><name>dither</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>mean</name> <operator>+</operator> <name>d</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>sample_difference_abs</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>-</operator> <call><name>MUL64</name><argument_list>(<argument><expr><name>dithered_sample</name></expr></argument>, <argument><expr><name>quantization_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quantize</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><call><name>rshift64</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parity_change</name> <operator>=</operator> <name>quantized_sample</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quantized_sample</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>parity_change</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sample_difference</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quantize</name><operator>-&gt;</operator><name>quantized_sample</name></name> <operator>=</operator> <name>quantized_sample</name> <operator>^</operator> <name>inv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quantize</name><operator>-&gt;</operator><name>quantized_sample_parity_change</name></name> <operator>=</operator> <name>parity_change</name> <operator>^</operator> <name>inv</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_encode_channel</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>subband_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aptx_qmf_tree_analysis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>qmf</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>subband_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_aptx_generate_dither</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>subband</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subband</name> <operator>&lt;</operator> <name>NB_SUBBANDS</name></expr>;</condition> <incr><expr><name>subband</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>diff</name> <init>= <expr><call><name>av_clip_intp2</name><argument_list>(<argument><expr><name><name>subband_samples</name><index>[<expr><name>subband</name></expr>]</index></name> <operator>-</operator> <name><name>channel</name><operator>-&gt;</operator><name>prediction</name><index>[<expr><name>subband</name></expr>]</index></name><operator>.</operator><name>predicted_sample</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>aptx_quantize_difference</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><name>subband</name></expr>]</index></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>dither</name><index>[<expr><name>subband</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>invert_quantize</name><index>[<expr><name>subband</name></expr>]</index></name><operator>.</operator><name>quantization_factor</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ff_aptx_quant_tables</name><index>[<expr><name>hd</name></expr>]</index><index>[<expr><name>subband</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_insert_sync</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name><name>channels</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>aptx_check_parity</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>map</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Quantize</name> <modifier>*</modifier></type><name>min</name> <init>= <expr><operator>&amp;</operator><name><name>channels</name><index>[<expr><name>NB_CHANNELS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>quantize</name><index>[<expr><name><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>channels</name><index>[<expr><name>NB_CHANNELS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_SUBBANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>error</name> <operator>&lt;</operator> <name><name>min</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>



<expr_stmt><expr><name><name>min</name><operator>-&gt;</operator><name>quantized_sample</name></name> <operator>=</operator> <name><name>min</name><operator>-&gt;</operator><name>quantized_sample_parity_change</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>aptx_pack_codeword</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>parity</name> <init>= <expr><call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>|</operator> <name>parity</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>aptxhd_pack_codeword</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>parity</name> <init>= <expr><call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x01E</literal><operator>)</operator> <operator>|</operator> <name>parity</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x00F</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x03F</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_encode_samples</name><parameter_list>(<parameter><decl><type><name>AptXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_encode_channel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>aptx_insert_sync</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sync_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_aptx_invert_quantize_and_prediction</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>channel</name></expr></argument>,
<argument><expr><call><name>aptxhd_pack_codeword</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>channel</name></expr></argument>,
<argument><expr><call><name>aptx_pack_codeword</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aptx_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AptXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>ipos</name></decl>, <decl><type ref="prev"/><name>channel</name></decl>, <decl><type ref="prev"/><name>sample</name></decl>, <decl><type ref="prev"/><name>output_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>output_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ipos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>output_size</name></expr>;</condition> <incr><expr><name>pos</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr><operator>,</operator> <expr><name>ipos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>sample</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>ipos</name><operator>+</operator><name>sample</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>aptx_encode_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aptx_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AptXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_APTX_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aptx_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aptx"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"aptX (Audio Processing Technology for Bluetooth)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APTX</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AptXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_aptx_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>aptx_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aptx_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{<expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_APTX_HD_ENCODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aptx_hd_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aptx_hd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"aptX HD (Audio Processing Technology for Bluetooth)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APTX_HD</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AptXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_aptx_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>aptx_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aptx_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{<expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
