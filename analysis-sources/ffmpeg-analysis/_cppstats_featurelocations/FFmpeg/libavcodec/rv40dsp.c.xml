<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rv40dsp.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnd_avg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV40_LOWPASS</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##rv40_qpel8_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride,const int h, const int C1, const int C2, const int SHIFT){const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i = 0; i &lt; h; i++){OP(dst[0], (src[-2] + src[ 3] - 5*(src[-1]+src[2]) + src[0]*C1 + src[1]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[1], (src[-1] + src[ 4] - 5*(src[ 0]+src[3]) + src[1]*C1 + src[2]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[2], (src[ 0] + src[ 5] - 5*(src[ 1]+src[4]) + src[2]*C1 + src[3]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[3], (src[ 1] + src[ 6] - 5*(src[ 2]+src[5]) + src[3]*C1 + src[4]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[4], (src[ 2] + src[ 7] - 5*(src[ 3]+src[6]) + src[4]*C1 + src[5]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[5], (src[ 3] + src[ 8] - 5*(src[ 4]+src[7]) + src[5]*C1 + src[6]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[6], (src[ 4] + src[ 9] - 5*(src[ 5]+src[8]) + src[6]*C1 + src[7]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[7], (src[ 5] + src[10] - 5*(src[ 6]+src[9]) + src[7]*C1 + src[8]*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);dst += dstStride;src += srcStride;}}static void OPNAME ##rv40_qpel8_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride,const int w, const int C1, const int C2, const int SHIFT){const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i = 0; i &lt; w; i++){const int srcB = src[-2*srcStride];const int srcA = src[-1*srcStride];const int src0 = src[0 *srcStride];const int src1 = src[1 *srcStride];const int src2 = src[2 *srcStride];const int src3 = src[3 *srcStride];const int src4 = src[4 *srcStride];const int src5 = src[5 *srcStride];const int src6 = src[6 *srcStride];const int src7 = src[7 *srcStride];const int src8 = src[8 *srcStride];const int src9 = src[9 *srcStride];const int src10 = src[10*srcStride];OP(dst[0*dstStride], (srcB + src3 - 5*(srcA+src2) + src0*C1 + src1*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[1*dstStride], (srcA + src4 - 5*(src0+src3) + src1*C1 + src2*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[2*dstStride], (src0 + src5 - 5*(src1+src4) + src2*C1 + src3*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[3*dstStride], (src1 + src6 - 5*(src2+src5) + src3*C1 + src4*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[4*dstStride], (src2 + src7 - 5*(src3+src6) + src4*C1 + src5*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[5*dstStride], (src3 + src8 - 5*(src4+src7) + src5*C1 + src6*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[6*dstStride], (src4 + src9 - 5*(src5+src8) + src6*C1 + src7*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);OP(dst[7*dstStride], (src5 + src10 - 5*(src6+src9) + src7*C1 + src8*C2 + (1&lt;&lt;(SHIFT-1))) &gt;&gt; SHIFT);dst++;src++;}}static void OPNAME ##rv40_qpel16_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride,const int w, const int C1, const int C2, const int SHIFT){OPNAME ##rv40_qpel8_v_lowpass(dst , src , dstStride, srcStride, 8, C1, C2, SHIFT);OPNAME ##rv40_qpel8_v_lowpass(dst+8, src+8, dstStride, srcStride, 8, C1, C2, SHIFT);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv40_qpel8_v_lowpass(dst , src , dstStride, srcStride, w-8, C1, C2, SHIFT);OPNAME ##rv40_qpel8_v_lowpass(dst+8, src+8, dstStride, srcStride, w-8, C1, C2, SHIFT);}static void OPNAME ##rv40_qpel16_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride,const int h, const int C1, const int C2, const int SHIFT){OPNAME ##rv40_qpel8_h_lowpass(dst , src , dstStride, srcStride, 8, C1, C2, SHIFT);OPNAME ##rv40_qpel8_h_lowpass(dst+8, src+8, dstStride, srcStride, 8, C1, C2, SHIFT);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv40_qpel8_h_lowpass(dst , src , dstStride, srcStride, h-8, C1, C2, SHIFT);OPNAME ##rv40_qpel8_h_lowpass(dst+8, src+8, dstStride, srcStride, h-8, C1, C2, SHIFT);}</cpp:value></cpp:define>








































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV40_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##rv40_qpel ##SIZE ##_mc10_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv40_qpel ##SIZE ##_h_lowpass(dst, src, stride, stride, SIZE, 52, 20, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc30_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv40_qpel ##SIZE ##_h_lowpass(dst, src, stride, stride, SIZE, 20, 52, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc01_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, src, stride, stride, SIZE, 52, 20, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc11_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 52, 20, 6);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 52, 20, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc21_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 20, 20, 5);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 52, 20, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc31_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 20, 52, 6);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 52, 20, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc12_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 52, 20, 6);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 20, 20, 5);}static void OPNAME ##rv40_qpel ##SIZE ##_mc22_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 20, 20, 5);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 20, 20, 5);}static void OPNAME ##rv40_qpel ##SIZE ##_mc32_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 20, 52, 6);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 20, 20, 5);}static void OPNAME ##rv40_qpel ##SIZE ##_mc03_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, src, stride, stride, SIZE, 20, 52, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc13_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 52, 20, 6);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 20, 52, 6);}static void OPNAME ##rv40_qpel ##SIZE ##_mc23_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){uint8_t full[SIZE*(SIZE+5)];uint8_t * const full_mid = full + SIZE*2;put_rv40_qpel ##SIZE ##_h_lowpass(full, src - 2*stride, SIZE, stride, SIZE+5, 20, 20, 5);OPNAME ##rv40_qpel ##SIZE ##_v_lowpass(dst, full_mid, stride, SIZE, SIZE, 20, 52, 6);}</cpp:value></cpp:define>





















































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)+cm[b]+1)&gt;&gt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[b]</cpp:value></cpp:define>

<macro><name>RV40_LOWPASS</name><argument_list>(<argument>put_</argument> , <argument>op_put</argument>)</argument_list></macro>
<macro><name>RV40_LOWPASS</name><argument_list>(<argument>avg_</argument> , <argument>op_avg</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>

<macro><name>RV40_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>RV40_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>RV40_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>RV40_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXOP2</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void OPNAME ##_pixels8_xy2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int j; for (j = 0; j &lt; 2; j++) { int i; const uint32_t a = AV_RN32(pixels); const uint32_t b = AV_RN32(pixels + 1); uint32_t l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; uint32_t h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); uint32_t l1, h1; pixels += line_size; for (i = 0; i &lt; h; i += 2) { uint32_t a = AV_RN32(pixels); uint32_t b = AV_RN32(pixels + 1); l1 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL); h1 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; a = AV_RN32(pixels); b = AV_RN32(pixels + 1); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; } pixels += 4 - line_size * (h + 1); block += 4 - line_size * h; } } CALL_2X_PIXELS(OPNAME ##_pixels16_xy2_8_c, OPNAME ##_pixels8_xy2_8_c, 8)</cpp:value></cpp:define> 




















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_avg32(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>
<macro><name>PIXOP2</name><argument_list>(<argument>avg</argument>, <argument>op_avg</argument>)</argument_list></macro>
<macro><name>PIXOP2</name><argument_list>(<argument>put</argument>, <argument>op_put</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_rv40_qpel16_mc33_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels16_xy2_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_rv40_qpel16_mc33_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_pixels16_xy2_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>put_rv40_qpel8_mc33_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels8_xy2_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_rv40_qpel8_mc33_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_pixels8_xy2_8_c</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rv40_bias</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV40_CHROMA_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void OPNAME ##rv40_chroma_mc4_c(uint8_t *dst ,uint8_t *src ,ptrdiff_t stride, int h, int x, int y){const int A = (8-x) * (8-y);const int B = ( x) * (8-y);const int C = (8-x) * ( y);const int D = ( x) * ( y);int i;int bias = rv40_bias[y&gt;&gt;1][x&gt;&gt;1];av_assert2(x&lt;8 &amp;&amp; y&lt;8 &amp;&amp; x&gt;=0 &amp;&amp; y&gt;=0);if(D){for(i = 0; i &lt; h; i++){OP(dst[0], (A*src[0] + B*src[1] + C*src[stride+0] + D*src[stride+1] + bias));OP(dst[1], (A*src[1] + B*src[2] + C*src[stride+1] + D*src[stride+2] + bias));OP(dst[2], (A*src[2] + B*src[3] + C*src[stride+2] + D*src[stride+3] + bias));OP(dst[3], (A*src[3] + B*src[4] + C*src[stride+3] + D*src[stride+4] + bias));dst += stride;src += stride;}}else{const int E = B + C;const ptrdiff_t step = C ? stride : 1;for(i = 0; i &lt; h; i++){OP(dst[0], (A*src[0] + E*src[step+0] + bias));OP(dst[1], (A*src[1] + E*src[step+1] + bias));OP(dst[2], (A*src[2] + E*src[step+2] + bias));OP(dst[3], (A*src[3] + E*src[step+3] + bias));dst += stride;src += stride;}}}static void OPNAME ##rv40_chroma_mc8_c(uint8_t *dst,uint8_t *src,ptrdiff_t stride, int h, int x, int y){const int A = (8-x) * (8-y);const int B = ( x) * (8-y);const int C = (8-x) * ( y);const int D = ( x) * ( y);int i;int bias = rv40_bias[y&gt;&gt;1][x&gt;&gt;1];av_assert2(x&lt;8 &amp;&amp; y&lt;8 &amp;&amp; x&gt;=0 &amp;&amp; y&gt;=0);if(D){for(i = 0; i &lt; h; i++){OP(dst[0], (A*src[0] + B*src[1] + C*src[stride+0] + D*src[stride+1] + bias));OP(dst[1], (A*src[1] + B*src[2] + C*src[stride+1] + D*src[stride+2] + bias));OP(dst[2], (A*src[2] + B*src[3] + C*src[stride+2] + D*src[stride+3] + bias));OP(dst[3], (A*src[3] + B*src[4] + C*src[stride+3] + D*src[stride+4] + bias));OP(dst[4], (A*src[4] + B*src[5] + C*src[stride+4] + D*src[stride+5] + bias));OP(dst[5], (A*src[5] + B*src[6] + C*src[stride+5] + D*src[stride+6] + bias));OP(dst[6], (A*src[6] + B*src[7] + C*src[stride+6] + D*src[stride+7] + bias));OP(dst[7], (A*src[7] + B*src[8] + C*src[stride+7] + D*src[stride+8] + bias));dst += stride;src += stride;}}else{const int E = B + C;const ptrdiff_t step = C ? stride : 1;for(i = 0; i &lt; h; i++){OP(dst[0], (A*src[0] + E*src[step+0] + bias));OP(dst[1], (A*src[1] + E*src[step+1] + bias));OP(dst[2], (A*src[2] + E*src[step+2] + bias));OP(dst[3], (A*src[3] + E*src[step+3] + bias));OP(dst[4], (A*src[4] + E*src[step+4] + bias));OP(dst[5], (A*src[5] + E*src[step+5] + bias));OP(dst[6], (A*src[6] + E*src[step+6] + bias));OP(dst[7], (A*src[7] + E*src[step+7] + bias));dst += stride;src += stride;}}}</cpp:value></cpp:define>
















































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)+((b)&gt;&gt;6)+1)&gt;&gt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ((b)&gt;&gt;6)</cpp:value></cpp:define>

<macro><name>RV40_CHROMA_MC</name><argument_list>(<argument>put_</argument>, <argument>op_put</argument>)</argument_list></macro>
<macro><name>RV40_CHROMA_MC</name><argument_list>(<argument>avg_</argument>, <argument>op_avg</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV40_WEIGHT_FUNC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void rv40_weight_func_rnd_ ##size (uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride){int i, j;for (j = 0; j &lt; size; j++) {for (i = 0; i &lt; size; i++)dst[i] = (((w2 * src1[i]) &gt;&gt; 9) + ((w1 * src2[i]) &gt;&gt; 9) + 0x10) &gt;&gt; 5;src1 += stride;src2 += stride;dst += stride;}}static void rv40_weight_func_nornd_ ##size (uint8_t *dst, uint8_t *src1, uint8_t *src2, int w1, int w2, ptrdiff_t stride){int i, j;for (j = 0; j &lt; size; j++) {for (i = 0; i &lt; size; i++)dst[i] = (w2 * src1[i] + w1 * src2[i] + 0x10) &gt;&gt; 5;src1 += stride;src2 += stride;dst += stride;}}</cpp:value></cpp:define>

























<macro><name>RV40_WEIGHT_FUNC</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>RV40_WEIGHT_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rv40_dither_l</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x40</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rv40_dither_r</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x40</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_SYMM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(a, -(b), b)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rv40_weak_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_p1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p0q0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff_p1p0</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_q1q0</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_p1p2</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff_q1q2</name> <init>= <expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>alpha</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>filter_p1</name> <operator>&amp;&amp;</operator> <name>filter_q1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter_p1</name> <operator>&amp;&amp;</operator> <name>filter_q1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>CLIP_SYMM</name><argument_list>(<argument><expr><operator>(</operator><name>t</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>lim_p0q0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>diff</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>diff</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_p1</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>diff_p1p2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>beta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>diff_p1p0</name> <operator>+</operator> <name>diff_p1p2</name> <operator>-</operator> <name>diff</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <call><name>CLIP_SYMM</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>lim_p1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_q1</name> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>diff_q1q2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>beta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>diff_q1q0</name> <operator>+</operator> <name>diff_q1q2</name> <operator>+</operator> <name>diff</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <call><name>CLIP_SYMM</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>lim_q1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_h_weak_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p0q0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rv40_weak_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>filter_p1</name></expr></argument>, <argument><expr><name>filter_q1</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>lim_p0q0</name></expr></argument>, <argument><expr><name>lim_q1</name></expr></argument>, <argument><expr><name>lim_p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_v_weak_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p0q0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_q1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lim_p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rv40_weak_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>filter_p1</name></expr></argument>, <argument><expr><name>filter_q1</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>lim_p0q0</name></expr></argument>, <argument><expr><name>lim_q1</name></expr></argument>, <argument><expr><name>lim_p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rv40_strong_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lims</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dmode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sflag</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sflag</name> <operator>=</operator> <operator>(</operator><name>alpha</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sflag</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<name><name>rv40_dither_l</name><index>[<expr><name>dmode</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q0</name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<name><name>rv40_dither_r</name><index>[<expr><name>dmode</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>p0</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>lims</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>lims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q0</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>q0</name></expr></argument>, <argument><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>lims</name></expr></argument>, <argument><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>lims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name>p0</name> <operator>+</operator>
<literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name><name>rv40_dither_l</name><index>[<expr><name>dmode</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name>q0</name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name><name>rv40_dither_r</name><index>[<expr><name>dmode</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sflag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>lims</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>lims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q1</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>lims</name></expr></argument>, <argument><expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>lims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name>q0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <name>q1</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chroma</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<literal type="number">51</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">25</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator>
<literal type="number">51</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">26</literal><operator>*</operator><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_h_strong_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lims</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rv40_strong_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>lims</name></expr></argument>, <argument><expr><name>dmode</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_v_strong_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lims</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>dmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rv40_strong_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>lims</name></expr></argument>, <argument><expr><name>dmode</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>rv40_loop_filter_strength</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>edge</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum_p1p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum_q1q0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum_p1p2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum_q1q2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strong0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>strong1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum_p1p0</name> <operator>+=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_q1q0</name> <operator>+=</operator> <name><name>ptr</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>ptr</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>sum_p1p0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>beta</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>sum_q1q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>beta</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>q1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>edge</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ptr</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum_p1p2</name> <operator>+=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_q1q2</name> <operator>+=</operator> <name><name>ptr</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>ptr</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>strong0</name> <operator>=</operator> <operator>*</operator><name>p1</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>sum_p1p2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>strong1</name> <operator>=</operator> <operator>*</operator><name>q1</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>sum_q1q2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta2</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>strong0</name> <operator>&amp;&amp;</operator> <name>strong1</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv40_h_loop_filter_strength</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edge</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rv40_loop_filter_strength</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>beta2</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv40_v_loop_filter_strength</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edge</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rv40_loop_filter_strength</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>beta2</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rv40dsp_init</name><parameter_list>(<parameter><decl><type><name>RV34DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264QpelContext</name></type> <name>qpel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rv34dsp_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_h264qpel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qpel</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc10_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc30_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc01_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc11_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc21_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc31_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc12_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc22_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc32_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc03_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc13_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc23_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel16_mc33_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc10_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc30_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc01_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc11_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc21_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc31_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc12_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc22_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc32_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc03_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc13_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc23_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel16_mc33_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc10_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc30_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc01_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc11_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc21_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc31_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc12_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc22_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc32_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc03_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc13_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc23_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_qpel8_mc33_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc10_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc30_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc01_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc11_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc21_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc31_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc12_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc22_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc32_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc03_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc13_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc23_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_qpel8_mc33_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_chroma_mc8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_rv40_chroma_mc4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_chroma_mc8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv40_chroma_mc4_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv40_weight_func_rnd_16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv40_weight_func_rnd_8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv40_weight_func_nornd_16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weight_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv40_weight_func_nornd_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weak_loop_filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv40_h_weak_loop_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_weak_loop_filter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv40_v_weak_loop_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_strong_loop_filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv40_h_strong_loop_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_strong_loop_filter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv40_v_strong_loop_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_loop_filter_strength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv40_h_loop_filter_strength</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rv40_loop_filter_strength</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv40_v_loop_filter_strength</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rv40dsp_init_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rv40dsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rv40dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
