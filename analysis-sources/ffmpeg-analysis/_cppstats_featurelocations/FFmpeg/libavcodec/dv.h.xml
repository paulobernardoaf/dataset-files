<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dv.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DV_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv_profile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vlc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DVwork_chunk</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>buf_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>mb_coordinates</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DVwork_chunk</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DVVideoContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dv_zigzag</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>get_pixels</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fdct</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_put</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>me_cmp_func</name></type> <name>ildct_cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVwork_chunk</name></type> <name><name>work_chunks</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>idct_factor</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_deadzone</name></decl>;</decl_stmt>
}</block></struct></type> <name>DVVideoContext</name>;</typedef>

<enum>enum <name>dv_section_type</name> <block>{
<decl><name>dv_sect_header</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,
<decl><name>dv_sect_subcode</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>,
<decl><name>dv_sect_vaux</name> <init>= <expr><literal type="number">0x56</literal></expr></init></decl>,
<decl><name>dv_sect_audio</name> <init>= <expr><literal type="number">0x76</literal></expr></init></decl>,
<decl><name>dv_sect_video</name> <init>= <expr><literal type="number">0x96</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>dv_pack_type</name> <block>{
<decl><name>dv_header525</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>, 
<decl><name>dv_header625</name> <init>= <expr><literal type="number">0xbf</literal></expr></init></decl>, 
<decl><name>dv_timecode</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,
<decl><name>dv_audio_source</name> <init>= <expr><literal type="number">0x50</literal></expr></init></decl>,
<decl><name>dv_audio_control</name> <init>= <expr><literal type="number">0x51</literal></expr></init></decl>,
<decl><name>dv_audio_recdate</name> <init>= <expr><literal type="number">0x52</literal></expr></init></decl>,
<decl><name>dv_audio_rectime</name> <init>= <expr><literal type="number">0x53</literal></expr></init></decl>,
<decl><name>dv_video_source</name> <init>= <expr><literal type="number">0x60</literal></expr></init></decl>,
<decl><name>dv_video_control</name> <init>= <expr><literal type="number">0x61</literal></expr></init></decl>,
<decl><name>dv_video_recdate</name> <init>= <expr><literal type="number">0x62</literal></expr></init></decl>,
<decl><name>dv_video_rectime</name> <init>= <expr><literal type="number">0x63</literal></expr></init></decl>,
<decl><name>dv_unknown_pack</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_PROFILE_IS_HD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;video_stype &amp; 0x10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_PROFILE_IS_1080i50</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)-&gt;video_stype == 0x14) &amp;&amp; ((p)-&gt;dsf == 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_PROFILE_IS_1080i60</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)-&gt;video_stype == 0x14) &amp;&amp; ((p)-&gt;dsf == 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_PROFILE_IS_720p50</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)-&gt;video_stype == 0x18) &amp;&amp; ((p)-&gt;dsf == 1))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>576000</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_MAX_BPM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEX_VLC_BITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RL_VLC_ELEM</name></type> <name><name>ff_dv_rl_vlc</name><index>[<expr><literal type="number">1664</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_dv_init_dynamic_tables</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dvvideo_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_work_pool_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>n_difchan</name></name> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>difseg_size</name></name> <operator>*</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_1080i50</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">27</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_720p50</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">27</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_calculate_mb_xy</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DVwork_chunk</name> <modifier>*</modifier></type><name>work_chunk</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_x</name> <operator>=</operator> <name><name>work_chunk</name><operator>-&gt;</operator><name>mb_coordinates</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_y</name> <operator>=</operator> <name><name>work_chunk</name><operator>-&gt;</operator><name>mb_coordinates</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>mb_y</name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>mb_y</name> <operator>&gt;</operator> <literal type="number">17</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">72</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
