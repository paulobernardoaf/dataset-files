<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp9shared.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VP9SHARED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VP9SHARED_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<enum>enum <name>BlockPartition</name> <block>{
<decl><name>PARTITION_NONE</name></decl>, 
<decl><name>PARTITION_H</name></decl>, 
<decl><name>PARTITION_V</name></decl>, 
<decl><name>PARTITION_SPLIT</name></decl>, 
}</block>;</enum>

<enum>enum <name>InterPredMode</name> <block>{
<decl><name>NEARESTMV</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>NEARMV</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>ZEROMV</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>NEWMV</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>CompPredMode</name> <block>{
<decl><name>PRED_SINGLEREF</name></decl>,
<decl><name>PRED_COMPREF</name></decl>,
<decl><name>PRED_SWITCHABLE</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VP9mvrefPair</name> <block>{
<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9mvrefPair</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP9Frame</name> <block>{
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>segmentation_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uses_2pass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hwaccel_priv_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_picture_private</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9Frame</name>;</typedef>

<enum>enum <name>BlockLevel</name> <block>{
<decl><name>BL_64X64</name></decl>,
<decl><name>BL_32X32</name></decl>,
<decl><name>BL_16X16</name></decl>,
<decl><name>BL_8X8</name></decl>,
}</block>;</enum>

<enum>enum <name>BlockSize</name> <block>{
<decl><name>BS_64x64</name></decl>,
<decl><name>BS_64x32</name></decl>,
<decl><name>BS_32x64</name></decl>,
<decl><name>BS_32x32</name></decl>,
<decl><name>BS_32x16</name></decl>,
<decl><name>BS_16x32</name></decl>,
<decl><name>BS_16x16</name></decl>,
<decl><name>BS_16x8</name></decl>,
<decl><name>BS_8x16</name></decl>,
<decl><name>BS_8x8</name></decl>,
<decl><name>BS_8x4</name></decl>,
<decl><name>BS_4x8</name></decl>,
<decl><name>BS_4x4</name></decl>,
<decl><name>N_BS_SIZES</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VP9BitstreamHeader</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>keyframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>invisible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>errorres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>intraonly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>resetctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>refreshrefmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>highprecisionmvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>FilterMode</name></name></type> <name>filtermode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>allowcompinter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>refreshctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parallelmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>framectxid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>use_last_frame_mvs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>refidx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>signbias</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fixcompref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>varcompref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>sharpness</name></decl>;</decl_stmt>
}</block> <decl><name>filter</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ref</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>lf_delta</name></decl>;</struct>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>yac_qi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>ydc_qdelta</name></decl>, <name>uvdc_qdelta</name>, <name>uvac_qdelta</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lossless</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SEGMENT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>temporal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>absolute_vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>update_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prob</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pred_prob</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>q_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lf_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ref_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>skip_enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ref_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>q_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>lf_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lflvl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>feat</name><index>[<expr><name>MAX_SEGMENT</name></expr>]</index></name></decl>;</struct>
}</block> <decl><name>segmentation</name></decl>;</struct>
<decl_stmt><decl><type><name><name>enum</name> <name>TxfmMode</name></name></type> <name>txfmmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>CompPredMode</name></name></type> <name>comppredmode</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>log2_tile_cols</name></decl>, <name>log2_tile_rows</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tile_cols</name></decl>, <name>tile_rows</name>;</decl_stmt>
}</block> <decl><name>tiling</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>uncompressed_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compressed_header_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9BitstreamHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP9SharedContext</name> <block>{
<decl_stmt><decl><type><name>VP9BitstreamHeader</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name><name>refs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUR_FRAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_FRAME_MVPAIR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_FRAME_SEGMAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>VP9Frame</name></type> <name><name>frames</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>VP9SharedContext</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
