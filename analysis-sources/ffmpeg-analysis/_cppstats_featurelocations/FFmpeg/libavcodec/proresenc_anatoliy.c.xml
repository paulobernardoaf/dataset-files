<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\proresenc_anatoliy.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proresdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLICE_MB_WIDTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVProfile</name></type> <name><name>profiles</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_PRORES_PROXY</name></expr>, <expr><literal type="string">"apco"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_LT</name></expr>, <expr><literal type="string">"apcs"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_STANDARD</name></expr>, <expr><literal type="string">"apcn"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_HQ</name></expr>, <expr><literal type="string">"apch"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_4444</name></expr>, <expr><literal type="string">"ap4h"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_XQ</name></expr>, <expr><literal type="string">"ap4x"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qp_start_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qp_end_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>bitrate_table</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">2100</literal></expr>, <expr><literal type="number">3500</literal></expr>, <expr><literal type="number">5400</literal></expr>, <expr><literal type="number">7000</literal></expr>, <expr><literal type="number">10000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>valid_primaries</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVCOL_PRI_RESERVED0</name></expr>, <expr><name>AVCOL_PRI_BT709</name></expr>, <expr><name>AVCOL_PRI_UNSPECIFIED</name></expr>, <expr><name>AVCOL_PRI_BT470BG</name></expr>,
<expr><name>AVCOL_PRI_SMPTE170M</name></expr>, <expr><name>AVCOL_PRI_BT2020</name></expr>, <expr><name>AVCOL_PRI_SMPTE431</name></expr>, <expr><name>AVCOL_PRI_SMPTE432</name></expr>,<expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>valid_trc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVCOL_TRC_RESERVED0</name></expr>, <expr><name>AVCOL_TRC_BT709</name></expr>, <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>valid_colorspace</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVCOL_SPC_BT709</name></expr>, <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>, <expr><name>AVCOL_SPC_SMPTE170M</name></expr>,
<expr><name>AVCOL_SPC_BT2020_NCL</name></expr>, <expr><name>INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>QMAT_LUMA</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">41</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr>, <expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr>, <expr><block>{ 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>QMAT_CHROMA</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>,
<expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">41</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr>, <expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr>, <expr><block>{ 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FDCTDSPContext</name></type> <name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>fill_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>fill_u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>fill_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>fill_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>qmat_luma</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>qmat_chroma</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_422</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vendor</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProresContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_codeword</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codebook</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rice_order</name></decl>, <decl><type ref="prev"/><name>exp_order</name></decl>, <decl><type ref="prev"/><name>switch_bits</name></decl>, <decl><type ref="prev"/><name>first_exp</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>, <decl><type ref="prev"/><name>zeros</name></decl>;</decl_stmt>


<expr_stmt><expr><name>switch_bits</name> <operator>=</operator> <name>codebook</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rice_order</name> <operator>=</operator> <name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exp_order</name> <operator>=</operator> <operator>(</operator><name>codebook</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first_exp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>switch_bits</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>rice_order</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>first_exp</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>first_exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>exp_order</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zeros</name> <operator>=</operator> <name>exp</name> <operator>-</operator> <name>exp_order</name> <operator>+</operator> <name>switch_bits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rice_order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>rice_order</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>rice_order</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSCALE</name><parameter_list>(<parameter><type><name>qmat</name></type></parameter>,<parameter><type><name>ind</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val) / ((qmat)[ind]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_GOLOMB</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((val) * 2) ^ ((val) &gt;&gt; 31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SIGN</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>sign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((val) &gt;&gt; 31) ^ (sign))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NEGATIVE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((val) &gt;&gt; 31) ^ -1) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_GOLOMB2</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>sign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((val)==0 ? 0 : ((val) &lt;&lt; 1) + (sign))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_level</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>val</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_DC_CB</name></cpp:macro> <cpp:value>0xB8</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dc_codebook</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x70</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_dc_coeffs</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_dc</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_dc</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff_sign</name></decl>, <decl><type ref="prev"/><name>new_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <call><name>QSCALE</name><argument_list>(<argument><expr><name>qmat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TO_GOLOMB</name><argument_list>(<argument><expr><name>prev_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>FIRST_DC_CB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks_per_slice</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>new_dc</name> <operator>=</operator> <call><name>QSCALE</name><argument_list>(<argument><expr><name>qmat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>new_dc</name> <operator>-</operator> <name>prev_dc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff_sign</name> <operator>=</operator> <call><name>DIFF_SIGN</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_code</name> <operator>=</operator> <call><name>TO_GOLOMB2</name><argument_list>(<argument><expr><call><name>get_level</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>new_code</name></expr></argument>, <argument><expr><name><name>dc_codebook</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>new_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>delta</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_dc</name> <operator>=</operator> <name>new_dc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>run_to_cb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lev_to_cb</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4C</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_ac_coeffs</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_prores_scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_run</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_level</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>indp</name> <init>= <expr><name><name>ff_prores_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>blocks_per_slice</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>QSCALE</name><argument_list>(<argument><expr><name>qmat</name></expr></argument>, <argument><expr><name>indp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>indp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>encode_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name><name>run_to_cb</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>prev_run</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_run</name> <operator>=</operator> <name>run</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_level</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <name>level</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_codeword</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>lev_to_cb</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>prev_level</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>IS_NEGATIVE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>run</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><call><name>AV_RN64</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><name>block</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RN64</name><argument_list>(<argument><expr><name>pixels</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fdct_get</name><parameter_list>(<parameter><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_plane_dct</name><parameter_list>(<parameter><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_422</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma</name></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma</name> <operator>&amp;&amp;</operator> <name>is_422</name></expr>)</condition><block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <operator>(</operator><literal type="number">256</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">32</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fdct_get</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_slice_plane</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_sample_chroma</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_prores_scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blocks_per_slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blocks_per_slice</name> <operator>=</operator> <name>mb_count</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>sub_sample_chroma</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_dc_coeffs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_ac_coeffs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>blocks_per_slice</name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>, <argument><expr><name>ff_prores_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name></type> <name>encode_slice_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>blocks_y</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>blocks_u</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>blocks_v</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>mb_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>y_data_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>u_data_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>v_data_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>y_data_size</name> <operator>=</operator> <call><name>encode_slice_plane</name><argument_list>(<argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmat_luma</name><index>[<expr><name>qp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>u_data_size</name> <operator>=</operator> <call><name>encode_slice_plane</name><argument_list>(<argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>y_data_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <operator>*</operator><name>y_data_size</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmat_chroma</name><index>[<expr><name>qp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v_data_size</name> <operator>=</operator> <call><name>encode_slice_plane</name><argument_list>(<argument><expr><name>blocks_v</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>y_data_size</name> <operator>+</operator> <operator>*</operator><name>u_data_size</name></expr></argument>,
<argument><expr><name>data_size</name> <operator>-</operator> <operator>*</operator><name>y_data_size</name> <operator>-</operator> <operator>*</operator><name>u_data_size</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmat_chroma</name><index>[<expr><name>qp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>*</operator><name>y_data_size</name> <operator>+</operator> <operator>*</operator><name>u_data_size</name> <operator>+</operator> <operator>*</operator><name>v_data_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_alpha_diff</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>abits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbits</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dsize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>dbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>prev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <name>dsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>diff</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>dsize</name> <operator>||</operator> <name>diff</name></expr></argument> &gt;</argument_list></name> <name>dsize</name> <operator>||</operator> <operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>abits</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>dbits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_alpha_run</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>encode_alpha_slice_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type> <name>src_a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>mb_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>a_data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>abits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_coeffs</name> <init>= <expr><name>mb_count</name> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name>mask</name></expr></init></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>blocks</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>src_a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_alpha_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_alpha_run</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_alpha_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_alpha_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a_data_size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Underestimated required buffer size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>subimage_with_fill_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>dst_width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dst_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_alpha_plane</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_interlaced</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_top_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>box_width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>dst_width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>src_stride</name></decl>, <decl><type ref="prev"/><name>box_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>last_pix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_interlaced</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_stride</name> <operator>=</operator> <name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>box_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>dst_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>src_stride</name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>box_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>dst_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_top_field</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>box_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>box_width</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_alpha_plane</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_alpha_plane</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>last_pix</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last_pix</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dst_width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>last_pix</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>dst_width</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dst_width</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last_line</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subimage_with_fill</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>dst_width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dst_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_interlaced</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_top_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>subimage_with_fill_template</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_width</name></expr></argument>, <argument><expr><name>dst_height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>subimage_alpha_with_fill</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>dst_width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dst_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_interlaced</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_top_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>subimage_with_fill_template</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_width</name></expr></argument>, <argument><expr><name>dst_height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mb_count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unsafe</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_interlaced</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_top_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>luma_stride</name></decl>, <decl><type ref="prev"/><name>chroma_stride</name></decl>, <decl><type ref="prev"/><name>alpha_stride</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProresContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdr_size</name> <init>= <expr><literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>need_alpha</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>y_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>u_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>a_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tgt_bits</name> <init>= <expr><operator>(</operator><name>mb_count</name> <operator>*</operator> <name><name>bitrate_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>low_bytes</name> <init>= <expr><operator>(</operator><name>tgt_bits</name> <operator>-</operator> <operator>(</operator><name>tgt_bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>high_bytes</name> <init>= <expr><operator>(</operator><name>tgt_bits</name> <operator>+</operator> <operator>(</operator><name>tgt_bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><index>[<expr><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><index>[<expr><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>, <argument><expr><index>[<expr><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>luma_stride</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>chroma_stride</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>need_alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha_stride</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_interlaced</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>luma_stride</name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_u</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>chroma_stride</name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_v</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>chroma_stride</name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>luma_stride</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_u</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>chroma_stride</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_v</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>chroma_stride</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_top_field</name></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <name>luma_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_u</name> <operator>+=</operator> <name>chroma_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_v</name> <operator>+=</operator> <name>chroma_stride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unsafe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>subimage_with_fill</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subimage_with_fill</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>chroma_stride</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subimage_with_fill</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>chroma_stride</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_v</name></name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_v</name></name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name><operator>)</operator></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>encode_slice_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>,
<argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hdr_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <name>hdr_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>y_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_data_size</name></expr></argument>,
<argument><expr><operator>*</operator><name>qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_interlaced</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_u</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>chroma_stride</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_v</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>, <argument><expr><name>chroma_stride</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>luma_stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_u</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>chroma_stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calc_plane_dct</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>dest_v</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>, <argument><expr><name>chroma_stride</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>encode_slice_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>,
<argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hdr_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <name>hdr_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>y_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_data_size</name></expr></argument>,
<argument><expr><operator>*</operator><name>qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_size</name> <operator>&gt;</operator> <name>high_bytes</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>qp</name> <operator>&lt;</operator> <name><name>qp_end_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>qp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>encode_slice_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>,
<argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hdr_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <name>hdr_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>y_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_data_size</name></expr></argument>,
<argument><expr><operator>*</operator><name>qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>slice_size</name> <operator>&gt;</operator> <name>high_bytes</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>qp</name> <operator>&lt;</operator> <name><name>qp_end_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>slice_size</name> <argument_list type="generic">&lt; <argument><expr><name>low_bytes</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>qp</name></expr></argument>
&gt;</argument_list></name> <name><name>qp_start_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>qp</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <call><name>encode_slice_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>blocks_y</name></expr></argument>, <argument><expr><name>blocks_u</name></expr></argument>, <argument><expr><name>blocks_v</name></expr></argument>,
<argument><expr><name>mb_count</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hdr_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <name>hdr_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>y_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_data_size</name></expr></argument>,
<argument><expr><operator>*</operator><name>qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>slice_size</name> <argument_list type="generic">&lt; <argument><expr><name>low_bytes</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>qp</name></expr></argument> &gt;</argument_list></name> <name><name>qp_start_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hdr_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>qp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>u_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>need_alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>v_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>subimage_alpha_with_fill</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>alpha_stride</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_a</name></name></expr></argument>, <argument><expr><name>mb_count</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>is_interlaced</name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_alpha_slice_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_a</name></name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name>hdr_size</name> <operator>+</operator> <name>slice_size</name></expr></argument>,
<argument><expr><name>data_size</name> <operator>-</operator> <name>hdr_size</name> <operator>-</operator> <name>slice_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>hdr_size</name> <operator>+</operator> <name>y_data_size</name> <operator>+</operator> <name>u_data_size</name> <operator>+</operator> <name>v_data_size</name> <operator>+</operator> <name>a_data_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prores_encode_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>picture_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_top_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name> <init>= <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdr_size</name></decl>, <decl><type ref="prev"/><name>sl_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name></decl>, <decl><type ref="prev"/><name>sl_data_size</name></decl>, <decl><type ref="prev"/><name>qp</name></decl>, <decl><type ref="prev"/><name>mb_height</name></decl>, <decl><type ref="prev"/><name>picture_height</name></decl>, <decl><type ref="prev"/><name>unsafe_mb_height_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unsafe_bot</name></decl>, <decl><type ref="prev"/><name>unsafe_right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sl_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sl_data_sizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_per_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem</name> <init>= <expr><name>mb_width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>unsafe_mb_height_limit</name> <operator>=</operator> <name>mb_height</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_top_field</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>picture_height</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>picture_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <operator>(</operator><name>picture_height</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>unsafe_mb_height_limit</name> <operator>=</operator> <name>mb_height</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>DEFAULT_SLICE_MB_WIDTH</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_per_line</name> <operator>+=</operator> <name>rem</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>qp_start_table</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr_size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sl_data_size</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name>hdr_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_data_sizes</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>hdr_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_data</name> <operator>=</operator> <name>sl_data_sizes</name> <operator>+</operator> <operator>(</operator><name>slice_per_line</name> <operator>*</operator> <name>mb_height</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name>mb_height</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_mb_count</name> <init>= <expr><name>DEFAULT_SLICE_MB_WIDTH</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>mb_x</name> <operator>&lt;</operator> <name>mb_width</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>mb_width</name> <operator>-</operator> <name>mb_x</name> <operator>&lt;</operator> <name>slice_mb_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slice_mb_count</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>unsafe_bot</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mb_y</name> <operator>==</operator> <name>unsafe_mb_height_limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>unsafe_right</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mb_x</name> <operator>+</operator> <name>slice_mb_count</name> <operator>==</operator> <name>mb_width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sl_size</name> <operator>=</operator> <call><name>encode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>slice_mb_count</name></expr></argument>,
<argument><expr><name>sl_data</name></expr></argument>, <argument><expr><name>sl_data_size</name></expr></argument>, <argument><expr><name>unsafe_bot</name> <operator>||</operator> <name>unsafe_right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name></expr></argument>, <argument><expr><name>is_top_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sl_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<return>return <expr><name>sl_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sl_data_sizes</name></expr></argument>, <argument><expr><name>sl_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_data</name> <operator>+=</operator> <name>sl_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl_data_size</name> <operator>-=</operator> <name>sl_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_x</name> <operator>+=</operator> <name>slice_mb_count</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hdr_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sl_data</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>slice_per_line</name> <operator>*</operator> <name>mb_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>DEFAULT_SLICE_MB_WIDTH</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<return>return <expr><name>sl_data</name> <operator>-</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prores_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compress_frame_size</name></decl>, <decl><type ref="prev"/><name>pic_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>is_top_field_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">500</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></init></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frame_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>compress_frame_size</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <name>header_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>compress_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"icpf"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vendor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_flags</name> <operator>=</operator> <literal type="number">0x82</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;=</operator> <name>FF_PROFILE_PRORES_4444</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>frame_flags</name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pict</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>||</operator> <operator>!</operator><name><name>pict</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"use interlaced encoding, top field first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_flags</name> <operator>|=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>is_top_field_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"use interlaced encoding, bottom field first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_flags</name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"use progressive encoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>frame_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <call><name>ff_int_from_list_or_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"frame color primaries"</literal></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>, <argument><expr><name>valid_primaries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <call><name>ff_int_from_list_or_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"frame color trc"</literal></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>, <argument><expr><name>valid_trc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <call><name>ff_int_from_list_or_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"frame colorspace"</literal></expr></argument>, <argument><expr><name><name>pict</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>, <argument><expr><name>valid_colorspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;=</operator> <name>FF_PROFILE_PRORES_4444</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">0xA0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">0xA2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>QMAT_LUMA</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>QMAT_CHROMA</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic_size</name> <operator>=</operator> <call><name>prores_encode_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>compress_frame_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>is_top_field_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pic_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pic_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>compress_frame_size</name> <operator>+=</operator> <name>pic_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>pic_size</name> <operator>=</operator> <call><name>prores_encode_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>compress_frame_size</name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>compress_frame_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>is_top_field_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pic_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pic_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>compress_frame_size</name> <operator>+=</operator> <name>pic_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>compress_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>compress_frame_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_mat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>prores_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ProresContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>need_alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name> <operator>=</operator> <name>ff_prores_interlaced_scan</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scantable</name></name> <operator>=</operator> <name>ff_prores_progressive_scan</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"frame width needs to be multiple of 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">65534</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The maximum dimensions are 65534x65535\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vendor</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vendor ID should be 4 bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_PRORES_STANDARD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"encoding with ProRes standard (apcn) profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_PRORES_4444</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"encoding with ProRes 4444 (ap4h) profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA444P10</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_PRORES_4444</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"encoding with ProRes 4444+ (ap4h) profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;</operator> <name>FF_PROFILE_PRORES_PROXY</name>
<operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <name>FF_PROFILE_PRORES_XQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(
<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unknown profile %d, use [0 - apco, 1 - apcs, 2 - apcn (default), 3 - apch, 4 - ap4h, 5 - ap4x]\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <name>FF_PROFILE_PRORES_HQ</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"encoding with ProRes 444/Xq (ap4h/ap4x) profile, need YUV444P10 input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P10</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA444P10</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;</operator> <name>FF_PROFILE_PRORES_4444</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"encoding with ProRes Proxy/LT/422/422 HQ (apco, apcs, apcn, ap4h) profile, need YUV422P10 input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;</operator> <name>FF_PROFILE_PRORES_4444</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name> <operator>+</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_v</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name> <operator>+</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_422</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name> <operator>+</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_v</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fill_u</name></name> <operator>+</operator> <operator>(</operator><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA444P10</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>need_alpha</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fill_a</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>DEFAULT_SLICE_MB_WIDTH</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_a</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>profiles</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>scale_mat</name><argument_list>(<argument><expr><name><name>QMAT_LUMA</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr></argument> , <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmat_luma</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scale_mat</name><argument_list>(<argument><expr><name><name>QMAT_CHROMA</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qmat_chroma</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>prores_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ProresContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fill_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ProresContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"vendor"</literal></expr>, <expr><literal type="string">"vendor ID"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"fmpg"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>proresaw_enc_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ProResAw encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>prores_enc_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ProRes encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_prores_aw_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"prores_aw"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple ProRes"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PRORES</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProresContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>prores_encode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>prores_encode_close</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>prores_encode_frame</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{<expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>proresaw_enc_class</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_prores_profiles</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_prores_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"prores"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple ProRes"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PRORES</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProresContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>prores_encode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>prores_encode_close</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>prores_encode_frame</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{<expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>prores_enc_class</name></expr>,
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_prores_profiles</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
