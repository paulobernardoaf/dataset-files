<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aptxdec.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aptx.h"</cpp:file></cpp:include>






<function><type><name>av_always_inline</name>
<specifier>static</specifier> <name>void</name></type> <name>aptx_qmf_polyphase_synthesis</name><parameter_list>(<parameter><decl><type><name>FilterSignal</name></type> <name><name>signal</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>coeffs</name><index>[<expr><name>NB_FILTERS</name></expr>]</index><index>[<expr><name>FILTER_TAPS</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>low_subband_input</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>high_subband_input</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>subbands</name><index>[<expr><name>NB_FILTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>subbands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>low_subband_input</name> <operator>+</operator> <name>high_subband_input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>subbands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>low_subband_input</name> <operator>-</operator> <name>high_subband_input</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_FILTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>aptx_qmf_filter_signal_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>subbands</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>aptx_qmf_convolution</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_qmf_tree_synthesis</name><parameter_list>(<parameter><decl><type><name>QMFAnalysis</name> <modifier>*</modifier></type><name>qmf</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>subband_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>intermediate_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_qmf_polyphase_synthesis</name><argument_list>(<argument><expr><name><name>qmf</name><operator>-&gt;</operator><name>inner_filter_signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>aptx_qmf_inner_coeffs</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>,
<argument><expr><name><name>subband_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>subband_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>intermediate_samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_qmf_polyphase_synthesis</name><argument_list>(<argument><expr><name><name>qmf</name><operator>-&gt;</operator><name>outer_filter_signal</name></name></expr></argument>,
<argument><expr><name>aptx_qmf_outer_coeffs</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>,
<argument><expr><name><name>intermediate_samples</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>intermediate_samples</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_decode_channel</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>subband_samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subband</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>subband</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subband</name> <operator>&lt;</operator> <name>NB_SUBBANDS</name></expr>;</condition> <incr><expr><name>subband</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>subband_samples</name><index>[<expr><name>subband</name></expr>]</index></name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>prediction</name><index>[<expr><name>subband</name></expr>]</index></name><operator>.</operator><name>previous_reconstructed_sample</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>aptx_qmf_tree_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>qmf</name></name></expr></argument>, <argument><expr><name>subband_samples</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptx_unpack_codeword</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>codeword</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aptxhd_unpack_codeword</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>codeword</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>codeword</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>=</operator> <operator>(</operator><name><name>channel</name><operator>-&gt;</operator><name>quantize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>quantized_sample</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator>
<operator>|</operator> <call><name>aptx_quantized_parity</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aptx_decode_samples</name><parameter_list>(<parameter><decl><type><name>AptXContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_aptx_generate_dither</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptxhd_unpack_codeword</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_unpack_codeword</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ff_aptx_invert_quantize_and_prediction</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>aptx_check_parity</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sync_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>aptx_decode_channel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aptx_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AptXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>opos</name></decl>, <decl><type ref="prev"/><name>channel</name></decl>, <decl><type ref="prev"/><name>sample</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>NB_CHANNELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>opos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>opos</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>pos</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr><operator>,</operator> <expr><name>opos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>NB_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>aptx_decode_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Synchronization error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>channel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>NB_CHANNELS</name></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>opos</name><operator>+</operator><name>sample</name><operator>)</operator></expr>]</index></name></expr></argument>,
<argument><expr><name><name>samples</name><index>[<expr><name>channel</name></expr>]</index><index>[<expr><name>sample</name></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_APTX_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aptx_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aptx"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"aptX (Audio Processing Technology for Bluetooth)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APTX</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AptXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_aptx_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aptx_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_APTX_HD_DECODER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aptx_hd_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aptx_hd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"aptX HD (Audio Processing Technology for Bluetooth)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APTX_HD</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AptXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_aptx_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aptx_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
