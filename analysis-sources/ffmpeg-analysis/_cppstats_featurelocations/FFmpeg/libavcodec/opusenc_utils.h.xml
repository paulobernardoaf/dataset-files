<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\opusenc_utils.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_OPUSENC_UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_OPUSENC_UTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FFBesselFilter</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FFBesselFilter</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bessel_reinit</name><parameter_list>(<parameter><decl><type><name>FFBesselFilter</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>highpass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>unstable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>cfreq</name></decl>, <decl><type ref="prev"/><name>w0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>highpass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal><operator>/</operator><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3.0f</literal><operator>/</operator><literal type="number">4.0f</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">3.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfreq</name> <operator>=</operator> <name>c</name><operator>*</operator><name>f0</name><operator>/</operator><name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unstable</name> <operator>=</operator> <operator>(</operator><name>cfreq</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal> <operator>||</operator> <name>cfreq</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal><operator>/</operator><literal type="number">4.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">3.0f</literal></expr></argument>)</argument_list></call><operator>*</operator><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal><operator>/</operator><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">3.0f</literal><operator>/</operator><literal type="number">4.0f</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfreq</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>-</operator> <name>c</name><operator>*</operator><name>f0</name><operator>/</operator><name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unstable</name> <operator>=</operator> <operator>(</operator><name>cfreq</name> <operator>&lt;=</operator> <literal type="number">3.0f</literal><operator>/</operator><literal type="number">8.0f</literal> <operator>||</operator> <name>cfreq</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>tanf</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><name>cfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">3.0f</literal> <operator>*</operator> <name>w0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <literal type="number">3.0f</literal> <operator>*</operator> <name>w0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k2</name><operator>/</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <name>k1</name> <operator>+</operator> <name>k2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><name>k2</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>highpass</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>unstable</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bessel_init</name><parameter_list>(<parameter><decl><type><name>FFBesselFilter</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>highpass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFBesselFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bessel_reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>highpass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>bessel_filter</name><parameter_list>(<parameter><decl><type><name>FFBesselFilter</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
