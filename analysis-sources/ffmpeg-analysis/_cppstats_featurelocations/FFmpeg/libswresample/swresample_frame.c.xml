<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\swresample_frame.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>swr_config_frame</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>swr_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"icl"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"isf"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"isr"</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ocl"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"osf"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"osr"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_changed</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>in_sample_fmt</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>AVERROR_INPUT_CHANGED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>AVERROR_OUTPUT_CHANGED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>convert_frame</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>in_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out_data</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_nb_samples</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_nb_samples</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>out_nb_samples</name></expr></argument>, <argument><expr><name>in_data</name></expr></argument>, <argument><expr><name>in_nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>available_samples</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sample</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>bytes_per_sample</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>samples</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>samples</name> <operator>/</operator> <name>channels</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_convert_frame</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>setup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>swr_is_initialized</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swr_config_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>setup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>config_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>swr_get_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>setup</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swr_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>available_samples</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>convert_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
