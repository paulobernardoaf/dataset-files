<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\aarch64\resample_init.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/resample.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_RESAMPLE_COMMON_TEMPLATE</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>DELEM</name></type></parameter>, <parameter><type><name>FELEM</name></type></parameter>, <parameter><type><name>FELEM2</name></type></parameter>, <parameter><type><name>OUT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_resample_common_apply_filter_x4_##TYPE##_neon(FELEM2 *acc, const DELEM *src, const FELEM *filter, int length); void ff_resample_common_apply_filter_x8_##TYPE##_neon(FELEM2 *acc, const DELEM *src, const FELEM *filter, int length); static int ff_resample_common_##TYPE##_neon(ResampleContext *c, void *dest, const void *source, int n, int update_ctx) { DELEM *dst = dest; const DELEM *src = source; int dst_index; int index = c-&gt;index; int frac = c-&gt;frac; int sample_index = 0; int x4_aligned_filter_length = c-&gt;filter_length &amp; ~3; int x8_aligned_filter_length = c-&gt;filter_length &amp; ~7; while (index &gt;= c-&gt;phase_count) { sample_index++; index -= c-&gt;phase_count; } for (dst_index = 0; dst_index &lt; n; dst_index++) { FELEM *filter = ((FELEM *) c-&gt;filter_bank) + c-&gt;filter_alloc * index; FELEM2 val = 0; int i = 0; if (x8_aligned_filter_length &gt;= 8) { ff_resample_common_apply_filter_x8_##TYPE##_neon(&amp;val, &amp;src[sample_index], filter, x8_aligned_filter_length); i += x8_aligned_filter_length; } else if (x4_aligned_filter_length &gt;= 4) { ff_resample_common_apply_filter_x4_##TYPE##_neon(&amp;val, &amp;src[sample_index], filter, x4_aligned_filter_length); i += x4_aligned_filter_length; } for (; i &lt; c-&gt;filter_length; i++) { val += src[sample_index + i] * (FELEM2)filter[i]; } OUT(dst[dst_index], val); frac += c-&gt;dst_incr_mod; index += c-&gt;dst_incr_div; if (frac &gt;= c-&gt;src_incr) { frac -= c-&gt;src_incr; index++; } while (index &gt;= c-&gt;phase_count) { sample_index++; index -= c-&gt;phase_count; } } if (update_ctx) { c-&gt;frac = frac; c-&gt;index = index; } return sample_index; }</cpp:value></cpp:define> 

































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>
<macro><name>DECLARE_RESAMPLE_COMMON_TEMPLATE</name><argument_list>(<argument>float</argument>, <argument>float</argument>, <argument>float</argument>, <argument>float</argument>, <argument>OUT</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v) = ((v) + (1&lt;&lt;(14)))&gt;&gt;15; (d) = av_clip_int16(v)</cpp:value></cpp:define>
<macro><name>DECLARE_RESAMPLE_COMMON_TEMPLATE</name><argument_list>(<argument>s16</argument>, <argument>int16_t</argument>, <argument>int16_t</argument>, <argument>int32_t</argument>, <argument>OUT</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT</name></cpp:undef>

<function><type><name>av_cold</name> <name>void</name></type> <name>swri_resample_dsp_aarch64_init</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>resample_common</name></name> <operator>=</operator> <name>ff_resample_common_float_neon</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>resample_common</name></name> <operator>=</operator> <name>ff_resample_common_s16_neon</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
