<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\audioconvert.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audioconvert.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_NAME</name><parameter_list>(<parameter><type><name>dst_fmt</name></type></parameter>, <parameter><type><name>src_fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>conv_ ##src_fmt ##_to_ ##dst_fmt</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>otype</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void CONV_FUNC_NAME(ofmt, ifmt)(uint8_t *po, const uint8_t *pi, int is, int os, uint8_t *end){uint8_t *end2 = end - 3*os;while(po &lt; end2){*(otype*)po = expr; pi += is; po += os;*(otype*)po = expr; pi += is; po += os;*(otype*)po = expr; pi += is; po += os;*(otype*)po = expr; pi += is; po += os;}while(po &lt; end){*(otype*)po = expr; pi += is; po += os;}}</cpp:value></cpp:define>















<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument> , <argument>*(const uint8_t*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument> , <argument>(*(const uint8_t*)pi - <literal type="number">0x80U</literal>)&lt;&lt;<literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument> , <argument>(*(const uint8_t*)pi - <literal type="number">0x80U</literal>)&lt;&lt;<literal type="number">24</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument> , <argument>(uint64_t)((*(const uint8_t*)pi - <literal type="number">0x80U</literal>))&lt;&lt;<literal type="number">56</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_U8</argument> , <argument>(*(const uint8_t*)pi - <literal type="number">0x80</literal>)*(<literal type="number">1.0f</literal>/ (<literal type="number">1</literal>&lt;&lt;<literal type="number">7</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_U8</argument> , <argument>(*(const uint8_t*)pi - <literal type="number">0x80</literal>)*(<literal type="number">1.0</literal> / (<literal type="number">1</literal>&lt;&lt;<literal type="number">7</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>(*(const int16_t*)pi&gt;&gt;<literal type="number">8</literal>) + <literal type="number">0x80</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>*(const int16_t*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>*(const int16_t*)pi&lt;&lt;<literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>(uint64_t)(*(const int16_t*)pi)&lt;&lt;<literal type="number">48</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_S16</argument>, <argument>*(const int16_t*)pi*(<literal type="number">1.0f</literal>/ (<literal type="number">1</literal>&lt;&lt;<literal type="number">15</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_S16</argument>, <argument>*(const int16_t*)pi*(<literal type="number">1.0</literal> / (<literal type="number">1</literal>&lt;&lt;<literal type="number">15</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>(*(const int32_t*)pi&gt;&gt;<literal type="number">24</literal>) + <literal type="number">0x80</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>*(const int32_t*)pi&gt;&gt;<literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>*(const int32_t*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>(uint64_t)(*(const int32_t*)pi)&lt;&lt;<literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_S32</argument>, <argument>*(const int32_t*)pi*(<literal type="number">1.0f</literal>/ (<literal type="number">1U</literal>&lt;&lt;<literal type="number">31</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_S32</argument>, <argument>*(const int32_t*)pi*(<literal type="number">1.0</literal> / (<literal type="number">1U</literal>&lt;&lt;<literal type="number">31</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_S64</argument>, <argument>(*(const int64_t*)pi&gt;&gt;<literal type="number">56</literal>) + <literal type="number">0x80</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_S64</argument>, <argument>*(const int64_t*)pi&gt;&gt;<literal type="number">48</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_S64</argument>, <argument>*(const int64_t*)pi&gt;&gt;<literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_S64</argument>, <argument>*(const int64_t*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_S64</argument>, <argument>*(const int64_t*)pi*(<literal type="number">1.0f</literal>/ (UINT64_C(<literal type="number">1</literal>)&lt;&lt;<literal type="number">63</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_S64</argument>, <argument>*(const int64_t*)pi*(<literal type="number">1.0</literal> / (UINT64_C(<literal type="number">1</literal>)&lt;&lt;<literal type="number">63</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>av_clip_uint8( lrintf(*(const float*)pi * (<literal type="number">1</literal>&lt;&lt;<literal type="number">7</literal>)) + <literal type="number">0x80</literal>)</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>av_clip_int16( lrintf(*(const float*)pi * (<literal type="number">1</literal>&lt;&lt;<literal type="number">15</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>av_clipl_int32(llrintf(*(const float*)pi * (<literal type="number">1U</literal>&lt;&lt;<literal type="number">31</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>llrintf(*(const float*)pi * (UINT64_C(<literal type="number">1</literal>)&lt;&lt;<literal type="number">63</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>*(const float*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>*(const float*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument> , <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>av_clip_uint8( lrint(*(const double*)pi * (<literal type="number">1</literal>&lt;&lt;<literal type="number">7</literal>)) + <literal type="number">0x80</literal>)</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>av_clip_int16( lrint(*(const double*)pi * (<literal type="number">1</literal>&lt;&lt;<literal type="number">15</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>av_clipl_int32(llrint(*(const double*)pi * (<literal type="number">1U</literal>&lt;&lt;<literal type="number">31</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_S64</argument>, <argument>int64_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>llrint(*(const double*)pi * (UINT64_C(<literal type="number">1</literal>)&lt;&lt;<literal type="number">63</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument> , <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>*(const double*)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument> , <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>*(const double*)pi</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PAIR_FUNC</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>in</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[(out) + AV_SAMPLE_FMT_NB*(in)] = CONV_FUNC_NAME(out, in)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>conv_func_type</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>fmt_pair_to_conv_functions</name><index>[<expr><name>AV_SAMPLE_FMT_NB</name><operator>*</operator><name>AV_SAMPLE_FMT_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> )</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument> , <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FMT_PAIR_FUNC</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cpy1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cpy2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cpy4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cpy8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AudioConvert</name> <modifier>*</modifier></type><name>swri_audio_convert_alloc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ch_map</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_type</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fmt_pair_to_conv_functions</name><index>[<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>AV_SAMPLE_FMT_NB</name><operator>*</operator><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>in_fmt</name> <operator>=</operator> <call><name>av_get_planar_sample_fmt</name><argument_list>( <argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_fmt</name> <operator>=</operator> <call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>conv_f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_map</name></name> <operator>=</operator> <name>ch_map</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name> <operator>||</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>silence</name></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>silence</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>in_fmt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ch_map</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case><expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>cpy1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case><expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>cpy2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case><expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>cpy4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case><expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>cpy8</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>HAVE_X86ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_MMX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>swri_audio_convert_init_x86</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>swri_audio_convert_init_arm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>swri_audio_convert_init_aarch64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>swri_audio_convert_free</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>swri_audio_convert</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>os</name><init>= <expr><operator>(</operator><ternary><condition><expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:<expr><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr></else></ternary><operator>)</operator> <operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>misaligned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_simd_align_mask</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>|=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>misaligned</name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_simd_align_mask</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>out_simd_align_mask</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>|=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>misaligned</name> <operator>|=</operator> <name>m</name> <operator>&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out_simd_align_mask</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_map</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>misaligned</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>len</name><operator>&amp;</operator><operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>off</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>off</name><operator>&lt;=</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <name>SWR_CH_MAX</name> <operator>||</operator> <operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>off</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name> <operator>==</operator> <name><name>in</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name>planes</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name></name><operator>+</operator><name>ch</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name></name><operator>+</operator><name>ch</name></expr></argument>, <argument><expr><name>off</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:<expr><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>simd_f</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>off</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ich</name><init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_map</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr> </then><else>: <expr><name>ch</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is</name><init>= <expr><ternary><condition><expr><name>ich</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>bps</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pi</name><init>= <expr><ternary><condition><expr><name>ich</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>silence</name></name></expr> </then><else>: <expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ich</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>po</name><init>= <expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name><init>= <expr><name>po</name> <operator>+</operator> <name>os</name><operator>*</operator><name>len</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>po</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>conv_f</name></name><argument_list>(<argument><expr><name>po</name><operator>+</operator><name>off</name><operator>*</operator><name>os</name></expr></argument>, <argument><expr><name>pi</name><operator>+</operator><name>off</name><operator>*</operator><name>is</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
