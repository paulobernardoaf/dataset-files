<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\dither_template.c">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_DITHER_DBL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_DITHER_FLT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_DITHER_S32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_int32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v = FFMAX(FFMIN(v, INT32_MAX), INT32_MIN)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_DITHER_S16</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_int16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v = FFMAX(FFMIN(v, INT16_MAX), INT16_MIN)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>ERROR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name> <name>RENAME</name></type>(<name>swri_noise_shaping</name>)<parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dsts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>noises</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>taps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_taps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>S</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_scale</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>S_1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_scale_1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>taps</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>taps</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_coeffs</name><index>[<expr><name>taps</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>srcs</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>noise</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>noises</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>DELEM</name><operator>*</operator><operator>)</operator><name><name>srcs</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>DELEM</name><operator>*</operator><operator>)</operator><name><name>dsts</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ns_errors</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_errors</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ns_coeffs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_coeffs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_pos</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>S_1</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>taps</name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <name><name>ns_coeffs</name><index>[<expr><name>j</name></expr> ]</index></name> <operator>*</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name></expr> ]</index></name>
<operator>+</operator><name><name>ns_coeffs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>+</operator><name><name>ns_coeffs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name>
<operator>+</operator><name><name>ns_coeffs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>taps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <name><name>ns_coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><name>pos</name></expr> ?</condition><then> <expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>taps</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>rint</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name><name>noise</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns_errors</name><index>[<expr><name>pos</name> <operator>+</operator> <name>taps</name></expr>]</index></name> <operator>=</operator> <name><name>ns_errors</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>*=</operator> <name>S</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DELEM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLIP</name></cpp:undef>
</unit>
