<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\swresample.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SWRESAMPLE_SWRESAMPLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWRESAMPLE_SWRESAMPLE_H</name></cpp:macro></cpp:define>



































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/version.h"</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWR_FLAG_RESAMPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 




<enum>enum <name>SwrDitherType</name> <block>{
<decl><name>SWR_DITHER_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>SWR_DITHER_RECTANGULAR</name></decl>,
<decl><name>SWR_DITHER_TRIANGULAR</name></decl>,
<decl><name>SWR_DITHER_TRIANGULAR_HIGHPASS</name></decl>,

<decl><name>SWR_DITHER_NS</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, 
<decl><name>SWR_DITHER_NS_LIPSHITZ</name></decl>,
<decl><name>SWR_DITHER_NS_F_WEIGHTED</name></decl>,
<decl><name>SWR_DITHER_NS_MODIFIED_E_WEIGHTED</name></decl>,
<decl><name>SWR_DITHER_NS_IMPROVED_E_WEIGHTED</name></decl>,
<decl><name>SWR_DITHER_NS_SHIBATA</name></decl>,
<decl><name>SWR_DITHER_NS_LOW_SHIBATA</name></decl>,
<decl><name>SWR_DITHER_NS_HIGH_SHIBATA</name></decl>,
<decl><name>SWR_DITHER_NB</name></decl>, 
}</block>;</enum>


<enum>enum <name>SwrEngine</name> <block>{
<decl><name>SWR_ENGINE_SWR</name></decl>, 
<decl><name>SWR_ENGINE_SOXR</name></decl>, 
<decl><name>SWR_ENGINE_NB</name></decl>, 
}</block>;</enum>


<enum>enum <name>SwrFilterType</name> <block>{
<decl><name>SWR_FILTER_TYPE_CUBIC</name></decl>, 
<decl><name>SWR_FILTER_TYPE_BLACKMAN_NUTTALL</name></decl>, 
<decl><name>SWR_FILTER_TYPE_KAISER</name></decl>, 
}</block>;</enum>











<typedef>typedef <type><name><name>struct</name> <name>SwrContext</name></name></type> <name>SwrContext</name>;</typedef>








<function_decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>swr_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>swr_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>swr_is_initialized</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>





















<function_decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr_alloc_set_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>out_ch_layout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_sample_rate</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>in_ch_layout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sample_rate</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>log_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>swr_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>swr_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>int</name></type> <name>swr_convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_count</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>int64_t</name></type> <name>swr_next_pts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>int</name></type> <name>swr_set_compensation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compensation_distance</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>swr_set_channel_mapping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>channel_map</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>int</name></type> <name>swr_build_matrix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in_layout</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>out_layout</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>center_mix_level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>surround_mix_level</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>lfe_mix_level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rematrix_maxval</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>rematrix_volume</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>swr_set_matrix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>int</name></type> <name>swr_drop_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>swr_inject_silence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>int64_t</name></type> <name>swr_get_delay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> <name>swr_get_out_samples</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>unsigned</name></type> <name>swresample_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swresample_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swresample_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










































<function_decl><type><name>int</name></type> <name>swr_convert_frame</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>swr</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type> <name>swr_config_frame</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>swr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
