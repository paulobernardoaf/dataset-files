<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswresample\soxr_resample.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;soxr.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linear</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>cutoff</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>SwrFilterType</name></name></type> <name>filter_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>kaiser_beta</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cheby</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact_rational</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>soxr_error_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_datatype_t</name></type> <name>type</name> <init>=
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>?</condition><then> <expr><name>SOXR_INT16_S</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr> ?</condition><then> <expr><name>SOXR_INT16_I</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>?</condition><then> <expr><name>SOXR_INT32_S</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr> ?</condition><then> <expr><name>SOXR_INT32_I</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>?</condition><then> <expr><name>SOXR_FLOAT32_S</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr> ?</condition><then> <expr><name>SOXR_FLOAT32_I</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>?</condition><then> <expr><name>SOXR_FLOAT64_S</name></expr> </then><else>:
<expr><ternary><condition><expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name></expr> ?</condition><then> <expr><name>SOXR_FLOAT64_I</name></expr> </then><else>: <expr><operator>(</operator><name>soxr_datatype_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_io_spec_t</name></type> <name>io_spec</name> <init>= <expr><call><name>soxr_io_spec</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>soxr_quality_spec_t</name></type> <name>q_spec</name> <init>= <expr><call><name>soxr_quality_spec</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>precision</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>SOXR_HI_PREC_CLOCK</name><operator>|</operator><name>SOXR_ROLLOFF_NONE</name><operator>)</operator><operator>*</operator><operator>!</operator><operator>!</operator><name>cheby</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q_spec</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>SOXR_VERSION</name></expr></cpp:if> 
<expr_stmt><expr><name><name>q_spec</name><operator>.</operator><name>bw_pc</name></name> <operator>=</operator> <ternary><condition><expr><name>cutoff</name></expr>?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>cutoff</name></expr></argument>,<argument><expr><literal type="number">.995</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">.8</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">100</literal></expr> </then><else>: <expr><name><name>q_spec</name><operator>.</operator><name>bw_pc</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>q_spec</name><operator>.</operator><name>passband_end</name></name> <operator>=</operator> <ternary><condition><expr><name>cutoff</name></expr>?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>cutoff</name></expr></argument>,<argument><expr><literal type="number">.995</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">.8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>q_spec</name><operator>.</operator><name>passband_end</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>soxr_delete</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator>struct <name>ResampleContext</name> <operator>*</operator><operator>)</operator>
<call><name>soxr_create</name><argument_list>(<argument><expr><name>in_rate</name></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q_spec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"soxr_create: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>soxr_delete</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delayed_samples_fixup</name></name> <operator>=</operator> <call><name>soxr_delay</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>soxr_process</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idone</name></decl>, <decl><type ref="prev"/><name>odone</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>soxr_process</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idone</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>odone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delayed_samples_fixup</name></name> <operator>-=</operator> <call><name>soxr_delay</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>,
<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>consumed</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idone</name></decl>, <decl><type ref="prev"/><name>odone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>soxr_error_t</name></type> <name>error</name> <init>= <expr><call><name>soxr_set_error</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><call><name>soxr_set_num_channels</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>soxr_process</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>src_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>idone</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>dst_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>odone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>idone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>idone</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>error</name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>odone</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_delay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>base</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>delayed_samples</name> <init>= <expr><call><name>soxr_delay</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay_s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delayed_samples</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>delayed_samples_fixup</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delay_s</name> <operator>=</operator> <name>delayed_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>delay_s</name> <operator>*</operator> <name>base</name> <operator>+</operator> <literal type="number">.5</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invert_initial_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_out_samples</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>out_samples</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>*</operator> <name>in_samples</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delayed_samples</name> <init>= <expr><call><name>soxr_delay</name><argument_list>(<argument><expr><operator>(</operator><name>soxr_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delayed_samples</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>delayed_samples_fixup</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>out_samples</name> <operator>+</operator> <name>delayed_samples</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">.5</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>Resampler</name></name> <specifier>const</specifier></type> <name>swri_soxr_resampler</name><init>=<expr><block>{
<expr><name>create</name></expr>, <expr><name>destroy</name></expr>, <expr><name>process</name></expr>, <expr><name>flush</name></expr>, <expr><name>NULL</name></expr> , <expr><name>get_delay</name></expr>,
<expr><name>invert_initial_buffer</name></expr>, <expr><name>get_out_samples</name></expr>
}</block></expr></init></decl>;</decl_stmt>

</unit>
