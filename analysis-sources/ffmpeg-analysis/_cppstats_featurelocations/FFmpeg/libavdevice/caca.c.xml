<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\caca.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;caca.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>CACAContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>window_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <name>window_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>caca_canvas_t</name> <modifier>*</modifier></type><name>canvas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caca_display_t</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>caca_dither_t</name> <modifier>*</modifier></type><name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>algorithm</name></decl>, <modifier>*</modifier><name>antialias</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charset</name></decl>, <modifier>*</modifier><name>color</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>list_dither</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_drivers</name></decl>;</decl_stmt>
}</block></struct></type> <name>CACAContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>caca_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACAContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>caca_free_display</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>caca_free_dither</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>caca_free_canvas</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_drivers</name><parameter_list>(<parameter><decl><type><name>CACAContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>drivers</name> <init>= <expr><call><name>caca_get_display_driver_list</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Available drivers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>drivers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name><name>drivers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>drivers</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_LIST_DITHER</name><parameter_list>(<parameter><type><name>thing</name></type></parameter>, <parameter><type><name>thing_str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void list_dither_##thing(CACAContext *c) { const char *const *thing = caca_get_dither_##thing ##_list(c-&gt;dither); int i; av_log(c-&gt;ctx, AV_LOG_INFO, "Available %s:\n", thing_str); for (i = 0; thing[i]; i += 2) av_log(c-&gt;ctx, AV_LOG_INFO, "%s: %s\n", thing[i], thing[i + 1]); }</cpp:value></cpp:define>










<expr_stmt><expr><call><name>DEFINE_LIST_DITHER</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="string">"colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_LIST_DITHER</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><literal type="string">"charsets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_LIST_DITHER</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><literal type="string">"algorithms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_LIST_DITHER</name><argument_list>(<argument><expr><name>antialias</name></expr></argument>, <argument><expr><literal type="string">"antialias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>caca_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACAContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>encctx</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>bpp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>list_drivers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_drivers</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr></argument>, <argument><expr><literal type="string">"colors"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_dither_color</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr></argument>, <argument><expr><literal type="string">"charsets"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_dither_charset</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr></argument>, <argument><expr><literal type="string">"algorithms"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_dither_algorithm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr></argument>, <argument><expr><literal type="string">"antialiases"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>list_dither_antialias</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid argument '%s', for 'list_dither' option\n"</literal>
<literal type="string">"Argument must be one of 'algorithms, 'antialiases', 'charsets', 'colors'\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>list_dither</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>encctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name>
<operator>||</operator> <name><name>encctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only supports one rawvideo stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported pixel format '%s', choose rgb24\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>encctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name> <operator>=</operator> <call><name>caca_create_canvas</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create canvas\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>encctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <call><name>caca_create_dither</name><argument_list>(<argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>encctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>encctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name>bpp</name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>encctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><literal type="number">0x0000ff</literal></expr></argument>, <argument><expr><literal type="number">0x00ff00</literal></expr></argument>, <argument><expr><literal type="number">0xff0000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create dither\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DITHER_OPT</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (caca_set_dither_##opt(c-&gt;dither, c-&gt;opt) &lt; 0) { ret = AVERROR(errno); av_log(s, AV_LOG_ERROR, "Failed to set value '%s' for option '%s'\n", c-&gt;opt, #opt); goto fail; } } while (0)</cpp:value></cpp:define>








<expr_stmt><expr><call><name>CHECK_DITHER_OPT</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DITHER_OPT</name><argument_list>(<argument><expr><name>antialias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DITHER_OPT</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DITHER_OPT</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>caca_create_display_with_driver</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>list_drivers</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>window_width</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>window_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <call><name>caca_get_canvas_width</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <call><name>caca_get_canvas_height</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>window_title</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>window_title</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>caca_set_display_title</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caca_set_display_time</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>caca_write_trailer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>caca_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CACAContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>caca_dither_bitmap</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>canvas</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>caca_refresh_display</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CACAContext,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"set window forced size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"window_title"</literal></expr>, <expr><literal type="string">"set window title"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"driver"</literal></expr>, <expr><literal type="string">"set display driver"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"algorithm"</literal></expr>, <expr><literal type="string">"set dithering algorithm"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"default"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"antialias"</literal></expr>, <expr><literal type="string">"set antialias method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>antialias</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"default"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"charset"</literal></expr>, <expr><literal type="string">"set charset used to render output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"default"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set color used to render output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"default"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list_drivers"</literal></expr>, <expr><literal type="string">"list available drivers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_drivers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list_dither"</literal></expr>, <expr><literal type="string">"list available dither options"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_dither</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"list_dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"algorithms"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"algorithms"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"list_dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"antialiases"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"antialiases"</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"list_dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"charsets"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"charsets"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"list_dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"colors"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"colors"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"list_dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>caca_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"caca outdev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_caca_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"caca"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"caca (color ASCII art) output device"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CACAContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>caca_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>caca_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>caca_write_trailer</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>caca_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
