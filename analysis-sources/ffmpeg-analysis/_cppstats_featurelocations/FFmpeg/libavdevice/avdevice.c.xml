<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\avdevice.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>av_device_ffversion</name><index>[]</index></name> <init>= <expr><literal type="string">"FFmpeg version "</literal> <name>FFMPEG_VERSION</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AVDeviceCapabilitiesQuery, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name></type> <name><name>av_device_capabilities</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"codec"</literal></expr>, <expr><literal type="string">"codec"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>}</block></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>A</name><operator>|</operator><name>V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_format"</literal></expr>, <expr><literal type="string">"sample format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>}</block></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"channels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channel_layout"</literal></expr>, <expr><literal type="string">"channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pixel_format"</literal></expr>, <expr><literal type="string">"pixel format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>}</block></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"window size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>,
<expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frame_size"</literal></expr>, <expr><literal type="string">"frame size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>,
<expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>V</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fps"</literal></expr>, <expr><literal type="string">"fps"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name><operator>|</operator><name>D</name><operator>|</operator><name>V</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>E</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>

<function><type><name>unsigned</name></type> <name>avdevice_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBAVDEVICE_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBAVDEVICE_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avdevice_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avdevice_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libavdevice license: "</cpp:value></cpp:define>
<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>device_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>,
<parameter><decl><type><name>AVClassCategory</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>AVClassCategory</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVClassCategory</name></type> <name>category</name> <init>= <expr><name>AV_CLASS_CATEGORY_NA</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>av_oformat_next</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVOutputFormat</name> <operator>*</operator><operator>)</operator><name>prev</name><operator>)</operator><operator>-&gt;</operator><name>priv_class</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prev</name> <operator>=</operator> <call><name>av_iformat_next</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVInputFormat</name> <operator>*</operator><operator>)</operator><name>prev</name><operator>)</operator><operator>-&gt;</operator><name>priv_class</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>category</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>category</name></name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>category</name> <operator>!=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>category</name> <operator>!=</operator> <name>c2</name></expr>)</condition>;</do>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>av_input_audio_device_next</name><parameter_list>(<parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>device_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></expr></argument>,
<argument><expr><name>AV_CLASS_CATEGORY_DEVICE_INPUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>av_input_video_device_next</name><parameter_list>(<parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>device_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr></argument>,
<argument><expr><name>AV_CLASS_CATEGORY_DEVICE_INPUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>av_output_audio_device_next</name><parameter_list>(<parameter><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>device_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></expr></argument>,
<argument><expr><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>av_output_video_device_next</name><parameter_list>(<parameter><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>device_next</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr></argument>,
<argument><expr><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_app_to_dev_control_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVAppToDevMessageType</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>control_message</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>control_message</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_dev_to_app_control_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVDevToAppMessageType</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>control_message_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>control_message_cb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_capabilities_create</name><parameter_list>(<parameter><decl><type><name>AVDeviceCapabilitiesQuery</name> <modifier>*</modifier><modifier>*</modifier></type><name>caps</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>s</name> <operator>&amp;&amp;</operator> <name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>create_device_capabilities</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>create_device_capabilities</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>caps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>caps</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>caps</name><operator>)</operator><operator>-&gt;</operator><name>device_context</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><name>device_options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>create_device_capabilities</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>caps</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>create_device_capabilities</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>caps</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>*</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avdevice_capabilities_free</name><parameter_list>(<parameter><decl><type><name>AVDeviceCapabilitiesQuery</name> <modifier>*</modifier><modifier>*</modifier></type><name>caps</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>caps</name> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>caps</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>free_device_capabilities</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>free_device_capabilities</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>free_device_capabilities</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>free_device_capabilities</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_list_devices</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>get_device_list</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>get_device_list</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>device_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>device_list</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceInfoList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>device_list</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>device_list</name><operator>)</operator><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>get_device_list</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>get_device_list</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avdevice_free_list_devices</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>list_devices_for_context</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avdevice_list_devices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_list_input_sources</name><parameter_list>(<parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>device_options</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_input_device_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>list_devices_for_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>device_options</name></expr></argument>, <argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avdevice_list_output_sinks</name><parameter_list>(<parameter><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>device_options</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avformat_alloc_output_context2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>list_devices_for_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>device_options</name></expr></argument>, <argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avdevice_free_list_devices</name><parameter_list>(<parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDeviceInfo</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>*</operator><name>device_list</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nb_devices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dev</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dev</name><operator>-&gt;</operator><name>device_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>devices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
