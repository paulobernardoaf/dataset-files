<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\opengl_enc_shaders.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVDEVICE_OPENGL_ENC_SHADERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVDEVICE_OPENGL_ENC_SHADERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_VERTEX_SHADER</name> <init>=
<expr><literal type="string">"uniform mat4 u_projectionMatrix;"</literal>
<literal type="string">"uniform mat4 u_modelViewMatrix;"</literal>

<literal type="string">"attribute vec4 a_position;"</literal>
<literal type="string">"attribute vec2 a_textureCoords;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"gl_Position = u_projectionMatrix * (a_position * u_modelViewMatrix);"</literal>
<literal type="string">"texture_coordinate = a_textureCoords;"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform mat4 u_colorMap;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"gl_FragColor = texture2D(u_texture0, texture_coordinate) * u_colorMap;"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform mat4 u_colorMap;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"gl_FragColor = vec4((texture2D(u_texture0, texture_coordinate) * u_colorMap).rgb, 1.0);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PLANAR</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform sampler2D u_texture1;"</literal>
<literal type="string">"uniform sampler2D u_texture2;"</literal>
<literal type="string">"uniform sampler2D u_texture3;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"gl_FragColor = vec4(texture2D(u_texture0, texture_coordinate).r,"</literal>
<literal type="string">"texture2D(u_texture1, texture_coordinate).r,"</literal>
<literal type="string">"texture2D(u_texture2, texture_coordinate).r,"</literal>
<literal type="string">"texture2D(u_texture3, texture_coordinate).r);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_RGB_PLANAR</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform sampler2D u_texture1;"</literal>
<literal type="string">"uniform sampler2D u_texture2;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"gl_FragColor = vec4(texture2D(u_texture0, texture_coordinate).r,"</literal>
<literal type="string">"texture2D(u_texture1, texture_coordinate).r,"</literal>
<literal type="string">"texture2D(u_texture2, texture_coordinate).r,"</literal>
<literal type="string">"1.0);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform sampler2D u_texture1;"</literal>
<literal type="string">"uniform sampler2D u_texture2;"</literal>
<literal type="string">"uniform float u_chroma_div_w;"</literal>
<literal type="string">"uniform float u_chroma_div_h;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"vec3 yuv;"</literal>

<literal type="string">"yuv.r = texture2D(u_texture0, texture_coordinate).r - 0.0625;"</literal>
<literal type="string">"yuv.g = texture2D(u_texture1, vec2(texture_coordinate.x / u_chroma_div_w, texture_coordinate.y / u_chroma_div_h)).r - 0.5;"</literal>
<literal type="string">"yuv.b = texture2D(u_texture2, vec2(texture_coordinate.x / u_chroma_div_w, texture_coordinate.y / u_chroma_div_h)).r - 0.5;"</literal>

<literal type="string">"gl_FragColor = clamp(vec4(mat3(1.1643, 1.16430, 1.1643,"</literal>
<literal type="string">"0.0, -0.39173, 2.0170,"</literal>
<literal type="string">"1.5958, -0.81290, 0.0) * yuv, 1.0), 0.0, 1.0);"</literal>

<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"uniform sampler2D u_texture1;"</literal>
<literal type="string">"uniform sampler2D u_texture2;"</literal>
<literal type="string">"uniform sampler2D u_texture3;"</literal>
<literal type="string">"uniform float u_chroma_div_w;"</literal>
<literal type="string">"uniform float u_chroma_div_h;"</literal>

<literal type="string">"varying vec2 texture_coordinate;"</literal>

<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"vec3 yuv;"</literal>

<literal type="string">"yuv.r = texture2D(u_texture0, texture_coordinate).r - 0.0625;"</literal>
<literal type="string">"yuv.g = texture2D(u_texture1, vec2(texture_coordinate.x / u_chroma_div_w, texture_coordinate.y / u_chroma_div_h)).r - 0.5;"</literal>
<literal type="string">"yuv.b = texture2D(u_texture2, vec2(texture_coordinate.x / u_chroma_div_w, texture_coordinate.y / u_chroma_div_h)).r - 0.5;"</literal>

<literal type="string">"gl_FragColor = clamp(vec4(mat3(1.1643, 1.16430, 1.1643,"</literal>
<literal type="string">"0.0, -0.39173, 2.0170,"</literal>
<literal type="string">"1.5958, -0.81290, 0.0) * yuv, texture2D(u_texture3, texture_coordinate).r), 0.0, 1.0);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>FF_OPENGL_FRAGMENT_SHADER_GRAY</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"precision mediump float;"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D u_texture0;"</literal>
<literal type="string">"varying vec2 texture_coordinate;"</literal>
<literal type="string">"void main()"</literal>
<literal type="string">"{"</literal>
<literal type="string">"float c = texture2D(u_texture0, texture_coordinate).r;"</literal>
<literal type="string">"gl_FragColor = vec4(c, c, c, 1.0);"</literal>
<literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
