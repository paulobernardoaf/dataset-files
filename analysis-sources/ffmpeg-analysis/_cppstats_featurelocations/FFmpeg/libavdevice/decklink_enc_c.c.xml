<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\decklink_enc_c.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink_common_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink_enc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct decklink_cctx, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"list_devices"</literal></expr>, <expr><literal type="string">"list available devices"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_devices</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list_formats"</literal></expr>, <expr><literal type="string">"list supported formats"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_formats</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"preroll"</literal></expr> , <expr><literal type="string">"video preroll in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>preroll</name></expr></argument> )</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.5</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"duplex_mode"</literal></expr> , <expr><literal type="string">"duplex mode"</literal></expr> , <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duplex_mode</name></expr></argument> )</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"duplex_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"unset"</literal></expr> , <expr><name>NULL</name></expr> , <expr><literal type="number">0</literal></expr> , <expr><name>AV_OPT_TYPE_CONST</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"duplex_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"half"</literal></expr> , <expr><name>NULL</name></expr> , <expr><literal type="number">0</literal></expr> , <expr><name>AV_OPT_TYPE_CONST</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"duplex_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"full"</literal></expr> , <expr><name>NULL</name></expr> , <expr><literal type="number">0</literal></expr> , <expr><name>AV_OPT_TYPE_CONST</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"duplex_mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"timing_offset"</literal></expr>, <expr><literal type="string">"genlock timing pixel offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>timing_offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT_MIN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"timing_offset"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"unset"</literal></expr> , <expr><name>NULL</name></expr> , <expr><literal type="number">0</literal></expr> , <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT_MIN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr>, <expr><literal type="string">"timing_offset"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>decklink_muxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Blackmagic DeckLink outdev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_decklink_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"decklink"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Blackmagic DeckLink output"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_WRAPPED_AVFRAME</name></expr>,
<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>get_device_list</name> <operator>=</operator> <name>ff_decklink_list_output_devices</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>decklink_muxer_class</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>decklink_cctx</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>ff_decklink_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>ff_decklink_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>ff_decklink_write_trailer</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
