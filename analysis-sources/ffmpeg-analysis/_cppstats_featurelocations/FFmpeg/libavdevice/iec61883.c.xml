<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\iec61883.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libraw1394/raw1394.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavc1394/avc1394.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavc1394/rom1394.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libiec61883/iec61883.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/mpegts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADS</name></cpp:macro> <cpp:value>HAVE_PTHREADS</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOTDCT_SPEC_ID</name></cpp:macro> <cpp:value>0x00005068</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61883_AUTO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61883_DV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEC61883_HDV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>DVPacket</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>DVPacket</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
}</block></struct></type> <name>DVPacket</name>;</typedef>

<struct>struct <name>iec61883_data</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>raw1394handle_t</name></type> <name>raw1394</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>iec61883_dv_fb_t</name></type> <name>iec61883_dv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>iec61883_mpeg2_t</name></type> <name>iec61883_mpeg2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>dv_demux</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>mpeg_demux</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>queue_first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>queue_last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device_guid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>packets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_packets</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>input_port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>output_port</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>thread_loop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>receiving</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>receive_error</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>raw1394_poll</name></decl>;</decl_stmt> 


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse_queue</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>receive_task_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_callback</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>complete</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><name>callback_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>packets</name></name> <operator>&gt;=</operator> <name><name>dv</name><operator>-&gt;</operator><name>max_packets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DV packet queue overrun, dropping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_last</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_last</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>packets</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>iec61883_receive_task</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><operator>(</operator>struct <name>iec61883_data</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<while>while <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>thread_loop</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>raw1394_poll</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Raw1394 poll error occurred.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>receive_error</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>dv</name><operator>-&gt;</operator><name>raw1394_poll</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>dv</name><operator>-&gt;</operator><name>raw1394_poll</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLPRI</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>receiving</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>raw1394_loop_iterate</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>receiving</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No more input data available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_parse_queue_dv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avpriv_dv_get_packet</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avpriv_dv_produce_packet</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>packets</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_packet_from_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_parse_queue_hdv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet</name> <operator>=</operator> <name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avpriv_mpegts_parse_packet</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>mpeg_demux</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>packets</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>raw1394_portinfo</name></name></type> <name><name>pinf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rom1394_directory</name></type> <name>rom_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_ports</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>guid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>input_port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>output_port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name> <operator>=</operator> <call><name>raw1394_new_handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open IEEE1394 interface.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nb_ports</name> <operator>=</operator> <call><name>raw1394_get_port_info</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name>pinf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of IEEE1394 ports.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>inport</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>!=</operator> <name><name>context</name><operator>-&gt;</operator><name>url</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Selecting IEEE1394 port: %d\n"</literal></expr></argument>, <argument><expr><name>inport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>inport</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_ports</name> <operator>=</operator> <name>inport</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid input \"%s\", you should specify "</literal>
<literal type="string">"\"auto\" for auto-detection, or the port number.\n"</literal></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>device_guid</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>device_guid</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNu64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Invalid dvguid parameter: %s\n"</literal></expr></argument>,
<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>device_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_ports</name> <operator>&amp;&amp;</operator> <name>port</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>raw1394_destroy_handle</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name> <operator>=</operator> <call><name>raw1394_new_handle_on_port</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed setting IEEE1394 port.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>raw1394_get_nodecount</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>guid</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>guid</name> <operator>==</operator> <call><name>rom1394_get_guid</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>rom1394_get_directory</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rom_dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>rom1394_get_node_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rom_dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ROM1394_NODE_TYPE_AVC</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>avc1394_check_subunit_type</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>AVC1394_SUBUNIT_TYPE_VCR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>rom_dir</name><operator>.</operator><name>unit_spec_id</name></name> <operator>==</operator> <name>MOTDCT_SPEC_ID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rom1394_free_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rom_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rom1394_free_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rom_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No AV/C devices found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>iec61883_cmp_normalize_output</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><literal type="number">0xffc0</literal> <operator>|</operator> <name><name>dv</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IEC61883_AUTO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>avc1394_transaction</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>node</name></name></expr></argument>,
<argument><expr><name>AVC1394_CTYPE_STATUS</name> <operator>|</operator>
<name>AVC1394_SUBUNIT_TYPE_TAPE_RECORDER</name> <operator>|</operator>
<name>AVC1394_SUBUNIT_ID_0</name> <operator>|</operator>
<name>AVC1394_VCR_COMMAND_OUTPUT_SIGNAL_MODE</name> <operator>|</operator>
<literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>AVC1394_GET_OPERAND0</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>response</name> <operator>==</operator> <literal type="number">0x10</literal> <operator>||</operator> <name>response</name> <operator>==</operator> <literal type="number">0x90</literal> <operator>||</operator> <name>response</name> <operator>==</operator> <literal type="number">0x1A</literal> <operator>||</operator> <name>response</name> <operator>==</operator> <literal type="number">0x9A</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>IEC61883_HDV</name></expr> </then><else>: <expr><name>IEC61883_DV</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>iec61883_cmp_connect</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>output_port</name></name></expr></argument>,
<argument><expr><call><name>raw1394_get_local_id</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>input_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dv</name><operator>-&gt;</operator><name>max_packets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>max_packets</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEGTS_DEMUXER</name> <operator>&amp;&amp;</operator> <name><name>dv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IEC61883_HDV</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>mpeg_demux</name></name> <operator>=</operator> <call><name>avpriv_mpegts_parse_open</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dv</name><operator>-&gt;</operator><name>mpeg_demux</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>parse_queue</name></name> <operator>=</operator> <name>iec61883_parse_queue_hdv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_mpeg2</name></name> <operator>=</operator> <call><name>iec61883_mpeg2_recv_init</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>iec61883_mpeg2_recv_t</name><operator>)</operator><name>iec61883_callback</name></expr></argument>,
<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>max_packets</name></name> <operator>*=</operator> <literal type="number">766</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>dv_demux</name></name> <operator>=</operator> <call><name>avpriv_dv_init_demux</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dv</name><operator>-&gt;</operator><name>dv_demux</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>parse_queue</name></name> <operator>=</operator> <name>iec61883_parse_queue_dv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_dv</name></name> <operator>=</operator> <call><name>iec61883_dv_fb_init</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name>iec61883_callback</name></expr></argument>, <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394_poll</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>raw1394_get_fd</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394_poll</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IEC61883_HDV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iec61883_mpeg2_recv_start</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_mpeg2</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>iec61883_dv_fb_start</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_dv</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>thread_loop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>receive_task_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>iec61883_receive_task</name></expr></argument>, <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>raw1394_destroy_handle</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name><name>dv</name><operator>-&gt;</operator><name>parse_queue</name></name><argument_list>(<argument><expr><name>dv</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dv</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name><name>dv</name><operator>-&gt;</operator><name>parse_queue</name></name><argument_list>(<argument><expr><name>dv</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iec61883_receive_task</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>receive_error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>dv</name><operator>-&gt;</operator><name>receive_error</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iec61883_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iec61883_data</name></name> <modifier>*</modifier></type><name>dv</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>thread_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>receive_task_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEGTS_DEMUXER</name> <operator>&amp;&amp;</operator> <name><name>dv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IEC61883_HDV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iec61883_mpeg2_recv_stop</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_mpeg2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iec61883_mpeg2_close</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_mpeg2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_mpegts_parse_close</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>mpeg_demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>iec61883_dv_fb_stop</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_dv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iec61883_dv_fb_close</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>iec61883_dv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dv</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DVPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dv</name><operator>-&gt;</operator><name>queue_first</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>iec61883_cmp_disconnect</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>output_port</name></name></expr></argument>,
<argument><expr><call><name>raw1394_get_local_id</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>input_port</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name><name>dv</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raw1394_destroy_handle</name><argument_list>(<argument><expr><name><name>dv</name><operator>-&gt;</operator><name>raw1394</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"dvtype"</literal></expr>, <expr><literal type="string">"override autodetection of DV/HDV"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>iec61883_data</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>IEC61883_AUTO</name></expr>}</block></expr>, <expr><name>IEC61883_AUTO</name></expr>, <expr><name>IEC61883_HDV</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"dvtype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"auto detect DV/HDV"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>IEC61883_AUTO</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"dvtype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dv"</literal></expr>, <expr><literal type="string">"force device being treated as DV device"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>IEC61883_DV</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"dvtype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hdv"</literal></expr> , <expr><literal type="string">"force device being treated as HDV device"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>IEC61883_HDV</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"dvtype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dvbuffer"</literal></expr>, <expr><literal type="string">"set queue buffer size (in packets)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>iec61883_data</name></expr></argument>, <argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dvguid"</literal></expr>, <expr><literal type="string">"select one of multiple DV devices by its GUID"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>iec61883_data</name></expr></argument>, <argument><expr><name>device_guid</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>iec61883_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"iec61883 indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_iec61883_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"iec61883"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libiec61883 (new DV1394) A/V input device"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>iec61883_data</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>iec61883_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>iec61883_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>iec61883_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>iec61883_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
