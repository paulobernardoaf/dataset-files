<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\openal-dec.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AL/al.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AL/alc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALCdevice</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALCenum</name></type> <name>sample_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ALCint</name></type> <name>sample_step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_devices</name></decl>;</decl_stmt>
}</block></struct></type> <name>al_data</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ALCenum</name></type> <name>al_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
}</block></struct></type> <name>al_format_info</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWEST_AL_FORMAT</name></cpp:macro> <cpp:value>FFMIN(FFMIN(AL_FORMAT_MONO8,AL_FORMAT_MONO16),FFMIN(AL_FORMAT_STEREO8,AL_FORMAT_STEREO16))</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <specifier>const</specifier> <specifier>inline</specifier> <name>al_format_info</name><modifier>*</modifier></type> <name>get_al_format_info</name><parameter_list>(<parameter><decl><type><name>ALCenum</name></type> <name>al_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>al_format_info</name></type> <name><name>info_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AL_FORMAT_MONO8</name><operator>-</operator><name>LOWEST_AL_FORMAT</name></expr>]</index> <operator>=</operator> <block>{<expr><name>AL_FORMAT_MONO8</name></expr>, <expr><name>AV_CODEC_ID_PCM_U8</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><index>[<expr><name>AL_FORMAT_MONO16</name><operator>-</operator><name>LOWEST_AL_FORMAT</name></expr>]</index> <operator>=</operator> <block>{<expr><name>AL_FORMAT_MONO16</name></expr>, <expr><call><name>AV_NE</name> <argument_list>(<argument><expr><name>AV_CODEC_ID_PCM_S16BE</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_PCM_S16LE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><index>[<expr><name>AL_FORMAT_STEREO8</name><operator>-</operator><name>LOWEST_AL_FORMAT</name></expr>]</index> <operator>=</operator> <block>{<expr><name>AL_FORMAT_STEREO8</name></expr>, <expr><name>AV_CODEC_ID_PCM_U8</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><index>[<expr><name>AL_FORMAT_STEREO16</name><operator>-</operator><name>LOWEST_AL_FORMAT</name></expr>]</index> <operator>=</operator> <block>{<expr><name>AL_FORMAT_STEREO16</name></expr>, <expr><call><name>AV_NE</name> <argument_list>(<argument><expr><name>AV_CODEC_ID_PCM_S16BE</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_PCM_S16LE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>info_table</name><index>[<expr><name>al_fmt</name><operator>-</operator><name>LOWEST_AL_FORMAT</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>al_get_error</name><parameter_list>(<parameter><decl><type><name>ALCdevice</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>error_msg_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ALCenum</name></type> <name>error</name> <init>= <expr><call><name>alcGetError</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error_msg_ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error_msg_ret</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name>alcGetString</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALC_NO_ERROR</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>ALC_INVALID_DEVICE</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>ALC_INVALID_CONTEXT</name></expr>:</case>
<case>case <expr><name>ALC_INVALID_ENUM</name></expr>:</case>
<case>case <expr><name>ALC_INVALID_VALUE</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>ALC_OUT_OF_MEMORY</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>print_al_capture_devices</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devices</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>devices</name> <operator>=</operator> <call><name>alcGetString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ALC_CAPTURE_DEVICE_SPECIFIER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"List of OpenAL capture devices on this system:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>devices</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>devices</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>al_data</name> <modifier>*</modifier></type><name>ad</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ALCenum</name></type> <name><name>sample_formats</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AL_FORMAT_MONO8</name></expr>, <expr><name>AL_FORMAT_STEREO8</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AL_FORMAT_MONO16</name></expr>, <expr><name>AL_FORMAT_STEREO16</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>list_devices</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_al_capture_devices</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name> <operator>=</operator> <name><name>sample_formats</name><index>[<expr><name><name>ad</name><operator>-&gt;</operator><name>sample_size</name></name><operator>/</operator><literal type="number">8</literal><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ad</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator>
<call><name>alcCaptureOpenDevice</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name></expr></argument>,
<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>=</operator> <call><name>al_get_error</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ad</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>get_al_format_info</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>get_al_format_info</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>codec_id</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_step</name></name> <operator>=</operator> <operator>(</operator><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><call><name>get_al_format_info</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>codec_id</name></expr></argument>)</argument_list></call> <operator>*</operator>
<call><name>get_al_format_info</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>sample_format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>channels</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alcCaptureStart</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>alcCaptureCloseDevice</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error_msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open device: %s\n"</literal></expr></argument>, <argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>al_data</name> <modifier>*</modifier></type><name>ad</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALCint</name></type> <name>nb_samples</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>alcGetIntegerv</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>ALC_CAPTURE_SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><name>ALCsizei</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ALCint</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>=</operator> <call><name>al_get_error</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>nb_samples</name><operator>*</operator><name><name>ad</name><operator>-&gt;</operator><name>sample_step</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>alcCaptureSamples</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>=</operator> <call><name>al_get_error</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_msg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error_msg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name>error_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>al_data</name> <modifier>*</modifier></type><name>ad</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>alcCaptureStop</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alcCaptureCloseDevice</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(al_data, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set number of channels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">44100</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">192000</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"sample_size"</literal></expr>, <expr><literal type="string">"set sample size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">16</literal></expr>}</block></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"list_devices"</literal></expr>, <expr><literal type="string">"list available devices"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_devices</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"list_devices"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"true"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"list_devices"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr>, <expr><literal type="string">"list_devices"</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"openal indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_openal_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"openal"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenAL audio capture device"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>al_data</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
