<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\opengl_enc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINDOWS_H</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENGL_GL3_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl3.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ES2_GL_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ES2/gl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GLXGETPROCADDRESS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/glx.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SDL.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opengl_enc_shaders.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_RED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_RED_COMPONENT</name></cpp:macro> <cpp:value>GL_RED</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_LUMINANCE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_RED_COMPONENT</name></cpp:macro> <cpp:value>GL_LUMINANCE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_RED_COMPONENT</name></cpp:macro> <cpp:value>0x1903;</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_UNSIGNED_BYTE_3_3_2</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_UNSIGNED_BYTE_2_3_3_REV</name></cpp:macro> <cpp:value>0x8362</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_UNSIGNED_SHORT_1_5_5_5_REV</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLACTIVETEXTUREPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGENBUFFERSPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLDELETEBUFFERSPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLBUFFERDATAPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLBINDBUFFERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETATTRIBLOCATIONPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLENABLEVERTEXATTRIBARRAYPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLVERTEXATTRIBPOINTERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETUNIFORMLOCATIONPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLUNIFORM1FPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLUNIFORM1IPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLUNIFORMMATRIX4FVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLCREATEPROGRAMPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLDELETEPROGRAMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLUSEPROGRAMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLLINKPROGRAMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETPROGRAMIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETPROGRAMINFOLOGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLATTACHSHADERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLCREATESHADERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLDELETESHADERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLCOMPILESHADERPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLSHADERSOURCEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETSHADERIVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>FF_PFNGLGETSHADERINFOLOGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>FFOpenGLFunctions</name> <block>{
<decl_stmt><decl><type><name>FF_PFNGLACTIVETEXTUREPROC</name></type> <name>glActiveTexture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGENBUFFERSPROC</name></type> <name>glGenBuffers</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLDELETEBUFFERSPROC</name></type> <name>glDeleteBuffers</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLBUFFERDATAPROC</name></type> <name>glBufferData</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLBINDBUFFERPROC</name></type> <name>glBindBuffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glGetAttribLocation</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glEnableVertexAttribArray</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glVertexAttribPointer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glGetUniformLocation</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLUNIFORM1FPROC</name></type> <name>glUniform1f</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLUNIFORM1IPROC</name></type> <name>glUniform1i</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glUniformMatrix4fv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLCREATEPROGRAMPROC</name></type> <name>glCreateProgram</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLDELETEPROGRAMPROC</name></type> <name>glDeleteProgram</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLUSEPROGRAMPROC</name></type> <name>glUseProgram</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLLINKPROGRAMPROC</name></type> <name>glLinkProgram</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETPROGRAMIVPROC</name></type> <name>glGetProgramiv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glGetProgramInfoLog</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLATTACHSHADERPROC</name></type> <name>glAttachShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLCREATESHADERPROC</name></type> <name>glCreateShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLDELETESHADERPROC</name></type> <name>glDeleteShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLCOMPILESHADERPROC</name></type> <name>glCompileShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLSHADERSOURCEPROC</name></type> <name>glShaderSource</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETSHADERIVPROC</name></type> <name>glGetShaderiv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FF_PFNGLGETSHADERINFOLOGPROC</name></type> <name>glGetShaderInfoLog</name></decl>;</decl_stmt> 
}</block></struct></type> <name>FFOpenGLFunctions</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENGL_ERROR_CHECK</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{GLenum err_code; if ((err_code = glGetError()) != GL_NO_ERROR) { av_log(ctx, AV_LOG_ERROR, "OpenGL error occurred in '%s', line %d: %d\n", __FUNCTION__, __LINE__, err_code); goto fail; } }</cpp:value></cpp:define>








<typedef>typedef <type><struct>struct <name>OpenGLVertexInfo</name>
<block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <name>y</name>, <name>z</name>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>s0</name></decl>, <name>t0</name>;</decl_stmt> 
}</block></struct></type> <name>OpenGLVertexInfo</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GLushort</name></type> <name><name>g_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>OpenGLContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<decl_stmt><decl><type><name>SDL_Window</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_GLContext</name></type> <name>glcontext</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>FFOpenGLFunctions</name></type> <name>glprocs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inited</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>background</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>no_window</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>window_title</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>GLint</name></type> <name>max_texture_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLint</name></type> <name>max_viewport_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLint</name></type> <name>max_viewport_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>non_pow_2_textures</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>unpack_subimage</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>GLuint</name></type> <name>program</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLuint</name></type> <name>vertex_shader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLuint</name></type> <name>fragment_shader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLuint</name></type> <name><name>texture_name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLuint</name></type> <name>index_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLuint</name></type> <name>vertex_buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OpenGLVertexInfo</name></type> <name><name>vertex</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLint</name></type> <name>projection_matrix_location</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLint</name></type> <name>model_view_matrix_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>color_map_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>chroma_div_w_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>chroma_div_h_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>texture_location</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>position_attrib</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLint</name></type> <name>texture_coords_attrib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>projection_matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>model_view_matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLfloat</name></type> <name><name>color_map</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLfloat</name></type> <name>chroma_div_w</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLfloat</name></type> <name>chroma_div_h</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>GLenum</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>picture_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>picture_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_height</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpenGLContext</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>OpenGLFormatDesc</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fixel_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>fragment_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>opengl_format_desc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUV_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_YUVA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_0BGR</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB565</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_6_5</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR565</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT_5_6_5</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB555</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>FF_GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR555</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>FF_GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB8</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>FF_GL_UNSIGNED_BYTE_3_3_2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR8</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>FF_GL_UNSIGNED_BYTE_2_3_3_REV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR48</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PACKET</name></expr>, <expr><name>GL_RGB</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGRA64</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PACKET</name></expr>, <expr><name>GL_RGBA</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GBRP16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGB_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GBRAP16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_RGBA_PLANAR</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_GRAY</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_BYTE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_GRAY16</name></expr>, <expr><operator>&amp;</operator><name>FF_OPENGL_FRAGMENT_SHADER_GRAY</name></expr>, <expr><name>FF_GL_RED_COMPONENT</name></expr>, <expr><name>GL_UNSIGNED_SHORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_prepare_vertex</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>opengl_draw</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>intput</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repaint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_pkt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_init_context</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>opengl_deinit_context</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUseProgram</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUseProgram</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteProgram</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteProgram</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteBuffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteBuffers</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_buffer</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_resize</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>inited</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to prepare window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_prepare_vertex</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opengl_draw</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_control_message</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_APP_TO_DEV_WINDOW_SIZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDeviceRect</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>opengl_resize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>message</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_WINDOW_REPAINT</name></expr>:</case>
<return>return <expr><call><name>opengl_resize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_sdl_process_events</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDeviceRect</name></type> <name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_PumpEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>SDL_PeepEvents</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SDL_GETEVENT</name></expr></argument>, <argument><expr><name>SDL_FIRSTEVENT</name></expr></argument>, <argument><expr><name>SDL_LASTEVENT</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_QUIT</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>SDL_KEYDOWN</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>sym</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDLK_ESCAPE</name></expr>:</case>
<case>case <expr><name>SDLK_q</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>SDL_WINDOWEVENT</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_WINDOWEVENT_RESIZED</name></expr>:</case>
<case>case <expr><name>SDL_WINDOWEVENT_SIZE_CHANGED</name></expr>:</case>
<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>opengl_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_APP_TO_DEV_WINDOW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceRect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>av_cold</name></type> <name>opengl_sdl_create_window</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDeviceRect</name></type> <name>message</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_Init</name><argument_list>(<argument><expr><name>SDL_INIT_VIDEO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize SDL: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>SDL_CreateWindow</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>,
<argument><expr><name>SDL_WINDOWPOS_UNDEFINED</name></expr></argument>,
<argument><expr><name>SDL_WINDOWPOS_UNDEFINED</name></expr></argument>,
<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>,
<argument><expr><name>SDL_WINDOW_RESIZABLE</name> <operator>|</operator> <name>SDL_WINDOW_OPENGL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create default window: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>glcontext</name></name> <operator>=</operator> <call><name>SDL_GL_CreateContext</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>glcontext</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create OpenGL context on default window: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_RED_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_GREEN_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_BLUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_ALPHA_SIZE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_SetAttribute</name><argument_list>(<argument><expr><name>SDL_GL_DOUBLEBUFFER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SDL driver: '%s'.\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetCurrentVideoDriver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_GL_GetDrawableSize</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>message</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>opengl_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_APP_TO_DEV_WINDOW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceRect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>av_cold</name></type> <name>opengl_sdl_load_procedures</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFOpenGLFunctions</name> <modifier>*</modifier></type><name>procs</name> <init>= <expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_OPENGL_FUN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>procs-&gt;name = (type)SDL_GL_GetProcAddress(#name); if (!procs-&gt;name) { av_log(opengl, AV_LOG_ERROR, "Cannot load OpenGL function: '%s'\n", #name); return AVERROR(ENOSYS); }</cpp:value></cpp:define>






<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glActiveTexture</argument>, <argument>FF_PFNGLACTIVETEXTUREPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGenBuffers</argument>, <argument>FF_PFNGLGENBUFFERSPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteBuffers</argument>, <argument>FF_PFNGLDELETEBUFFERSPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glBufferData</argument>, <argument>FF_PFNGLBUFFERDATAPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glBindBuffer</argument>, <argument>FF_PFNGLBINDBUFFERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetAttribLocation</argument>, <argument>FF_PFNGLGETATTRIBLOCATIONPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetUniformLocation</argument>, <argument>FF_PFNGLGETUNIFORMLOCATIONPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniform1f</argument>, <argument>FF_PFNGLUNIFORM1FPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniform1i</argument>, <argument>FF_PFNGLUNIFORM1IPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniformMatrix4fv</argument>, <argument>FF_PFNGLUNIFORMMATRIX4FVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCreateProgram</argument>, <argument>FF_PFNGLCREATEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteProgram</argument>, <argument>FF_PFNGLDELETEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUseProgram</argument>, <argument>FF_PFNGLUSEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glLinkProgram</argument>, <argument>FF_PFNGLLINKPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetProgramiv</argument>, <argument>FF_PFNGLGETPROGRAMIVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetProgramInfoLog</argument>, <argument>FF_PFNGLGETPROGRAMINFOLOGPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glAttachShader</argument>, <argument>FF_PFNGLATTACHSHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCreateShader</argument>, <argument>FF_PFNGLCREATESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteShader</argument>, <argument>FF_PFNGLDELETESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCompileShader</argument>, <argument>FF_PFNGLCOMPILESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glShaderSource</argument>, <argument>FF_PFNGLSHADERSOURCEPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetShaderiv</argument>, <argument>FF_PFNGLGETSHADERIVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetShaderInfoLog</argument>, <argument>FF_PFNGLGETSHADERINFOLOGPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glEnableVertexAttribArray</argument>, <argument>FF_PFNGLENABLEVERTEXATTRIBARRAYPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glVertexAttribPointer</argument>, <argument>FF_PFNGLVERTEXATTRIBPOINTERPROC</argument>)</argument_list></macro>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_OPENGL_FUN</name></cpp:undef>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name> <name>av_cold</name></type> <name>opengl_load_procedures</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFOpenGLFunctions</name> <modifier>*</modifier></type><name>procs</name> <init>= <expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opengl_sdl_load_procedures</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glActiveTexture</name></name> <operator>=</operator> <name>glActiveTexture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGenBuffers</name></name> <operator>=</operator> <name>glGenBuffers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glDeleteBuffers</name></name> <operator>=</operator> <name>glDeleteBuffers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glBufferData</name></name> <operator>=</operator> <name>glBufferData</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glBindBuffer</name></name> <operator>=</operator> <name>glBindBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetAttribLocation</name></name> <operator>=</operator> <name>glGetAttribLocation</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetUniformLocation</name></name> <operator>=</operator> <name>glGetUniformLocation</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glUniform1f</name></name> <operator>=</operator> <name>glUniform1f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glUniform1i</name></name> <operator>=</operator> <name>glUniform1i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glUniformMatrix4fv</name></name> <operator>=</operator> <name>glUniformMatrix4fv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glCreateProgram</name></name> <operator>=</operator> <name>glCreateProgram</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glDeleteProgram</name></name> <operator>=</operator> <name>glDeleteProgram</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glUseProgram</name></name> <operator>=</operator> <name>glUseProgram</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glLinkProgram</name></name> <operator>=</operator> <name>glLinkProgram</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetProgramiv</name></name> <operator>=</operator> <name>glGetProgramiv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetProgramInfoLog</name></name> <operator>=</operator> <name>glGetProgramInfoLog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glAttachShader</name></name> <operator>=</operator> <name>glAttachShader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glCreateShader</name></name> <operator>=</operator> <name>glCreateShader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glDeleteShader</name></name> <operator>=</operator> <name>glDeleteShader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glCompileShader</name></name> <operator>=</operator> <name>glCompileShader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glShaderSource</name></name> <operator>=</operator> <name>glShaderSource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetShaderiv</name></name> <operator>=</operator> <name>glGetShaderiv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glGetShaderInfoLog</name></name> <operator>=</operator> <name>glGetShaderInfoLog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glEnableVertexAttribArray</name></name> <operator>=</operator> <name>glEnableVertexAttribArray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procs</name><operator>-&gt;</operator><name>glVertexAttribPointer</name></name> <operator>=</operator> <operator>(</operator><name>FF_PFNGLVERTEXATTRIBPOINTERPROC</name><operator>)</operator> <name>glVertexAttribPointer</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name> <name>av_cold</name></type> <name>opengl_load_procedures</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFOpenGLFunctions</name> <modifier>*</modifier></type><name>procs</name> <init>= <expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GLXGETPROCADDRESS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SelectedGetProcAddress</name></cpp:macro> <cpp:value>glXGetProcAddress</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_WGLGETPROCADDRESS</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SelectedGetProcAddress</name></cpp:macro> <cpp:value>wglGetProcAddress</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_OPENGL_FUN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>procs-&gt;name = (type)SelectedGetProcAddress(#name); if (!procs-&gt;name) { av_log(opengl, AV_LOG_ERROR, "Cannot load OpenGL function: '%s'\n", #name); return AVERROR(ENOSYS); }</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opengl_sdl_load_procedures</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glActiveTexture</argument>, <argument>FF_PFNGLACTIVETEXTUREPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGenBuffers</argument>, <argument>FF_PFNGLGENBUFFERSPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteBuffers</argument>, <argument>FF_PFNGLDELETEBUFFERSPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glBufferData</argument>, <argument>FF_PFNGLBUFFERDATAPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glBindBuffer</argument>, <argument>FF_PFNGLBINDBUFFERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetAttribLocation</argument>, <argument>FF_PFNGLGETATTRIBLOCATIONPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetUniformLocation</argument>, <argument>FF_PFNGLGETUNIFORMLOCATIONPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniform1f</argument>, <argument>FF_PFNGLUNIFORM1FPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniform1i</argument>, <argument>FF_PFNGLUNIFORM1IPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUniformMatrix4fv</argument>, <argument>FF_PFNGLUNIFORMMATRIX4FVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCreateProgram</argument>, <argument>FF_PFNGLCREATEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteProgram</argument>, <argument>FF_PFNGLDELETEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glUseProgram</argument>, <argument>FF_PFNGLUSEPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glLinkProgram</argument>, <argument>FF_PFNGLLINKPROGRAMPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetProgramiv</argument>, <argument>FF_PFNGLGETPROGRAMIVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetProgramInfoLog</argument>, <argument>FF_PFNGLGETPROGRAMINFOLOGPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glAttachShader</argument>, <argument>FF_PFNGLATTACHSHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCreateShader</argument>, <argument>FF_PFNGLCREATESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glDeleteShader</argument>, <argument>FF_PFNGLDELETESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glCompileShader</argument>, <argument>FF_PFNGLCOMPILESHADERPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glShaderSource</argument>, <argument>FF_PFNGLSHADERSOURCEPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetShaderiv</argument>, <argument>FF_PFNGLGETSHADERIVPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glGetShaderInfoLog</argument>, <argument>FF_PFNGLGETSHADERINFOLOGPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glEnableVertexAttribArray</argument>, <argument>FF_PFNGLENABLEVERTEXATTRIBARRAYPROC</argument>)</argument_list></macro>
<macro><name>LOAD_OPENGL_FUN</name><argument_list>(<argument>glVertexAttribPointer</argument>, <argument>FF_PFNGLVERTEXATTRIBPOINTERPROC</argument>)</argument_list></macro>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SelectedGetProcAddress</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_OPENGL_FUN</name></cpp:undef>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opengl_make_identity</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opengl_make_ortho</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>right</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>nearZ</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>farZ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ral</name> <init>= <expr><name>right</name> <operator>+</operator> <name>left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rsl</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tab</name> <init>= <expr><name>top</name> <operator>+</operator> <name>bottom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tsb</name> <init>= <expr><name>top</name> <operator>-</operator> <name>bottom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fan</name> <init>= <expr><name>farZ</name> <operator>+</operator> <name>nearZ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fsn</name> <init>= <expr><name>farZ</name> <operator>-</operator> <name>nearZ</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>rsl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>tsb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2.0f</literal> <operator>/</operator> <name>fsn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>ral</name> <operator>/</operator> <name>rsl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>tab</name> <operator>/</operator> <name>tsb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>fan</name> <operator>/</operator> <name>fsn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_read_limits</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
}</block> <decl><name><name>required_extensions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"GL_ARB_multitexture"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GL_ARB_vertex_buffer_object"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"GL_ARB_vertex_shader"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GL_ARB_fragment_shader"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GL_ARB_shader_objects"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name> <operator>||</operator> <operator>!</operator><name>extensions</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No OpenGL context initialized for the current thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"OpenGL version: %s\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extension</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&lt;</operator> <name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>major</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>major</name> <operator>==</operator> <name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>major</name> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&lt;</operator> <name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minor</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Required extension %s is not supported.\n"</literal></expr></argument>,
<argument><expr><name><name>required_extensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Supported extensions are: %s\n"</literal></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_MAX_TEXTURE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_MAX_VIEWPORT_DIMS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>non_pow_2_textures</name></name> <operator>=</operator> <name>major</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><literal type="string">"GL_ARB_texture_non_power_of_two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>unpack_subimage</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><literal type="string">"GL_EXT_unpack_subimage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>unpack_subimage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Non Power of 2 textures support: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opengl</name><operator>-&gt;</operator><name>non_pow_2_textures</name></name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unpack Subimage extension support: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opengl</name><operator>-&gt;</operator><name>unpack_subimage</name></name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Max texture size: %dx%d\n"</literal></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Max viewport size: %dx%d\n"</literal></expr></argument>,
<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>opengl_get_fragment_shader_code</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>opengl_format_desc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl_format_desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fixel_format</name> <operator>==</operator> <name>format</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name><name>opengl_format_desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fragment_shader</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_type_size</name><parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GL_UNSIGNED_SHORT</name></expr>:</case>
<case>case <expr><name>FF_GL_UNSIGNED_SHORT_1_5_5_5_REV</name></expr>:</case>
<case>case <expr><name>GL_UNSIGNED_SHORT_5_6_5</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>GL_UNSIGNED_BYTE</name></expr>:</case>
<case>case <expr><name>FF_GL_UNSIGNED_BYTE_3_3_2</name></expr>:</case>
<case>case <expr><name>FF_GL_UNSIGNED_BYTE_2_3_3_REV</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>opengl_get_texture_params</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>opengl_format_desc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl_format_desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fixel_format</name> <operator>==</operator> <name><name>opengl</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>opengl_format_desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>opengl_format_desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opengl_compute_display_area</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>, <decl><type ref="prev"/><name>dar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>sar</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr> </then><else>: <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>dar</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>sar</argument>, <argument>(AVRational){ par-&gt;width</argument>, <argument>par-&gt;height }</argument>)</argument_list></macro></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational){ opengl-&gt;window_width</argument>, <argument>opengl-&gt;window_height }</argument>)</argument_list></macro> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_width</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_height</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_width</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_height</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_width</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>picture_height</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>opengl_get_texture_size</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_height</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>non_pow_2_textures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_width</name> <operator>=</operator> <name>in_width</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_height</name> <operator>=</operator> <name>in_height</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>in_width</name></expr></argument>, <argument><expr><name>in_height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>power_of_2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>power_of_2</name> <operator>&lt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>power_of_2</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>out_height</name> <operator>=</operator> <name>power_of_2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_width</name> <operator>=</operator> <name>power_of_2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Texture size calculated from %dx%d into %dx%d\n"</literal></expr></argument>,
<argument><expr><name>in_width</name></expr></argument>, <argument><expr><name>in_height</name></expr></argument>, <argument><expr><operator>*</operator><name>out_width</name></expr></argument>, <argument><expr><operator>*</operator><name>out_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>opengl_fill_color_map</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><name><name>opengl</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555</name> <operator>||</operator>
<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB24</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_COMPONENT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ shift = (desc-&gt;comp[i].depth - 1) &gt;&gt; 3; opengl-&gt;color_map[(i &lt;&lt; 2) + (desc-&gt;comp[i].offset &gt;&gt; shift)] = 1.0; }</cpp:value></cpp:define>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILL_COMPONENT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILL_COMPONENT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILL_COMPONENT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FILL_COMPONENT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILL_COMPONENT</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>GLuint</name></type> <name>opengl_load_shader</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLuint</name></type> <name>shader</name> <init>= <expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glCreateShader</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GLint</name></type> <name>result</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shader</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"glCreateShader() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glShaderSource</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glCompileShader</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetShaderiv</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>FF_GL_COMPILE_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetShaderiv</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>FF_GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>log</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetShaderInfoLog</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Compile error: %s\n"</literal></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>shader</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_compile_shaders</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fragment_shader_code</name> <init>= <expr><call><name>opengl_get_fragment_shader_code</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_shader_code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Provided pixel format '%s' is not supported\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>=</operator> <call><name>opengl_load_shader</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>FF_GL_VERTEX_SHADER</name></expr></argument>,
<argument><expr><name>FF_OPENGL_VERTEX_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vertex shader loading failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name> <operator>=</operator> <call><name>opengl_load_shader</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>FF_GL_FRAGMENT_SHADER</name></expr></argument>,
<argument><expr><name>fragment_shader_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Fragment shader loading failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glCreateProgram</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glAttachShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glAttachShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glLinkProgram</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetProgramiv</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name>FF_GL_LINK_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetProgramiv</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name>FF_GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetProgramInfoLog</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Link error: %s\n"</literal></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>position_attrib</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetAttribLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"a_position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_coords_attrib</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetAttribLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"a_textureCoords"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>projection_matrix_location</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_projectionMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>model_view_matrix_location</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_modelViewMatrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map_location</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_colorMap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_texture0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_texture1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_texture2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_texture3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w_location</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_chroma_div_w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h_location</name></name> <operator>=</operator> <call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGetUniformLocation</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"u_chroma_div_h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteShader</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glDeleteProgram</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>fragment_shader</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex_shader</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_configure_texture</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>,
<parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>texture</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_width</name></decl>, <decl><type ref="prev"/><name>new_height</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>opengl_get_texture_size</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>new_width</name></expr></argument>, <argument><expr><name>new_height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_prepare_vertex</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tex_w</name></decl>, <decl><type ref="prev"/><name>tex_h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>&gt;</operator> <name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_width</name></name> <operator>||</operator> <name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>&gt;</operator> <name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_viewport_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too big viewport requested, limited to %dx%d"</literal></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opengl_make_ortho</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument>,
<argument><expr><operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>,
<argument><expr><operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>,
<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opengl_make_identity</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>model_view_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opengl_compute_display_area</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>z</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>picture_width</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>picture_width</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>picture_height</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>picture_height</name></name> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opengl_get_texture_size</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>s0</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>t0</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>s0</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>t0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tex_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>s0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tex_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>t0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tex_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>s0</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>tex_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>t0</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBufferData</name></name><argument_list>(<argument><expr><name>FF_GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex</name></name></expr></argument>, <argument><expr><name>FF_GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_prepare</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUseProgram</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>projection_matrix_location</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>model_view_matrix_location</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>model_view_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glActiveTexture</name></name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniform1i</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_location</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map_location</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniformMatrix4fv</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map_location</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>color_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h_location</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniform1f</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h_location</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w_location</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glUniform1f</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w_location</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_create_window</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_sdl_create_window</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot create default SDL window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"FFmpeg is compiled without SDL. Cannot create default window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVDeviceRect</name></type> <name>message</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>message</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>message</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_CREATE_WINDOW_BUFFER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>message</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to create window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to prepare window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_release_window</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<expr_stmt><expr><call><name>SDL_GL_DeleteContext</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>glcontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyWindow</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_Quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to release window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator>
<call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to prepare window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>opengl_deinit_context</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opengl_release_window</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_init_context</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_compile_shaders</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glGenBuffers</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name> <operator>||</operator> <operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer generation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opengl_configure_texture</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_planes</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>has_alpha</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>non_pow_2_textures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_w</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>chroma_div_h</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>non_pow_2_textures</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opengl_configure_texture</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opengl_configure_texture</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>has_alpha</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opengl_configure_texture</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBufferData</name></name><argument_list>(<argument><expr><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g_index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>g_index</name></expr></argument>, <argument><expr><name>FF_GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glClearColor</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>background</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>background</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>opengl</name><operator>-&gt;</operator><name>background</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>opengl_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>
<name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only a single video stream is supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>window_title</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>window_title</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_create_window</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_read_limits</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name> <operator>||</operator> <name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too big picture %dx%d, max supported size is %dx%d\n"</literal></expr></argument>,
<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>max_texture_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_load_procedures</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>opengl_fill_color_map</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opengl_get_texture_params</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_init_context</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_prepare_vertex</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_GL_SwapWindow</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to display window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opengl</name><operator>-&gt;</operator><name>inited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>opengl_write_trailer</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>opengl_get_plane_pointer</name><parameter_list>(<parameter><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wordsize</name> <init>= <expr><call><name>opengl_type_size</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width_chroma</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height_chroma</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>comp_index</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>wordsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>wordsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>width_chroma</name> <operator>*</operator> <name>height_chroma</name> <operator>*</operator> <name>wordsize</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>opengl</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>opengl</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>wordsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>width_chroma</name> <operator>*</operator> <name>height_chroma</name> <operator>*</operator> <name>wordsize</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_TEXTURE_DATA</name><parameter_list>(<parameter><type><name>comp_index</name></type></parameter>, <parameter><type><name>sub</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int width = sub ? AV_CEIL_RSHIFT(opengl-&gt;width, desc-&gt;log2_chroma_w) : opengl-&gt;width; int height = sub ? AV_CEIL_RSHIFT(opengl-&gt;height, desc-&gt;log2_chroma_h): opengl-&gt;height; uint8_t *data; int plane = desc-&gt;comp[comp_index].plane; glBindTexture(GL_TEXTURE_2D, opengl-&gt;texture_name[comp_index]); if (!is_pkt) { GLint length = ((AVFrame *)input)-&gt;linesize[plane]; int bytes_per_pixel = opengl_type_size(opengl-&gt;type); if (!(desc-&gt;flags &amp; AV_PIX_FMT_FLAG_PLANAR)) bytes_per_pixel *= desc-&gt;nb_components; data = ((AVFrame *)input)-&gt;data[plane]; if (!(length % bytes_per_pixel) &amp;&amp; (opengl-&gt;unpack_subimage || ((length / bytes_per_pixel) == width))) { length /= bytes_per_pixel; if (length != width) glPixelStorei(FF_GL_UNPACK_ROW_LENGTH, length); glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, width, height, opengl-&gt;format, opengl-&gt;type, data); if (length != width) glPixelStorei(FF_GL_UNPACK_ROW_LENGTH, 0); } else { int h; for (h = 0; h &lt; height; h++) { glTexSubImage2D(GL_TEXTURE_2D, 0, 0, h, width, 1, opengl-&gt;format, opengl-&gt;type, data); data += length; } } } else { data = opengl_get_plane_pointer(opengl, input, comp_index, desc); glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, width, height, opengl-&gt;format, opengl-&gt;type, data); } }</cpp:value></cpp:define>





































<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_draw</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repaint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenGLContext</name> <modifier>*</modifier></type><name>opengl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_sdl_process_events</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to prepare window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repaint</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_pkt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>LOAD_TEXTURE_DATA</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr>)</condition> <block>{<block_content>
<macro><name>LOAD_TEXTURE_DATA</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>LOAD_TEXTURE_DATA</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>
<macro><name>LOAD_TEXTURE_DATA</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>opengl_prepare</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>vertex_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glBindBuffer</name></name><argument_list>(<argument><expr><name>FF_GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>index_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glVertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>position_attrib</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpenGLVertexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glEnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>position_attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glVertexAttribPointer</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_coords_attrib</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpenGLVertexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>opengl</name><operator>-&gt;</operator><name>glprocs</name><operator>.</operator><name>glEnableVertexAttribArray</name></name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>texture_coords_attrib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>g_index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENGL_ERROR_CHECK</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDL2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_GL_SwapWindow</name><argument_list>(<argument><expr><name><name>opengl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>opengl</name><operator>-&gt;</operator><name>no_window</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>opengl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application failed to display window buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>opengl_draw</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opengl_write_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_WRITE_UNCODED_FRAME_QUERY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>opengl_draw</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OpenGLContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"background"</literal></expr>, <expr><literal type="string">"set background color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no_window"</literal></expr>, <expr><literal type="string">"disable default window"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>no_window</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"window_title"</literal></expr>, <expr><literal type="string">"set window title"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"set window size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>opengl_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"opengl outdev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_opengl_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"opengl"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"OpenGL output"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OpenGLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>opengl_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>opengl_write_packet</name></expr>,
<expr><operator>.</operator><name>write_uncoded_frame</name> <operator>=</operator> <name>opengl_write_frame</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>opengl_write_trailer</name></expr>,
<expr><operator>.</operator><name>control_message</name> <operator>=</operator> <name>opengl_control_message</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>opengl_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
