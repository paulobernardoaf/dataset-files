<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\fbdev_dec.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fbdev_common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FBDevContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate_q</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>time_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_linesize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fb_var_screeninfo</name></name></type> <name>varinfo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>fb_fix_screeninfo</name></name></type> <name>fixinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>FBDevContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fbdev_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <call><name>ff_fbdev_default_device</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>avpriv_open</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not open framebuffer device '%s': %s\n"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_VSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"FBIOGET_VSCREENINFO: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_FSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"FBIOGET_FSCREENINFO: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>ff_get_pixfmt_from_fb_varinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Framebuffer pixel format not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>xres</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>yres</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name> <operator>=</operator> <operator>(</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>bits_per_pixel</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>frame_linesize</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>frame_linesize</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>smem_len</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error in mmap(): %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>framerate_q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator>
<name><name>fbdev</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>framerate_q</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"w:%d h:%d bpp:%d pixfmt:%s fps:%d/%d bit_rate:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>bits_per_pixel</name></name></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>framerate_q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>framerate_q</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fbdev_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>curtime</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curtime</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>-</operator> <name>curtime</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>,
<argument><expr><literal type="string">"time_frame:%"</literal><name>PRId64</name><literal type="string">" curtime:%"</literal><name>PRId64</name><literal type="string">" delay:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name></expr></argument>, <argument><expr><name>curtime</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>+=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>framerate_q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>delay</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>delay</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_VSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Error refreshing variable info: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>curtime</name></expr>;</expr_stmt>


<expr_stmt><expr><name>pin</name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>bytes_per_pixel</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>xoffset</name></name> <operator>+</operator>
<name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>yoffset</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>line_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pout</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>frame_linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pin</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>line_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pout</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>frame_linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>fbdev</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fbdev_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>smem_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fbdev_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_fbdev_get_device_list</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FBDevContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>,<expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate_q</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>fbdev_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"fbdev indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_fbdev_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fbdev"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Linux framebuffer"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FBDevContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>fbdev_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>fbdev_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>fbdev_read_close</name></expr>,
<expr><operator>.</operator><name>get_device_list</name> <operator>=</operator> <name>fbdev_get_device_list</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fbdev_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
