<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\vfwcap.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vfw.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HWND_MESSAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWND_MESSAGE</name></cpp:macro> <cpp:value>((HWND) -3)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>vfw_ctx</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>curbufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>video_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>framerate</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>vfw_pixfmt</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>biCompression</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>biBitCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>biCompression</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_UYVY422</name></expr>;</return>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_YUYV422</name></expr>;</return>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_YUV420P</name></expr>;</return>
<case>case <expr><name>BI_RGB</name></expr>:</case>
<switch>switch<condition>(<expr><name>biBitCount</name></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB4</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB8</name></expr>;</return>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB555</name></expr>;</return>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_BGR24</name></expr>;</return>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB32</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>
<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name>vfw_codecid</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>biCompression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>biCompression</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>AV_CODEC_ID_DVVIDEO</name></expr>;</return>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'J'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>
<return>return <expr><name>AV_CODEC_ID_MJPEG</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dstruct</name><parameter_list>(<parameter><type><name>pctx</name></type></parameter>, <parameter><type><name>sname</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_log(pctx, AV_LOG_DEBUG, #var":\t%"type"\n", sname-&gt;var)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_captureparms</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CAPTUREPARMS</name> <modifier>*</modifier></type><name>cparms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"CAPTUREPARMS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>dwRequestMicroSecPerFrame</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fMakeUserHitOKToCapture</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wPercentDropForError</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fYield</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>dwIndexSize</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wChunkGranularity</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fUsingDOSMemory</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wNumVideoRequested</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fCaptureAudio</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wNumAudioRequested</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>vKeyAbort</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fAbortLeftMouse</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fAbortRightMouse</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fLimitEnabled</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wTimeLimit</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fMCIControl</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fStepMCIDevice</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>dwMCIStartTime</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>dwMCIStopTime</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fStepCaptureAt2x</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>wStepCaptureAverageFrames</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>dwAudioBufferSize</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>fDisableWriteCache</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cparms</name></expr></argument>, <argument><expr><name>AVStreamMaster</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_videohdr</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VIDEOHDR</name> <modifier>*</modifier></type><name>vhdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VIDEOHDR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>lpData</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>dwBufferLength</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>dwBytesUsed</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>dwTimeCaptured</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>dwUser</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name>dwFlags</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name><name>dwReserved</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name><name>dwReserved</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name><name>dwReserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vhdr</name></expr></argument>, <argument><expr><name><name>dwReserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_bih</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>bih</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"BITMAPINFOHEADER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biSize</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biWidth</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biHeight</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biPlanes</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biBitCount</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biCompression</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" biCompression:\t\"%.4s\"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biSizeImage</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biXPelsPerMeter</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biYPelsPerMeter</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biClrUsed</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biClrImportant</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shall_we_drop</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vfw_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dropscore</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ndropscores</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dropscore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_fullness</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name></name><operator>*</operator><literal type="number">100</literal><operator>)</operator><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>max_picture_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dropscore</name><index>[<expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_num</name></name><operator>%</operator><name>ndropscores</name></expr>]</index></name> <operator>&lt;=</operator> <name>buffer_fullness</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"real-time buffer %d%% full! frame dropped!\n"</literal></expr></argument>, <argument><expr><name>buffer_fullness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type> <name>videostream_cb</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>LPVIDEOHDR</name></type> <name>vdhdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vfw_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppktl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pktl_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>AVFormatContext</name> <operator>*</operator><operator>)</operator> <call><name>GetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_videohdr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vdhdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>shall_we_drop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pktl_next</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacketList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pktl_next</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name><name>vdhdr</name><operator>-&gt;</operator><name>dwBytesUsed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>vdhdr</name><operator>-&gt;</operator><name>dwTimeCaptured</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>vdhdr</name><operator>-&gt;</operator><name>lpData</name></name></expr></argument>, <argument><expr><name><name>vdhdr</name><operator>-&gt;</operator><name>dwBytesUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ppktl</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr> ;</init> <condition><expr><operator>*</operator><name>ppktl</name></expr> ;</condition> <incr><expr><name>ppktl</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppktl</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>ppktl</name> <operator>=</operator> <name>pktl_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name></name> <operator>+=</operator> <name><name>vdhdr</name><operator>-&gt;</operator><name>dwBytesUsed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vfw_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vfw_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_CALLBACK_VIDEOSTREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_DRIVER_DISCONNECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pktl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vfw_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vfw_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>devnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bisize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFO</name> <modifier>*</modifier></type><name>bi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CAPTUREPARMS</name></type> <name>cparms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>biCompression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>biBitCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate_q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>devnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>devnum</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>devnum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>driver_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>driver_ver</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>capGetDriverDescription</name><argument_list>(<argument><expr><name>devnum</name></expr></argument>,
<argument><expr><name>driver_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>driver_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>driver_ver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>driver_ver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Driver %d\n"</literal></expr></argument>, <argument><expr><name>devnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>driver_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>driver_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <call><name>capCreateCaptureWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HWND_MESSAGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create capture window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>devnum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_DRIVER_CONNECT</name></expr></argument>, <argument><expr><name>devnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not connect to device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_OVERLAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_PREVIEW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_CALLBACK_VIDEOSTREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>videostream_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set video stream callback.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>GWLP_USERDATA</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vfw_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>bisize</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_GET_VIDEOFORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bisize</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bi</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>bisize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vfw_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_GET_VIDEOFORMAT</name></expr></argument>, <argument><expr><name>bisize</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_bih</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>framerate_q</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not parse framerate '%s'.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't parse video size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biSizeImage</name></name> <operator>=</operator> <literal type="number">115200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_bih</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_VIDEOFORMAT</name></expr></argument>, <argument><expr><name>bisize</name></expr></argument>, <argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set Video Format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>biCompression</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>biBitCount</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_GET_SEQUENCE_SETUP</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cparms</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <operator>&amp;</operator><name>cparms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_captureparms</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cparms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>fYield</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>dwRequestMicroSecPerFrame</name></name> <operator>=</operator>
<operator>(</operator><name><name>framerate_q</name><operator>.</operator><name>den</name></name><operator>*</operator><literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <name><name>framerate_q</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>fAbortLeftMouse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>fAbortRightMouse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>fCaptureAudio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cparms</name><operator>.</operator><name>vKeyAbort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SET_SEQUENCE_SETUP</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cparms</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>LPARAM</name><operator>)</operator> <operator>&amp;</operator><name>cparms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <name>framerate_q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>vfw_pixfmt</name><argument_list>(<argument><expr><name>biCompression</name></expr></argument>, <argument><expr><name>biBitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>vfw_codecid</name><argument_list>(<argument><expr><name>biCompression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"This compression type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfw_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name>biBitCount</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>biCompression</name> <operator>==</operator> <name>BI_RGB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name>biBitCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"BottomUp"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create Mutex.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create Event.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SendMessage</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name>WM_CAP_SEQUENCE_NOFILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not start capture sequence.\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfw_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vfw_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vfw_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><name>pktl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pktl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name></name> <operator>-=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct vfw_ctx, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"video_size"</literal></expr>, <expr><literal type="string">"A string describing frame size, such as 640x480 or hd720."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ntsc"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vfw_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"VFW indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_vfwcap_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vfwcap"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VfW video capture"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vfw_ctx</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>vfw_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>vfw_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>vfw_read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vfw_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
