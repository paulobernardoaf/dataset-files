<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\dshow.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/riff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/raw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"objidl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shlwapi.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dshow_pixfmt</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>biCompression</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>biBitCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>biCompression</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BI_BITFIELDS</name></expr>:</case>
<case>case <expr><name>BI_RGB</name></expr>:</case>
<switch>switch<condition>(<expr><name>biBitCount</name></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB4</name></expr>;</return>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB8</name></expr>;</return>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_RGB555</name></expr>;</return>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_BGR24</name></expr>;</return>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<return>return <expr><name>AV_PIX_FMT_0RGB32</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></switch>
<return>return <expr><call><name>avpriv_find_pix_fmt</name><argument_list>(<argument><expr><call><name>avpriv_get_raw_pix_fmt_tags</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>biCompression</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>control</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IMediaControl_Stop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IMediaControl_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>media_event</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMediaEvent_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>media_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IEnumFilters</name> <modifier>*</modifier></type><name>fenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IGraphBuilder_EnumFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IEnumFilters_Reset</name><argument_list>(<argument><expr><name>fenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>IEnumFilters_Next</name><argument_list>(<argument><expr><name>fenum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IGraphBuilder_RemoveFilter</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IEnumFilters_Reset</name><argument_list>(<argument><expr><name>fenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>IEnumFilters_Release</name><argument_list>(<argument><expr><name>fenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>IGraphBuilder_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libAVPin_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libAVPin_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libAVFilter_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>libAVFilter_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_pin</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IPin_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_pin</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_pin</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IPin_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_pin</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_unique_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_unique_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pktl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dup_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shall_we_drop</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dropscore</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">62</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">100</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ndropscores</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dropscore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_fullness</name> <init>= <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name><index>[<expr><name>index</name></expr>]</index></name><operator>*</operator><literal type="number">100</literal><operator>)</operator><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>max_picture_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devtypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dropscore</name><index>[<expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>video_frame_num</name></name><operator>%</operator><name>ndropscores</name></expr>]</index></name> <operator>&lt;=</operator> <name>buffer_fullness</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"real-time buffer [%s] [%s input] too full or near too full (%d%% of size: %d [rtbufsize parameter])! frame dropped!\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></argument>, <argument><expr><name>devtypename</name></expr></argument>, <argument><expr><name>buffer_fullness</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_picture_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppktl</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pktl_next</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>shall_we_drop</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pktl_next</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacketList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pktl_next</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pktl_next</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ppktl</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr> ;</init> <condition><expr><operator>*</operator><name>ppktl</name></expr> ;</condition> <incr><expr><name>ppktl</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppktl</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>ppktl</name> <operator>=</operator> <name>pktl_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_cycle_devices</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ICreateDevEnum</name> <modifier>*</modifier></type><name>devenum</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowSourceFilterType</name></name></type> <name>sourcetype</name></decl></parameter>,
<parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfilter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_unique_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IEnumMoniker</name> <modifier>*</modifier></type><name>classenum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMoniker</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>video_device_number</name></name></expr>
</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_device_number</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name><name>device_guid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>CLSID_VideoInputDeviceCategory</name></expr>,
<expr><operator>&amp;</operator><name>CLSID_AudioInputDeviceCategory</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devtypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio only"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sourcetypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>VideoSourceDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ICreateDevEnum_CreateClassEnumerator</name><argument_list>(<argument><expr><name>devenum</name></expr></argument>, <argument><expr><name><name>device_guid</name><index>[<expr><name>sourcetype</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>IEnumMoniker</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>classenum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not enumerate %s devices (or none found).\n"</literal></expr></argument>,
<argument><expr><name>devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>device_filter</name> <operator>&amp;&amp;</operator> <call><name>IEnumMoniker_Next</name><argument_list>(<argument><expr><name>classenum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IPropertyBag</name> <modifier>*</modifier></type><name>bag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>friendly_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unique_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VARIANT</name></type> <name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBindCtx</name> <modifier>*</modifier></type><name>bind_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPOLESTR</name></type> <name>olestr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPMALLOC</name></type> <name>co_malloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CoGetMalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>co_malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CreateBindCtx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMoniker_GetDisplayName</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>bind_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unique_name</name> <operator>=</operator> <call><name>dup_wchar_to_utf8</name><argument_list>(<argument><expr><name>olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>unique_name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>unique_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unique_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMoniker_BindToStorage</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IPropertyBag</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>var</name><operator>.</operator><name>vt</name></name> <operator>=</operator> <name>VT_BSTR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IPropertyBag_Read</name><argument_list>(<argument><expr><name>bag</name></expr></argument>, <argument><expr><literal type="string">L"FriendlyName"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>friendly_name</name> <operator>=</operator> <call><name>dup_wchar_to_utf8</name><argument_list>(<argument><expr><name><name>var</name><operator>.</operator><name>bstrVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pfilter</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>friendly_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>unique_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMoniker_BindToObject</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IBaseFilter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>device_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to BindToObject for %s\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>device_unique_name</name> <operator>=</operator> <name>unique_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>unique_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" \"%s\"\n"</literal></expr></argument>, <argument><expr><name>friendly_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" Alternative name \"%s\"\n"</literal></expr></argument>, <argument><expr><name>unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>fail1</name>:</label>
<if_stmt><if>if <condition>(<expr><name>olestr</name> <operator>&amp;&amp;</operator> <name>co_malloc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IMalloc_Free</name><argument_list>(<argument><expr><name>co_malloc</name></expr></argument>, <argument><expr><name>olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bind_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IBindCtx_Release</name><argument_list>(<argument><expr><name>bind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>friendly_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IPropertyBag_Release</name><argument_list>(<argument><expr><name>bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IMoniker_Release</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>IEnumMoniker_Release</name><argument_list>(<argument><expr><name>classenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pfilter</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find %s device with name [%s] among source devices of type %s.\n"</literal></expr></argument>,
<argument><expr><name>devtypename</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>sourcetypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pfilter</name> <operator>=</operator> <name>device_filter</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>dshow_cycle_formats</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>,
<parameter><decl><type><name>IPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pformat_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAMStreamConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>caps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IPin_QueryInterface</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMStreamConfig</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IAMStreamConfig_GetNumberOfCapabilities</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>caps</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>caps</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>format_set</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IAMStreamConfig_GetStreamCaps</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_print_AM_MEDIA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>vcaps</name> <init>= <expr><name>caps</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>bih</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tags</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>avformat_get_riff_video_tags</name><argument_list>()</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_print_VIDEO_STREAM_CONFIG_CAPS</name><argument_list>(<argument><expr><name>vcaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER2</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pformat_set</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><call><name>dshow_pixfmt</name><argument_list>(<argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><call><name>av_codec_get_id</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>||</operator> <operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" unknown compression type 0x%X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" vcodec=%s"</literal></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" pixel_format=%s"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" min s=%ldx%ld fps=%g max s=%ldx%ld fps=%g\n"</literal></expr></argument>,
<argument><expr><name><name>vcaps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>vcaps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cy</name></name></expr></argument>,
<argument><expr><literal type="number">1e7</literal> <operator>/</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MaxFrameInterval</name></name></expr></argument>,
<argument><expr><name><name>vcaps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>vcaps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cy</name></name></expr></argument>,
<argument><expr><literal type="number">1e7</literal> <operator>/</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MinFrameInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>!=</operator> <call><name>av_codec_get_id</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pixel_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>pixel_format</name></name> <operator>!=</operator> <call><name>dshow_pixfmt</name><argument_list>(<argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>framerate</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_framerate</name><operator>.</operator><name>den</name></name><operator>*</operator><literal type="number">10000000</literal><operator>)</operator>
<operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_framerate</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>framerate</name> <operator>&gt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MaxFrameInterval</name></name> <operator>||</operator>
<name>framerate</name> <operator>&lt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MinFrameInterval</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <name>framerate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>requested_width</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_height</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>requested_width</name></name> <operator>&gt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cx</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>requested_width</name></name> <operator>&lt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cx</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>requested_height</name></name> <operator>&gt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cy</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>requested_height</name></name> <operator>&lt;</operator> <name><name>vcaps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cy</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biWidth</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AUDIO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>acaps</name> <init>= <expr><name>caps</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>fx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_print_AUDIO_STREAM_CONFIG_CAPS</name><argument_list>(<argument><expr><name>acaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_WaveFormatEx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pformat_set</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" min ch=%lu bits=%lu rate=%6lu max ch=%lu bits=%lu rate=%6lu\n"</literal></expr></argument>,
<argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MinimumChannels</name></name></expr></argument>, <argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MinimumBitsPerSample</name></name></expr></argument>, <argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MinimumSampleFrequency</name></name></expr></argument>,
<argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MaximumChannels</name></name></expr></argument>, <argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MaximumBitsPerSample</name></name></expr></argument>, <argument><expr><name><name>acaps</name><operator>-&gt;</operator><name>MaximumSampleFrequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MaximumSampleFrequency</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MinimumSampleFrequency</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fx</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>&gt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MaximumBitsPerSample</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>&lt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MinimumBitsPerSample</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fx</name><operator>-&gt;</operator><name>wBitsPerSample</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MaximumChannels</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <name><name>acaps</name><operator>-&gt;</operator><name>MinimumChannels</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fx</name><operator>-&gt;</operator><name>nChannels</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IAMStreamConfig_SetFormat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>format_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>next</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>IAMStreamConfig_Release</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pformat_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pformat_set</name> <operator>=</operator> <name>format_set</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_set_audio_buffer_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAMBufferNegotiation</name> <modifier>*</modifier></type><name>buffer_negotiation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ALLOCATOR_PROPERTIES</name></type> <name>props</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IAMStreamConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IPin_QueryInterface</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMStreamConfig</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IAMStreamConfig_GetFormat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_WaveFormatEx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>WAVEFORMATEX</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name><operator>)</operator><operator>-&gt;</operator><name>nAvgBytesPerSec</name><operator>)</operator>
<operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>audio_buffer_size</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IPin_QueryInterface</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMBufferNegotiation</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>buffer_negotiation</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IAMBufferNegotiation_SuggestAllocatorProperties</name><argument_list>(<argument><expr><name>buffer_negotiation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buffer_negotiation</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IAMBufferNegotiation_Release</name><argument_list>(<argument><expr><name>buffer_negotiation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IAMStreamConfig_Release</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>dshow_show_filter_properties</name><parameter_list>(<parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ISpecifyPropertyPages</name> <modifier>*</modifier></type><name>property_pages</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>device_filter_iunknown</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILTER_INFO</name></type> <name>filter_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CAUUID</name></type> <name>ca_guid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IBaseFilter_QueryInterface</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ISpecifyPropertyPages</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>property_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"requested filter does not have a property page to show"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IBaseFilter_QueryFilterInfo</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IBaseFilter_QueryInterface</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IUnknown</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>device_filter_iunknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ISpecifyPropertyPages_GetPages</name><argument_list>(<argument><expr><name>property_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OleCreatePropertyFrame</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>filter_info</name><operator>.</operator><name>achName</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_filter_iunknown</name></expr></argument>, <argument><expr><name><name>ca_guid</name><operator>.</operator><name>cElems</name></name></expr></argument>,
<argument><expr><name><name>ca_guid</name><operator>.</operator><name>pElems</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failure showing property pages for filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>property_pages</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ISpecifyPropertyPages_Release</name><argument_list>(<argument><expr><name>property_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>device_filter_iunknown</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IUnknown_Release</name><argument_list>(<argument><expr><name>device_filter_iunknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter_info</name><operator>.</operator><name>pGraph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IFilterGraph_Release</name><argument_list>(<argument><expr><name><name>filter_info</name><operator>.</operator><name>pGraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ca_guid</name><operator>.</operator><name>pElems</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name><name>ca_guid</name><operator>.</operator><name>pElems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_cycle_pins</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowSourceFilterType</name></name></type> <name>sourcetype</name></decl></parameter>, <parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IEnumPins</name> <modifier>*</modifier></type><name>pins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPin</name> <modifier>*</modifier></type><name>device_pin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPin</name> <modifier>*</modifier></type><name>pin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name><name>mediatype</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>MEDIATYPE_Video</name></expr>, <expr><operator>&amp;</operator><name>MEDIATYPE_Audio</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devtypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio only"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sourcetypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>VideoSourceDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_format</name> <init>= <expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>||</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>requested_width</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>requested_height</name></name><operator>)</operator> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>pixel_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>devtype</name> <operator>==</operator> <name>AudioDevice</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_show_properties</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>show_video_device_dialog</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>show_audio_device_dialog</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>should_show_properties</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dshow_show_filter_properties</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IBaseFilter_EnumPins</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not enumerate pins.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ppin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DirectShow %s device options (from %s devices)\n"</literal></expr></argument>,
<argument><expr><name>devtypename</name></expr></argument>, <argument><expr><name>sourcetypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>device_pin</name> <operator>&amp;&amp;</operator> <call><name>IEnumPins_Next</name><argument_list>(<argument><expr><name>pins</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IKsPropertySet</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IEnumMediaTypes</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PIN_INFO</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>category</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pin_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pin_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desired_pin_name</name> <init>= <expr><ternary><condition><expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>video_pin_name</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_pin_name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>IPin_QueryPinInfo</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>pFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>dir</name></name> <operator>!=</operator> <name>PINDIR_OUTPUT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IPin_QueryInterface</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IKsPropertySet</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IKsPropertySet_Get</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AMPROPSETID_Pin</name></expr></argument>, <argument><expr><name>AMPROPERTY_PIN_CATEGORY</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>category</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>category</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PIN_CATEGORY_CAPTURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name_buf</name> <operator>=</operator> <call><name>dup_wchar_to_utf8</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>achName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IPin_QueryId</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pin_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not query pin id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pin_buf</name> <operator>=</operator> <call><name>dup_wchar_to_utf8</name><argument_list>(<argument><expr><name>pin_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ppin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" Pin \"%s\" (alternative pin name \"%s\")\n"</literal></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>pin_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshow_cycle_formats</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desired_pin_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>desired_pin_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pin_buf</name></expr></argument>, <argument><expr><name>desired_pin_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"skipping pin \"%s\" (\"%s\") != requested \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>pin_buf</name></expr></argument>, <argument><expr><name>desired_pin_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dshow_cycle_formats</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format_set</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>AudioDevice</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>audio_buffer_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dshow_set_audio_buffer_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to set audio buffer size %d to pin, using pin anyway..."</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IPin_EnumMediaTypes</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>types</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IEnumMediaTypes_Reset</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>device_pin</name> <operator>&amp;&amp;</operator> <call><name>IEnumMediaTypes_Next</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>majortype</name></name></expr></argument>, <argument><expr><name><name>mediatype</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>device_pin</name> <operator>=</operator> <name>pin</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Selecting pin %s on %s\n"</literal></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>next</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>next</name>:</label>
<if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IEnumMediaTypes_Release</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IKsPropertySet_Release</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>device_pin</name> <operator>!=</operator> <name>pin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IPin_Release</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pin_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pin_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>pin_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>IEnumPins_Release</name><argument_list>(<argument><expr><name>pins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ppin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set_format</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>format_set</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set %s options\n"</literal></expr></argument>, <argument><expr><name>devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device_pin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not find output pin from %s capture device.\n"</literal></expr></argument>, <argument><expr><name>devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ppin</name> <operator>=</operator> <name>device_pin</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_list_device_options</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ICreateDevEnum</name> <modifier>*</modifier></type><name>devenum</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowSourceFilterType</name></name></type> <name>sourcetype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device_unique_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_cycle_devices</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_unique_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>device_filter</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_cycle_pins</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>, <argument><expr><name>device_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device_unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_open_device</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ICreateDevEnum</name> <modifier>*</modifier></type><name>devenum</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowSourceFilterType</name></name></type> <name>sourcetype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device_filter_unique_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IGraphBuilder</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPin</name> <modifier>*</modifier></type><name>device_pin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>capture_pin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>capture_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICaptureGraphBuilder2</name> <modifier>*</modifier></type><name>graph_builder2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IStream</name> <modifier>*</modifier></type><name>ifile_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IStream</name> <modifier>*</modifier></type><name>ofile_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IPersistStream</name> <modifier>*</modifier></type><name>pers_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>otherDevType</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><name>AudioDevice</name></expr> </then><else>: <expr><name>VideoDevice</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name><name>filter_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">L"Audio capture filter"</literal></expr>, <expr><literal type="string">L"Video capture filter"</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_load_file</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_load_file</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>video_filter_load_file</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_filter_load_file</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>VideoSourceDevice</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_load_file</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>video_filter_load_file</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SHCreateStreamOnFile</name> <argument_list>(<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <name>filename</name></expr></argument>, <argument><expr><name>STGM_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S_OK</name> <operator>!=</operator> <name>hr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open capture filter description file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OleLoadFromStream</name><argument_list>(<argument><expr><name>ifile_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IBaseFilter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>device_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not load capture filter from file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Audio-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Video-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Capture filter loaded successfully from file \"%s\".\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_cycle_devices</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_filter_unique_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>otherDevType</name></expr>]</index></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device_filter_unique_name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_unique_name</name><index>[<expr><name>otherDevType</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"reusing previous graph capture filter... %s\n"</literal></expr></argument>, <argument><expr><name>device_filter_unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>device_filter</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>otherDevType</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IBaseFilter_AddRef</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name><index>[<expr><name>otherDevType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"not reusing previous graph capture filter %s != %s\n"</literal></expr></argument>, <argument><expr><name>device_filter_unique_name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_unique_name</name><index>[<expr><name>otherDevType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_filter</name> <index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>device_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_unique_name</name> <index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>device_filter_unique_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IGraphBuilder_AddFilter</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>device_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not add device filter to graph.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_cycle_pins</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>sourcetype</name></expr></argument>, <argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_pin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_pin</name><index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>device_pin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>capture_filter</name> <operator>=</operator> <call><name>libAVFilter_Create</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>capture_filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create grabber filter.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>capture_filter</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_save_file</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_save_file</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>video_filter_save_file</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_filter_save_file</name></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sourcetype</name> <operator>==</operator> <name>VideoSourceDevice</name><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>audio_filter_save_file</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>video_filter_save_file</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SHCreateStreamOnFile</name> <argument_list>(<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator> <name>filename</name></expr></argument>, <argument><expr><name>STGM_CREATE</name> <operator>|</operator> <name>STGM_READWRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofile_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S_OK</name> <operator>!=</operator> <name>hr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create capture filter description file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IBaseFilter_QueryInterface</name><argument_list>(<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IPersistStream</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pers_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Query for IPersistStream failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OleSaveToStream</name><argument_list>(<argument><expr><name>pers_stream</name></expr></argument>, <argument><expr><name>ofile_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not save capture filter \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IStream_Commit</name><argument_list>(<argument><expr><name>ofile_stream</name></expr></argument>, <argument><expr><name>STGC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>S_OK</name> <operator>!=</operator> <name>hr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not commit capture filter data to file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sourcetype</name> <operator>==</operator> <name>AudioSourceDevice</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Audio-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Video-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Capture filter saved successfully to file \"%s\".\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IGraphBuilder_AddFilter</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>(</operator><name>IBaseFilter</name> <operator>*</operator><operator>)</operator> <name>capture_filter</name></expr></argument>,
<argument><expr><name><name>filter_name</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not add capture filter to graph\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libAVPin_AddRef</name><argument_list>(<argument><expr><name><name>capture_filter</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>capture_pin</name> <operator>=</operator> <name><name>capture_filter</name><operator>-&gt;</operator><name>pin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>devtype</name></expr>]</index></name> <operator>=</operator> <name>capture_pin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_CaptureGraphBuilder2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_ICaptureGraphBuilder2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>graph_builder2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create CaptureGraphBuilder2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ICaptureGraphBuilder2_SetFiltergraph</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set graph for CaptureGraphBuilder2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ICaptureGraphBuilder2_RenderStream</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator> <name>device_pin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> ,
<argument><expr><operator>(</operator><name>IBaseFilter</name> <operator>*</operator><operator>)</operator> <name>capture_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not RenderStream to connect pins\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>dshow_try_setup_crossbar_options</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><name>device_filter</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not setup CrossBar\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>graph_builder2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ICaptureGraphBuilder2_Release</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pers_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IPersistStream_Release</name><argument_list>(<argument><expr><name>pers_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ifile_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IStream_Release</name><argument_list>(<argument><expr><name>ifile_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ofile_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IStream_Release</name><argument_list>(<argument><expr><name>ofile_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name>waveform_codec_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>sample_fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case> <return>return <expr><name>AV_CODEC_ID_PCM_U8</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case> <return>return <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>;</return>
<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case> <return>return <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>;</return>
<default>default:</default> <return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return> 
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt_bits_per_sample</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <return>return <expr><name>AV_SAMPLE_FMT_U8</name></expr>;</return>
<case>case <expr><literal type="number">16</literal></expr>:</case> <return>return <expr><name>AV_SAMPLE_FMT_S16</name></expr>;</return>
<case>case <expr><literal type="number">32</literal></expr>:</case> <return>return <expr><name>AV_SAMPLE_FMT_S32</name></expr>;</return>
<default>default:</default> <return>return <expr><name>AV_SAMPLE_FMT_NONE</name></expr>;</return> 
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dshow_add_device</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>devtype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_filter</name><index>[<expr><name>devtype</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libAVPin_ConnectionMediaType</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>capture_pin</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>bih</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>.</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>.</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>time_base</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr>, <expr><literal type="number">10000000</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>.</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER2</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>.</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>time_base</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr>, <expr><literal type="number">10000000</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>bih</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bih</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get media type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>dshow_pixfmt</name><argument_list>(<argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"attempt to use full range for HDYC...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tags</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>avformat_get_riff_video_tags</name><argument_list>()</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>av_codec_get_id</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown compression type. "</literal>
<literal type="string">"Please report type 0x%X.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_RGB</name> <operator>||</operator> <name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name> <operator>==</operator> <name>BI_BITFIELDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">9</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"BottomUp"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>fx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>.</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_WaveFormatEx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fx</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>.</operator><name>pbFormat</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get media type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>sample_fmt_bits_per_sample</name><argument_list>(<argument><expr><name><name>fx</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>waveform_codec_id</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>fx</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>fx</name><operator>-&gt;</operator><name>nChannels</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>.</operator><name>pbFormat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>pbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_device_name</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_name</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>device_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>device_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dshow_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IGraphBuilder</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICreateDevEnum</name> <modifier>*</modifier></type><name>devenum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMediaControl</name> <modifier>*</modifier></type><name>control</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMediaEvent</name> <modifier>*</modifier></type><name>media_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>media_event_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CoInitialize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>list_devices</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>parse_device_name</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Malformed dshow input string.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>video_codec_id</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>video_codec_id</name></name></expr>
</then><else>: <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pixel_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>video_codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pixel format may only be set when "</literal>
<literal type="string">"video codec is not set or set to rawvideo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>requested_framerate</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not parse framerate '%s'.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_FilterGraph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_IGraphBuilder</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create capture graph.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <name>graph</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CoCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CLSID_SystemDeviceEnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>IID_ICreateDevEnum</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>devenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not enumerate system devices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>list_devices</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DirectShow video devices (some may be both video and audio devices)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshow_cycle_devices</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>VideoDevice</name></expr></argument>, <argument><expr><name>VideoSourceDevice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"DirectShow audio devices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshow_cycle_devices</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>, <argument><expr><name>AudioSourceDevice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>list_options</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_list_device_options</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>VideoDevice</name></expr></argument>, <argument><expr><name>VideoSourceDevice</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dshow_list_device_options</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>, <argument><expr><name>AudioSourceDevice</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_list_device_options</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>, <argument><expr><name>VideoSourceDevice</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>VideoDevice</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_open_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>VideoDevice</name></expr></argument>, <argument><expr><name>VideoSourceDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_add_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>VideoDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_open_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>, <argument><expr><name>AudioSourceDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_add_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Searching for audio device within video devices for %s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>AudioDevice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_open_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>devenum</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>, <argument><expr><name>VideoSourceDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>r</name> <operator>=</operator> <call><name>dshow_add_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AudioDevice</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>list_options</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create Mutex\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create Event\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IGraphBuilder_QueryInterface</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMediaControl</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get media control.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>control</name></name> <operator>=</operator> <name>control</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IGraphBuilder_QueryInterface</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IMediaEvent</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>media_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get media event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>media_event</name></name> <operator>=</operator> <name>media_event</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMediaEvent_GetEventHandle</name><argument_list>(<argument><expr><name>media_event</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>media_event_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get media event handle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>media_event_handle</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not duplicate media event handle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMediaControl_Run</name><argument_list>(<argument><expr><name>control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>S_FALSE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OAFilterState</name></type> <name>pfs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>IMediaControl_GetState</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not run graph (sometimes caused by a device already in use by other application)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>devenum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ICreateDevEnum_Release</name><argument_list>(<argument><expr><name>devenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dshow_read_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>dshow_check_event_queue</name><parameter_list>(<parameter><decl><type><name>IMediaEvent</name> <modifier>*</modifier></type><name>media_event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LONG_PTR</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>IMediaEvent_GetEvent</name><argument_list>(<argument><expr><name>media_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>E_ABORT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>EC_COMPLETE</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>EC_DEVICE_LOST</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>EC_ERRORABORT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IMediaEvent_FreeEventParams</name><argument_list>(<argument><expr><name>media_event</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dshow_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pktl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pktl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pktl</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curbufsize</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name> <operator>-=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pktl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dshow_check_event_queue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>media_event</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct dshow_ctx, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"video_size"</literal></expr>, <expr><literal type="string">"set video size given a string such as 640x480 or hd720."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>requested_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pixel_format"</literal></expr>, <expr><literal type="string">"set video pixel format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>, <expr><literal type="string">"set video frame rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set audio sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_size"</literal></expr>, <expr><literal type="string">"set audio sample size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set number of audio channels, such as 1 or 2"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"audio_buffer_size"</literal></expr>, <expr><literal type="string">"set audio device buffer latency size in milliseconds (default is the device's default)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>audio_buffer_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list_devices"</literal></expr>, <expr><literal type="string">"list available devices"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_devices</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"list_options"</literal></expr>, <expr><literal type="string">"list available options for specified device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>list_options</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video_device_number"</literal></expr>, <expr><literal type="string">"set video device number for devices with same name (starts at 0)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_device_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"audio_device_number"</literal></expr>, <expr><literal type="string">"set audio device number for devices with same name (starts at 0)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>audio_device_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video_pin_name"</literal></expr>, <expr><literal type="string">"select video capture pin by name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_pin_name</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"audio_pin_name"</literal></expr>, <expr><literal type="string">"select audio capture pin by name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>audio_pin_name</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crossbar_video_input_pin_number"</literal></expr>, <expr><literal type="string">"set video input pin number for crossbar device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crossbar_video_input_pin_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crossbar_audio_input_pin_number"</literal></expr>, <expr><literal type="string">"set audio input pin number for crossbar device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crossbar_audio_input_pin_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_video_device_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for video capture device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_video_device_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_audio_device_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for audio capture device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_audio_device_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_video_crossbar_connection_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for crossbar connecting pins filter on video device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_video_crossbar_connection_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_audio_crossbar_connection_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for crossbar connecting pins filter on audio device"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_audio_crossbar_connection_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_analog_tv_tuner_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for analog tuner filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_analog_tv_tuner_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_analog_tv_tuner_audio_dialog"</literal></expr>, <expr><literal type="string">"display property dialog for analog tuner audio filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_analog_tv_tuner_audio_dialog</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"audio_device_load"</literal></expr>, <expr><literal type="string">"load audio capture filter device (and properties) from file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>audio_filter_load_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"audio_device_save"</literal></expr>, <expr><literal type="string">"save audio capture filter device (and properties) to file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>audio_filter_save_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video_device_load"</literal></expr>, <expr><literal type="string">"load video capture filter device (and properties) from file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_filter_load_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video_device_save"</literal></expr>, <expr><literal type="string">"save video capture filter device (and properties) to file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_filter_save_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dshow_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"dshow indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dshow_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dshow"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DirectShow capture"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dshow_ctx</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>dshow_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>dshow_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>dshow_read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dshow_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
