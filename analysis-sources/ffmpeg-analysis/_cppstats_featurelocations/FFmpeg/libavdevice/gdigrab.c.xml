<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\gdigrab.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>




<struct>struct <name>gdigrab</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>time_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>draw_mouse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>show_region</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>offset_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>offset_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HDC</name></type> <name>source_hdc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HDC</name></type> <name>dest_hdc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>BITMAPINFO</name></type> <name>bmi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RECT</name></type> <name>clip_rect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HWND</name></type> <name>region_hwnd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cursor_error_printed</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_API_ERROR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_log(s1, AV_LOG_ERROR, str " (error %li)\n", GetLastError())</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGION_WND_BORDER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>












<function><type><specifier>static</specifier> <name>LRESULT</name> <name>CALLBACK</name></type>
<name>gdigrab_region_wnd_proc</name><parameter_list>(<parameter><decl><type><name>HWND</name></type> <name>hwnd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>WPARAM</name></type> <name>wparam</name></decl></parameter>, <parameter><decl><type><name>LPARAM</name></type> <name>lparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PAINTSTRUCT</name></type> <name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WM_PAINT</name></expr>:</case>
<expr_stmt><expr><name>hdc</name> <operator>=</operator> <call><name>BeginPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>BLACK_BRUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>WHITE_BRUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><name>hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><call><name>GetStockObject</name><argument_list>(<argument><expr><name>BLACK_BRUSH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndPaint</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>wparam</name></expr></argument>, <argument><expr><name>lparam</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>gdigrab_region_wnd_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>clip_rect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRGN</name></type> <name>region</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRGN</name></type> <name>region_interior</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>style</name> <init>= <expr><name>WS_POPUP</name> <operator>|</operator> <name>WS_VISIBLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ex</name> <init>= <expr><name>WS_EX_TOOLWINDOW</name> <operator>|</operator> <name>WS_EX_TOPMOST</name> <operator>|</operator> <name>WS_EX_TRANSPARENT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>-=</operator> <name>REGION_WND_BORDER</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>top</name></name> <operator>-=</operator> <name>REGION_WND_BORDER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name>REGION_WND_BORDER</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>+=</operator> <name>REGION_WND_BORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AdjustWindowRectEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>CreateWindowEx</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>WC_DIALOG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not create region display window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>region</name> <operator>=</operator> <call><name>CreateRectRgn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>region_interior</name> <operator>=</operator> <call><name>CreateRectRgn</name><argument_list>(<argument><expr><name>REGION_WND_BORDER</name></expr></argument>, <argument><expr><name>REGION_WND_BORDER</name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name>REGION_WND_BORDER</name></expr></argument>,
<argument><expr><name><name>rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name>REGION_WND_BORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CombineRgn</name><argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>region_interior</name></expr></argument>, <argument><expr><name>RGN_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetWindowRgn</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not set window region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>region</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>region_interior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowLongPtr</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>GWLP_WNDPROC</name></expr></argument>, <argument><expr><operator>(</operator><name>LONG_PTR</name><operator>)</operator> <name>gdigrab_region_wnd_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>region_hwnd</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>region</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>region_interior</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>region_interior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hwnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>gdigrab_region_wnd_destroy</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>region_hwnd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyWindow</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>region_hwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>region_hwnd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>void</name></type>
<name>gdigrab_region_wnd_update</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>region_hwnd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>PeekMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>hwnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>gdigrab_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>source_hdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>dest_hdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAPINFO</name></type> <name>bmi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>hbmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>url</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>horzres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desktophorzres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desktopvertres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>virtual_rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>clip_rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BITMAP</name></type> <name>bmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"title="</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name>filename</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <call><name>FindWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Can't find window '%s', aborting.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Can't show region when grabbing a window.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>show_region</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"desktop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hwnd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Please use \"desktop\" or \"title=&lt;windowname&gt;\" to specify your target.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>source_hdc</name> <operator>=</operator> <call><name>GetDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>source_hdc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't get window device context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bpp</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>, <argument><expr><name>BITSPIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>horzres</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>, <argument><expr><name>HORZRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vertres</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>, <argument><expr><name>VERTRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desktophorzres</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>, <argument><expr><name>DESKTOPHORZRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desktopvertres</name> <operator>=</operator> <call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>, <argument><expr><name>DESKTOPVERTRES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwnd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetClientRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>virtual_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>left</name></name> <operator>*</operator> <name>desktophorzres</name> <operator>/</operator> <name>horzres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>right</name></name> <operator>*</operator> <name>desktophorzres</name> <operator>/</operator> <name>horzres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>top</name></name> <operator>*</operator> <name>desktopvertres</name> <operator>/</operator> <name>vertres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name> <operator>*</operator> <name>desktopvertres</name> <operator>/</operator> <name>vertres</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_XVIRTUALSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_YVIRTUALSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name><name>virtual_rect</name><operator>.</operator><name>left</name></name> <operator>+</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXVIRTUALSCREEN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>desktophorzres</name> <operator>/</operator> <name>horzres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>(</operator><name><name>virtual_rect</name><operator>.</operator><name>top</name></name> <operator>+</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYVIRTUALSCREEN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>desktopvertres</name> <operator>/</operator> <name>vertres</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gdigrab</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>gdigrab</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>offset_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>offset_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>offset_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>offset_y</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>&lt;</operator> <name><name>virtual_rect</name><operator>.</operator><name>left</name></name> <operator>||</operator>
<name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>&lt;</operator> <name><name>virtual_rect</name><operator>.</operator><name>top</name></name> <operator>||</operator>
<name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>&gt;</operator> <name><name>virtual_rect</name><operator>.</operator><name>right</name></name> <operator>||</operator>
<name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>&gt;</operator> <name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Capture area (%li,%li),(%li,%li) extends outside window area (%li,%li),(%li,%li)"</literal></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name></expr></argument>,
<argument><expr><name><name>virtual_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>virtual_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name><name>virtual_rect</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>virtual_rect</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Found window %s, capturing %lix%lix%i at (%li,%li)\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Capturing whole desktop as %lix%lix%i at (%li,%li)\n"</literal></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>bpp</name><operator>%</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid properties, aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dest_hdc</name> <operator>=</operator> <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest_hdc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Screen DC CreateCompatibleDC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name> <operator>=</operator> <name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>=</operator> <name>bpp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name> <operator>=</operator> <name>BI_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biSizeImage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biXPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biYPelsPerMeter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biClrImportant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hbmp</name> <operator>=</operator> <call><name>CreateDIBSection</name><argument_list>(<argument><expr><name>dest_hdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmi</name></expr></argument>, <argument><expr><name>DIB_RGB_COLORS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hbmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Creating DIB Section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SelectObject</name><argument_list>(<argument><expr><name>dest_hdc</name></expr></argument>, <argument><expr><name>hbmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"SelectObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>GetObject</name><argument_list>(<argument><expr><name>hbmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BITMAP</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>bmp</name><operator>.</operator><name>bmWidthBytes</name></name> <operator>*</operator> <name><name>bmp</name><operator>.</operator><name>bmHeight</name></name> <operator>*</operator> <name><name>bmp</name><operator>.</operator><name>bmPlanes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPFILEHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name>bpp</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bpp</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RGBQUAD</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>hwnd</name></name> <operator>=</operator> <name>hwnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name> <operator>=</operator> <name>source_hdc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>dest_hdc</name></name> <operator>=</operator> <name>dest_hdc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>hbmp</name></name> <operator>=</operator> <name>hbmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name></name> <operator>=</operator> <name>bmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>clip_rect</name></name> <operator>=</operator> <name>clip_rect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>cursor_error_printed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>gdigrab_region_wnd_init</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>gdigrab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_BMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>frame_size</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal><operator>/</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>source_hdc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><name>source_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dest_hdc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>dest_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hbmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>hbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>source_hdc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>source_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>paint_mouse_pointer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURSORINFO</name></type> <name>ci</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSOR_ERROR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!gdigrab-&gt;cursor_error_printed) { WIN32_API_ERROR(str); gdigrab-&gt;cursor_error_printed = 1; }</cpp:value></cpp:define>





<expr_stmt><expr><name><name>ci</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCursorInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>icon</name> <init>= <expr><call><name>CopyCursor</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>hCursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ICONINFO</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>clip_rect</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>clip_rect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hwnd</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>hwnd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>horzres</name> <init>= <expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>, <argument><expr><name>HORZRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertres</name> <init>= <expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>, <argument><expr><name>VERTRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desktophorzres</name> <init>= <expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>, <argument><expr><name>DESKTOPHORZRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desktopvertres</name> <init>= <expr><call><name>GetDeviceCaps</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>, <argument><expr><name>DESKTOPVERTRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hbmMask</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hbmColor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>.</operator><name>flags</name></name> <operator>!=</operator> <name>CURSOR_SHOWING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>CopyCursor</name><argument_list>(<argument><expr><call><name>LoadCursor</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDC_ARROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetIconInfo</name><argument_list>(<argument><expr><name>icon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CURSOR_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not get icon info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>icon_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hwnd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RECT</name></type> <name>rect</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>xHotspot</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>yHotspot</name></name> <operator>-</operator> <name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>desktophorzres</name> <operator>/</operator> <name>horzres</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>desktopvertres</name> <operator>/</operator> <name>vertres</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CURSOR_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't get window rectangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>icon_error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>desktophorzres</name> <operator>/</operator> <name>horzres</name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>xHotspot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>desktopvertres</name> <operator>/</operator> <name>vertres</name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>yHotspot</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Cursor pos (%li,%li) -&gt; (%li,%li)\n"</literal></expr></argument>,
<argument><expr><name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>ptScreenPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name> <operator>&amp;&amp;</operator>
<name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DrawIcon</name><argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>dest_hdc</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CURSOR_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't draw icon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>icon_error</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hbmMask</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hbmColor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>icon</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DestroyCursor</name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CURSOR_ERROR</name><argument_list>(<argument><expr><literal type="string">"Couldn't get cursor info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>gdigrab_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>gdigrab</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HDC</name></type> <name>dest_hdc</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>dest_hdc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>source_hdc</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>clip_rect</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>clip_rect</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>time_frame</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BITMAPFILEHEADER</name></type> <name>bfh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file_size</name> <init>= <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curtime</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>


<expr_stmt><expr><name>time_frame</name> <operator>+=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gdigrab_region_wnd_update</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>gdigrab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>curtime</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>time_frame</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>time_base</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>curtime</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time_frame</name> <operator>+=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>curtime</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BitBlt</name><argument_list>(<argument><expr><name>dest_hdc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>source_hdc</name></expr></argument>,
<argument><expr><name><name>clip_rect</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>clip_rect</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>SRCCOPY</name> <operator>|</operator> <name>CAPTUREBLT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WIN32_API_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to capture image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>draw_mouse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>paint_mouse_pointer</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>gdigrab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>bfh</name><operator>.</operator><name>bfType</name></name> <operator>=</operator> <literal type="number">0x4d42</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>bfh</name><operator>.</operator><name>bfSize</name></name> <operator>=</operator> <name>file_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bfh</name><operator>.</operator><name>bfReserved1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bfh</name><operator>.</operator><name>bfReserved2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bfh</name><operator>.</operator><name>bfOffBits</name></name> <operator>=</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bfh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bfh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bfh</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GetDIBColorTable</name><argument_list>(<argument><expr><name>dest_hdc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>RGBQUAD</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bfh</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>bmi</name><operator>.</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gdigrab</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>=</operator> <name>time_frame</name></expr>;</expr_stmt>

<return>return <expr><name><name>gdigrab</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name><name>gdigrab</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>gdigrab_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>gdigrab</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gdigrab_region_wnd_destroy</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>source_hdc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseDC</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwnd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dest_hdc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest_hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hbmp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hbmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>source_hdc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>source_hdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct gdigrab, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"draw_mouse"</literal></expr>, <expr><literal type="string">"draw the mouse pointer"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_mouse</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_region"</literal></expr>, <expr><literal type="string">"draw border around capture area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_region</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>, <expr><literal type="string">"set video frame rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ntsc"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"video_size"</literal></expr>, <expr><literal type="string">"set video frame size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset_x"</literal></expr>, <expr><literal type="string">"capture area x offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset_y"</literal></expr>, <expr><literal type="string">"capture area y offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>gdigrab_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"GDIgrab indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_gdigrab_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"gdigrab"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"GDI API Windows frame grabber"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>gdigrab</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>gdigrab_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>gdigrab_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>gdigrab_read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>gdigrab_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
