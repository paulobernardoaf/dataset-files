<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\dshow_filter.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>

<macro><name>DECLARE_QUERYINTERFACE</name><argument_list>(<argument>libAVFilter</argument>,
<argument>{ {&amp;IID_IUnknown</argument>,<argument><literal type="number">0</literal>}</argument>, <argument>{&amp;IID_IBaseFilter</argument>,<argument><literal type="number">0</literal>} }</argument>)</argument_list></macro>
<macro><name>DECLARE_ADDREF</name><argument_list>(<argument>libAVFilter</argument>)</argument_list></macro>
<macro><name>DECLARE_RELEASE</name><argument_list>(<argument>libAVFilter</argument>)</argument_list></macro>

<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_GetClassID</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>CLSID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_GetClassID(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>E_FAIL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_Stop</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_Stop(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>State_Stopped</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_Pause</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_Pause(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>State_Paused</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_Run</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_Run(%p) %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>State_Running</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_GetState</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>FILTER_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_GetState(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_SetSyncSource</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IReferenceClock</name> <modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_SetSyncSource(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name> <operator>!=</operator> <name>clock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IReferenceClock_Release</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name> <operator>=</operator> <name>clock</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IReferenceClock_AddRef</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_GetSyncSource</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IReferenceClock</name> <modifier>*</modifier><modifier>*</modifier></type><name>clock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_GetSyncSource(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clock</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IReferenceClock_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>clock</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>clock</name></name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_EnumPins</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IEnumPins</name> <modifier>*</modifier><modifier>*</modifier></type><name>enumpin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_EnumPins(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enumpin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>libAVEnumPins_Create</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>enumpin</name> <operator>=</operator> <operator>(</operator><name>IEnumPins</name> <operator>*</operator><operator>)</operator> <name>new</name></expr>;</expr_stmt>
<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_FindPin</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_FindPin(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><name>pin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">L"In"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>libAVPin_AddRef</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pin</name> <operator>=</operator> <operator>(</operator><name>IPin</name> <operator>*</operator><operator>)</operator> <name>found</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VFW_E_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_QueryFilterInfo</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>FILTER_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_QueryFilterInfo(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pGraph</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IFilterGraph_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pGraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_JoinFilterGraph</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_JoinFilterGraph(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pGraph</name></name> <operator>=</operator> <name>graph</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>achName</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>long</name> <name>WINAPI</name></type>
<name>libAVFilter_QueryVendorInfo</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVFilter_QueryVendorInfo(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>E_NOTIMPL</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>libAVFilter_Setup</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IBaseFilterVtbl</name> <modifier>*</modifier></type><name>vtbl</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>vtbl</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>QueryInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>GetClassID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>Stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>Pause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>Run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>GetState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>SetSyncSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>GetSyncSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>EnumPins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>FindPin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>QueryFilterInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>JoinFilterGraph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVFilter</name></expr></argument>, <argument><expr><name>QueryVendorInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name> <operator>=</operator> <call><name>libAVPin_Create</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>libAVFilter_Cleanup</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>libAVPin_Release</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<macro><name>DECLARE_CREATE</name><argument_list>(<argument>libAVFilter</argument>, <argument>libAVFilter_Setup(this, priv_data, callback, type)</argument>,
<argument>void *priv_data</argument>, <argument>void *callback</argument>, <argument>enum dshowDeviceType type</argument>)</argument_list></macro>
<macro><name>DECLARE_DESTROY</name><argument_list>(<argument>libAVFilter</argument>, <argument>libAVFilter_Cleanup</argument>)</argument_list></macro>
</unit>
