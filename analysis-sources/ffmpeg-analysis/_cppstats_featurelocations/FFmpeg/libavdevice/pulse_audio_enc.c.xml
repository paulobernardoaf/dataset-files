<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\pulse_audio_enc.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/pulseaudio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulse_audio_common.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PulseData</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buffer_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nonblocking</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>base_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>last_volume</name></decl>;</decl_stmt>
}</block></struct></type> <name>PulseData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_audio_sink_device_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_info</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PA_SINK_FLAT_VOLUME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>base_volume</name></name> <operator>=</operator> <name><name>dev</name><operator>-&gt;</operator><name>base_volume</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>base_volume</name></name> <operator>=</operator> <name>PA_VOLUME_NORM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"base volume: %u\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>base_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_update_sink_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_info_by_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><name>pulse_audio_sink_device_cb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pa_context_get_sink_info_by_name failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_audio_sink_input_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_input_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>vol</name> <init>= <expr><call><name>pa_cvolume_avg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>volume</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>mute</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>mute</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>mute</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_MUTE_STATE_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>pa_sw_volume_divide</name><argument_list>(<argument><expr><name>vol</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>base_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_volume</name></name> <operator>!=</operator> <name>vol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>vol</name> <operator>/</operator> <name>PA_VOLUME_NORM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_volume</name></name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_update_sink_input_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>pa_operation_state</name></name></type> <name>op_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_mainloop</name> <modifier>*</modifier></type><name>ml</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_pulse_audio_connect_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="string">"Update sink input information"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>op</name> <operator>=</operator> <call><name>pa_context_get_sink_input_info</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pulse_audio_sink_input_cb</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>op_state</name> <operator>=</operator> <call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><name>ml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op_state</name> <operator>!=</operator> <name>PA_OPERATION_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_pulse_audio_disconnect_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pa_context_get_sink_input_info failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_event</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>pa_subscription_event_type_t</name></type> <name>t</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>PA_SUBSCRIPTION_EVENT_FACILITY_MASK</name><operator>)</operator> <operator>==</operator> <name>PA_SUBSCRIPTION_EVENT_SINK_INPUT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>PA_SUBSCRIPTION_EVENT_TYPE_MASK</name><operator>)</operator> <operator>==</operator> <name>PA_SUBSCRIPTION_EVENT_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_update_sink_input_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_stream_writable</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_BUFFER_WRITABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_overflow</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_BUFFER_OVERFLOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_underflow</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_BUFFER_UNDERFLOW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_stream_state</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_STREAM_READY</name></expr>:</case>
<case>case <expr><name>PA_STREAM_FAILED</name></expr>:</case>
<case>case <expr><name>PA_STREAM_TERMINATED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_stream_wait</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_stream_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PA_STREAM_READY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_STREAM_FAILED</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>PA_STREAM_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_context_state</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_CONTEXT_READY</name></expr>:</case>
<case>case <expr><name>PA_CONTEXT_FAILED</name></expr>:</case>
<case>case <expr><name>PA_CONTEXT_TERMINATED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_context_wait</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_context_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>=</operator> <call><name>pa_context_get_state</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>PA_CONTEXT_READY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_CONTEXT_FAILED</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>PA_CONTEXT_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_stream_result</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_EXTERNAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_finish_stream_operation</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s failed.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s failed.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_set_pause</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_cork</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>, <argument><expr><name>pulse_stream_result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_finish_stream_operation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pa_stream_cork"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_flash_stream</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_stream_flush</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulse_stream_result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_finish_stream_operation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pa_stream_flush"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_context_result</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_EXTERNAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_finish_context_operation</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s failed.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s failed.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>last_result</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_set_mute</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_set_sink_input_mute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr></argument>, <argument><expr><name>pulse_context_result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_finish_context_operation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pa_context_set_sink_input_mute"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_set_volume</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>volume</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_cvolume</name></type> <name>cvol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_volume_t</name></type> <name>vol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pa_sample_spec</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><call><name>pa_stream_get_sample_spec</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>pa_sw_volume_multiply</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>volume</name> <operator>*</operator> <name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>base_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_cvolume_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cvol</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>PA_VOLUME_NORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_sw_cvolume_multiply_scalar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cvol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cvol</name></expr></argument>, <argument><expr><name>vol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_set_sink_input_volume</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name>pa_stream_get_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cvol</name></expr></argument>, <argument><expr><name>pulse_context_result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_finish_context_operation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pa_context_set_sink_input_volume"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_subscribe_events</name><parameter_list>(<parameter><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>pa_context_subscribe</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>PA_SUBSCRIPTION_MASK_SINK_INPUT</name></expr></argument>, <argument><expr><name>pulse_context_result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_finish_context_operation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"pa_context_subscribe"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_map_channels_to_pulse</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl></parameter>, <parameter><decl><type><name>pa_channel_map</name> <modifier>*</modifier></type><name>channel_map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_REAR_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_SIDE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_FRONT_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_FRONT_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_FRONT_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_FRONT_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_FRONT_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_FRONT_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_BACK_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_REAR_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_BACK_CENTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_REAR_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_TOP_BACK_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_TOP_REAR_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_STEREO_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_STEREO_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_FRONT_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_WIDE_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_AUX0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_WIDE_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_AUX1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_SURROUND_DIRECT_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_AUX2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_SURROUND_DIRECT_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_AUX3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;</operator> <name>AV_CH_LOW_FREQUENCY_2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>-&gt;</operator><name>map</name><index>[<expr><name><name>channel_map</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pulse_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_stream_disconnect</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_write_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_set_subscribe_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_stop</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pulse_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_sample_spec</name></type> <name>sample_spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_buffer_attr</name></type> <name>buffer_attributes</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_channel_map</name></type> <name>channel_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_mainloop_api</name> <modifier>*</modifier></type><name>mainloop_api</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_name</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>stream_name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pa_stream_flags_t</name></type> <name>stream_flags</name> <init>= <expr><name>PA_STREAM_INTERPOLATE_TIMING</name> <operator>|</operator>
<name>PA_STREAM_AUTO_TIMING_UPDATE</name> <operator>|</operator>
<name>PA_STREAM_NOT_MONOTONIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only a single audio stream is supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stream_name</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stream_name</name> <operator>=</operator> <literal type="string">"Playback"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nonblocking</name></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_duration</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer_duration</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> <operator>*=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator>
<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_attributes</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><call><name>av_clip64</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Buffer duration: %ums recalculated into %"</literal><name>PRId64</name><literal type="string">" bytes buffer.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_duration</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Real buffer length is %u bytes\n"</literal></expr></argument>, <argument><expr><name><name>buffer_attributes</name><operator>.</operator><name>tlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer_attributes</name><operator>.</operator><name>tlength</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prebuf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer_attributes</name><operator>.</operator><name>prebuf</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prebuf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>minreq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer_attributes</name><operator>.</operator><name>minreq</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>minreq</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sample_spec</name><operator>.</operator><name>format</name></name> <operator>=</operator> <call><name>ff_codec_id_to_pulse_format</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_spec</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_spec</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pa_sample_spec_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sample_spec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample spec.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sample_spec</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel_map</name><operator>.</operator><name>map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PA_CHANNEL_POSITION_MONO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pulse_map_channels_to_pulse</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel_map</name><operator>.</operator><name>channels</name></name> <operator>!=</operator> <name><name>sample_spec</name><operator>.</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown channel. Using defaul channel map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel_map</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>channel_map</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel_map</name><operator>.</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using PulseAudio's default channel map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>pa_channel_map_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>channel_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name> <operator>=</operator> <call><name>pa_threaded_mainloop_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot create threaded mainloop.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pa_threaded_mainloop_start</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot start threaded mainloop: %s.\n"</literal></expr></argument>, <argument><expr><call><name>pa_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mainloop_api</name> <operator>=</operator> <call><name>pa_threaded_mainloop_get_api</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mainloop_api</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot get mainloop API.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>pa_context_new</name><argument_list>(<argument><expr><name>mainloop_api</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot create context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pulse_context_state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_set_subscribe_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pulse_event</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pa_context_connect</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot connect context: %s.\n"</literal></expr></argument>, <argument><expr><call><name>pa_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pulse_context_wait</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Context failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>pa_stream_new</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>stream_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample_spec</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>channel_map</name><operator>.</operator><name>channels</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>channel_map</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pulse_update_sink_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Updating sink info failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot create stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulse_stream_state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_write_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulse_stream_writable</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_overflow_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulse_overflow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_underflow_callback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pulse_underflow</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pa_stream_connect_playback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_attributes</name></expr></argument>,
<argument><expr><name>stream_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pa_stream_connect_playback failed: %s.\n"</literal></expr></argument>, <argument><expr><call><name>pa_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pulse_stream_wait</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stream failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>buffer_attributes</name> <operator>=</operator> <operator>*</operator><call><name>pa_stream_get_buffer_attr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>buffer_attributes</name><operator>.</operator><name>tlength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prebuf</name></name> <operator>=</operator> <name><name>buffer_attributes</name><operator>.</operator><name>prebuf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>minreq</name></name> <operator>=</operator> <name><name>buffer_attributes</name><operator>.</operator><name>minreq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Real buffer attributes: size: %d, prebuf: %d, minreq: %d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prebuf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>minreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pulse_subscribe_events</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Event subscription failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_volume</name></name> <operator>=</operator> <name>PA_VOLUME_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pulse_update_sink_input_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Updating sink input info failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pulse_write_trailer</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>writable_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>pulse_flash_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>r</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>samples</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <operator>(</operator><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PA_STREAM_IS_GOOD</name><argument_list>(<argument><expr><call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PulseAudio stream is in invalid state.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>pa_stream_writable_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>minreq</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nonblocking</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pa_stream_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PA_SEEK_RELATIVE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pa_stream_write failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>pa_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>writable_size</name> <operator>=</operator> <call><name>pa_stream_writable_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>minreq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avdevice_dev_to_app_control_message</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_DEV_TO_APP_BUFFER_WRITABLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writable_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>writable_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_write_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_WRITE_UNCODED_FRAME_QUERY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>pkt_dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>pkt_duration</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_write_packet</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_get_output_timestamp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>wall</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>latency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_get_latency</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>latency</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wall</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>wall</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><operator>-</operator><name>latency</name></expr> </then><else>: <expr><name>latency</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_pulse_audio_get_devices</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_control_message</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_APP_TO_DEV_PAUSE</name></expr>:</case>
<return>return <expr><call><name>pulse_set_pause</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_PLAY</name></expr>:</case>
<return>return <expr><call><name>pulse_set_pause</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_TOGGLE_PAUSE</name></expr>:</case>
<return>return <expr><call><name>pulse_set_pause</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>!</operator><call><name>pa_stream_is_corked</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_MUTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_set_mute</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_UNMUTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_set_mute</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_TOGGLE_MUTE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mute</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>pulse_set_mute</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_SET_VOLUME</name></expr>:</case>
<return>return <expr><call><name>pulse_set_volume</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_GET_VOLUME</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_volume</name></name> <operator>=</operator> <name>PA_VOLUME_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pulse_update_sink_input_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<case>case <expr><name>AV_APP_TO_DEV_GET_MUTE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pulse_update_sink_input_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(PulseData, a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"server"</literal></expr>, <expr><literal type="string">"set PulseAudio server"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"set application name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>LIBAVFORMAT_IDENT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stream_name"</literal></expr>, <expr><literal type="string">"set stream description"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"device"</literal></expr>, <expr><literal type="string">"set device name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"buffer_size"</literal></expr>, <expr><literal type="string">"set buffer size in bytes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"buffer_duration"</literal></expr>, <expr><literal type="string">"set buffer duration in millisecs"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>buffer_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prebuf"</literal></expr>, <expr><literal type="string">"set pre-buffering size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>prebuf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"minreq"</literal></expr>, <expr><literal type="string">"set minimum request size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>minreq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>pulse_muxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"PulseAudio outdev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_pulse_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pulse"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Pulse audio output"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PulseData</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <call><name>AV_NE</name><argument_list>(<argument><expr><name>AV_CODEC_ID_PCM_S16BE</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_PCM_S16LE</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>pulse_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>pulse_write_packet</name></expr>,
<expr><operator>.</operator><name>write_uncoded_frame</name> <operator>=</operator> <name>pulse_write_frame</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>pulse_write_trailer</name></expr>,
<expr><operator>.</operator><name>get_output_timestamp</name> <operator>=</operator> <name>pulse_get_output_timestamp</name></expr>,
<expr><operator>.</operator><name>get_device_list</name> <operator>=</operator> <name>pulse_get_device_list</name></expr>,
<expr><operator>.</operator><name>control_message</name> <operator>=</operator> <name>pulse_control_message</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pulse_muxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
