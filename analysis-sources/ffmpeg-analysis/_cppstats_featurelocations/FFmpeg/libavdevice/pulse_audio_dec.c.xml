<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\pulse_audio_dec.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/rtclock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pulse/error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulse_audio_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timefilter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CODEC_ID</name></cpp:macro> <cpp:value>AV_NE(AV_CODEC_ID_PCM_S16BE, AV_CODEC_ID_PCM_S16LE)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>PulseData</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stream_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fragment_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_threaded_mainloop</name> <modifier>*</modifier></type><name>mainloop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>timefilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wallclock</name></decl>;</decl_stmt>
}</block></struct></type> <name>PulseData</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SUCCESS_GOTO</name><parameter_list>(<parameter><type><name>rerror</name></type></parameter>, <parameter><type><name>expression</name></type></parameter>, <parameter><type><name>label</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(expression)) { rerror = AVERROR_EXTERNAL; goto label; } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DEAD_GOTO</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>rerror</name></type></parameter>, <parameter><type><name>label</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(p)-&gt;context || !PA_CONTEXT_IS_GOOD(pa_context_get_state((p)-&gt;context)) || !(p)-&gt;stream || !PA_STREAM_IS_GOOD(pa_stream_get_state((p)-&gt;stream))) { rerror = AVERROR_EXTERNAL; goto label; } } while (0)</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>void</name></type> <name>context_state_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_CONTEXT_READY</name></expr>:</case>
<case>case <expr><name>PA_CONTEXT_TERMINATED</name></expr>:</case>
<case>case <expr><name>PA_CONTEXT_FAILED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_state_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PA_STREAM_READY</name></expr>:</case>
<case>case <expr><name>PA_STREAM_FAILED</name></expr>:</case>
<case>case <expr><name>PA_STREAM_TERMINATED</name></expr>:</case>
<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_request_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_latency_update_cb</name><parameter_list>(<parameter><decl><type><name>pa_stream</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_signal</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pulse_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_stop</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_stream_unref</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_free</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_timefilter_destroy</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>timefilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>timefilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pulse_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>=
<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>audio_codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr> ?</condition><then> <expr><name>DEFAULT_CODEC_ID</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>audio_codec_id</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pa_sample_spec</name></type> <name>ss</name> <init>= <expr><block>{ <expr><call><name>ff_codec_id_to_pulse_format</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>,
<expr><name><name>pd</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>,
<expr><name><name>pd</name><operator>-&gt;</operator><name>channels</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_buffer_attr</name></type> <name>attr</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_channel_map</name></type> <name>cmap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_channel_map_init_extend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmap</name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>PA_CHANNEL_MAP_WAVEEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot add stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>fragsize</name></name> <operator>=</operator> <name><name>pd</name><operator>-&gt;</operator><name>fragment_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name> <operator>=</operator> <call><name>pa_threaded_mainloop_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pulse_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>pa_context_new</name><argument_list>(<argument><expr><call><name>pa_threaded_mainloop_get_api</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pulse_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>context_state_cb</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_context_connect</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pulse_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_threaded_mainloop_start</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>pa_context_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pa_context_get_state</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_CONTEXT_READY</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PA_CONTEXT_IS_GOOD</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>pa_stream_new</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmap</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_stream_set_state_callback</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>stream_state_cb</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_read_callback</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>stream_request_cb</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_write_callback</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>stream_request_cb</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_set_latency_update_callback</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>stream_latency_update_cb</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pa_stream_connect_record</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>,
<argument><expr><name>PA_STREAM_INTERPOLATE_TIMING</name>
<operator>|</operator><name>PA_STREAM_ADJUST_LATENCY</name>
<operator>|</operator><name>PA_STREAM_AUTO_TIMING_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>pa_stream_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pa_stream_get_state</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>PA_STREAM_READY</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PA_STREAM_IS_GOOD</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pa_context_errno</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>codec_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>pd</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>pd</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>timefilter</name></name> <operator>=</operator> <call><name>ff_timefilter_new</name><argument_list>(<argument><expr><literal type="number">1000000.0</literal> <operator>/</operator> <name><name>pd</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">1.5E</literal><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pd</name><operator>-&gt;</operator><name>timefilter</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pulse_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>unlock_and_fail</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pulse_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>read_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>read_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pa_usec_t</name></type> <name>latency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_lock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_DEAD_GOTO</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>unlock_and_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>read_data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>pa_stream_peek</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SUCCESS_GOTO</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>unlock_and_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pa_threaded_mainloop_wait</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_DEAD_GOTO</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>unlock_and_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>read_data</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>pa_stream_drop</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_SUCCESS_GOTO</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>unlock_and_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>read_length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>unlock_and_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><call><name>pa_stream_update_timing_info</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_stream_get_latency</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>latency</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>negative</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>=
<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>audio_codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr> ?</condition><then> <expr><name>DEFAULT_CODEC_ID</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>audio_codec_id</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>pd</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_duration</name> <init>= <expr><name>read_length</name> <operator>/</operator> <name>frame_size</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dts</name> <operator>+=</operator> <name>latency</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>dts</name> <operator>-=</operator> <name>latency</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>-&gt;</operator><name>wallclock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>ff_timefilter_update</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>timefilter</name></name></expr></argument>, <argument><expr><name>dts</name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>last_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>last_period</name></name> <operator>=</operator> <name>frame_duration</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"pa_stream_get_latency() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>read_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pa_stream_drop</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>unlock_and_fail</name>:</label>
<expr_stmt><expr><call><name>pa_threaded_mainloop_unlock</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>mainloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pulse_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PulseData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_pulse_audio_get_devices</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(PulseData, a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"server"</literal></expr>, <expr><literal type="string">"set PulseAudio server"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"set application name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>LIBAVFORMAT_IDENT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stream_name"</literal></expr>, <expr><literal type="string">"set stream description"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stream_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"record"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set sample rate in Hz"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">48000</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set number of audio channels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"frame_size"</literal></expr>, <expr><literal type="string">"set number of bytes per frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1024</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fragment_size"</literal></expr>, <expr><literal type="string">"set buffering size, affects latency and cpu usage"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fragment_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wallclock"</literal></expr>, <expr><literal type="string">"set the initial pts using the current time"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wallclock</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>pulse_demuxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Pulse indev"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_pulse_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pulse"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Pulse audio input"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PulseData</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>pulse_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>pulse_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>pulse_close</name></expr>,
<expr><operator>.</operator><name>get_device_list</name> <operator>=</operator> <name>pulse_get_device_list</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pulse_demuxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
