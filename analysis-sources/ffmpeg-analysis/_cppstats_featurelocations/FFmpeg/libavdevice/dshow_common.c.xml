<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavdevice\dshow_common.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>

<function><type><name>long</name></type> <name>ff_copy_dshow_media_type</name><parameter_list>(<parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pbFormat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>cbFormat</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pbFormat</name> <operator>=</operator> <call><name>CoTaskMemAlloc</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>cbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pbFormat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbFormat</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>cbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pUnk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pbFormat</name></name> <operator>=</operator> <name>pbFormat</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_printGUID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>Data1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>Data2</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>Data4</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"0x%08x 0x%04x 0x%04x %02x%02x%02x%02x%02x%02x%02x%02x"</literal></expr></argument>,
<argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dshow_context_to_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="string">"dshow"</literal></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ff_dshow_context_class</name> <init>= <expr><block>{ <expr><literal type="string">"DirectShow"</literal></expr>, <expr><name>dshow_context_to_name</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>ff_dshow_context_class_ptr</name> <init>= <expr><operator>&amp;</operator><name>ff_dshow_context_class</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dstruct</name><parameter_list>(<parameter><type><name>pctx</name></type></parameter>, <parameter><type><name>sname</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dshowdebug(" "#var":\t%"type"\n", sname-&gt;var)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_bih</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>BITMAPINFOHEADER</name> <modifier>*</modifier></type><name>bih</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" BITMAPINFOHEADER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biSize</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biWidth</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biHeight</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biPlanes</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biBitCount</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biCompression</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" biCompression:\t\"%.4s\"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biSizeImage</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biXPelsPerMeter</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biYPelsPerMeter</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biClrUsed</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dstruct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bih</name></expr></argument>, <argument><expr><name>biClrImportant</name></expr></argument>, <argument><expr><literal type="string">"lu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>ff_print_VIDEO_STREAM_CONFIG_CAPS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VIDEO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" VIDEO_STREAM_CONFIG_CAPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" guid\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_printGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>caps</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" VideoStandard\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>VideoStandard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" InputSize %ld\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>InputSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>InputSize</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinCroppingSize %ld\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinCroppingSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinCroppingSize</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaxCroppingSize %ld\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxCroppingSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxCroppingSize</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" CropGranularityX\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>CropGranularityX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" CropGranularityY\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>CropGranularityY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" CropAlignX\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>CropAlignX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" CropAlignY\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>CropAlignY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinOutputSize %ld\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinOutputSize</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaxOutputSize %ld\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxOutputSize</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" OutputGranularityX\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>OutputGranularityX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" OutputGranularityY\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>OutputGranularityY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" StretchTapsX\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>StretchTapsX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" StretchTapsY\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>StretchTapsY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" ShrinkTapsX\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>ShrinkTapsX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" ShrinkTapsY\t%d\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>ShrinkTapsY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinFrameInterval\t%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinFrameInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaxFrameInterval\t%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxFrameInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinBitsPerSecond\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinBitsPerSecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaxBitsPerSecond\t%ld\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaxBitsPerSecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_print_AUDIO_STREAM_CONFIG_CAPS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUDIO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" AUDIO_STREAM_CONFIG_CAPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" guid\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_printGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>caps</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinimumChannels\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinimumChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaximumChannels\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaximumChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" ChannelsGranularity\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>ChannelsGranularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinimumBitsPerSample\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinimumBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaximumBitsPerSample\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaximumBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" BitsPerSampleGranularity\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>BitsPerSampleGranularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MinimumSampleFrequency\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MinimumSampleFrequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" MaximumSampleFrequency\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>MaximumSampleFrequency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" SampleFrequencyGranularity\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>caps</name><operator>-&gt;</operator><name>SampleFrequencyGranularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_print_AM_MEDIA_TYPE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DSHOWDEBUG</name></expr></cpp:if>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" majortype\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_printGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>majortype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" subtype\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_printGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>subtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" bFixedSizeSamples\t%d\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>bFixedSizeSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" bTemporalCompression\t%d\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>bTemporalCompression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" lSampleSize\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>lSampleSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" formattype\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_printGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" pUnk\t%p\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>pUnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" cbFormat\t%lu\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>cbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" pbFormat\t%p\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" rcSource: left %ld top %ld right %ld bottom %ld\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" rcTarget: left %ld top %ld right %ld bottom %ld\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwBitRate: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwBitRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwBitErrorRate: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwBitErrorRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" AvgTimePerFrame: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_bih</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_VideoInfo2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VIDEOINFOHEADER2</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" rcSource: left %ld top %ld right %ld bottom %ld\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcSource</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" rcTarget: left %ld top %ld right %ld bottom %ld\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rcTarget</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwBitRate: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwBitRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwBitErrorRate: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwBitErrorRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" AvgTimePerFrame: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>AvgTimePerFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwInterlaceFlags: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwInterlaceFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwCopyProtectFlags: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwCopyProtectFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwPictAspectRatioX: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwPictAspectRatioX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwPictAspectRatioY: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwPictAspectRatioY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" dwReserved2: %lu\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>dwReserved2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_bih</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bmiHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>formattype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>FORMAT_WaveFormatEx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>fx</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>type</name><operator>-&gt;</operator><name>pbFormat</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" wFormatTag: %u\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" nChannels: %u\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" nSamplesPerSec: %lu\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" nAvgBytesPerSec: %lu\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" nBlockAlign: %u\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" wBitsPerSample: %u\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">" cbSize: %u\n"</literal></expr></argument>, <argument><expr><name><name>fx</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
