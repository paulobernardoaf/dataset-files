<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\fftools\ffplay.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/buffersrc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SDL.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SDL_thread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>program_name</name><index>[]</index></name> <init>= <expr><literal type="string">"ffplay"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>program_birth_year</name> <init>= <expr><literal type="number">2003</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_QUEUE_SIZE</name></cpp:macro> <cpp:value>(15 * 1024 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_FRAMES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNAL_CLOCK_MIN_FRAMES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNAL_CLOCK_MAX_FRAMES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDL_AUDIO_MIN_BUFFER_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDL_AUDIO_MAX_CALLBACKS_PER_SEC</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDL_VOLUME_STEP</name></cpp:macro> <cpp:value>(0.75)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SYNC_THRESHOLD_MIN</name></cpp:macro> <cpp:value>0.04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SYNC_THRESHOLD_MAX</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SYNC_FRAMEDUP_THRESHOLD</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_NOSYNC_THRESHOLD</name></cpp:macro> <cpp:value>10.0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_CORRECTION_PERCENT_MAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNAL_CLOCK_SPEED_MIN</name></cpp:macro> <cpp:value>0.900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNAL_CLOCK_SPEED_MAX</name></cpp:macro> <cpp:value>1.010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERNAL_CLOCK_SPEED_STEP</name></cpp:macro> <cpp:value>0.001</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_DIFF_AVG_NB</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_RATE</name></cpp:macro> <cpp:value>0.01</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_ARRAY_SIZE</name></cpp:macro> <cpp:value>(8 * 65536)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSOR_HIDE_DELAY</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ONEPASS_SUBTITLE_RENDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>sws_flags</name> <init>= <expr><name>SWS_BICUBIC</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>MyAVPacketList</name> <block>{
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MyAVPacketList</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>;</decl_stmt>
}</block></struct></type> <name>MyAVPacketList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PacketQueue</name> <block>{
<decl_stmt><decl><type><name>MyAVPacketList</name> <modifier>*</modifier></type><name>first_pkt</name></decl>, <modifier>*</modifier><name>last_pkt</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abort_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_cond</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
}</block></struct></type> <name>PacketQueue</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PICTURE_QUEUE_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBPICTURE_QUEUE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_QUEUE_SIZE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_QUEUE_SIZE</name></cpp:macro> <cpp:value>FFMAX(SAMPLE_QUEUE_SIZE, FFMAX(VIDEO_PICTURE_QUEUE_SIZE, SUBPICTURE_QUEUE_SIZE))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AudioParams</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sec</name></decl>;</decl_stmt>
}</block></struct></type> <name>AudioParams</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Clock</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>pts_drift</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>last_updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>queue_serial</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Clock</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Frame</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uploaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flip_v</name></decl>;</decl_stmt>
}</block></struct></type> <name>Frame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FrameQueue</name> <block>{
<decl_stmt><decl><type><name>Frame</name></type> <name><name>queue</name><index>[<expr><name>FRAME_QUEUE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>windex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rindex_shown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_cond</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>pktq</name></decl>;</decl_stmt>
}</block></struct></type> <name>FrameQueue</name>;</typedef>

<enum>enum <block>{
<decl><name>AV_SYNC_AUDIO_MASTER</name></decl>, 
<decl><name>AV_SYNC_VIDEO_MASTER</name></decl>,
<decl><name>AV_SYNC_EXTERNAL_CLOCK</name></decl>, 
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>Decoder</name> <block>{
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkt_serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_cond</name> <modifier>*</modifier></type><name>empty_queue_cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>start_pts_tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>next_pts_tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Thread</name> <modifier>*</modifier></type><name>decoder_tid</name></decl>;</decl_stmt>
}</block></struct></type> <name>Decoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VideoState</name> <block>{
<decl_stmt><decl><type><name>SDL_Thread</name> <modifier>*</modifier></type><name>read_tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>iformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abort_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_refresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_paused</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>queue_attachments_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seek_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seek_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_pause_return</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>realtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Clock</name></type> <name>audclk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Clock</name></type> <name>vidclk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Clock</name></type> <name>extclk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FrameQueue</name></type> <name>pictq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameQueue</name></type> <name>subpq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameQueue</name></type> <name>sampq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Decoder</name></type> <name>auddec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decoder</name></type> <name>viddec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decoder</name></type> <name>subdec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>av_sync_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>audio_clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_clock_serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>audio_diff_cum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>audio_diff_avg_coef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>audio_diff_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_diff_avg_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>audio_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketQueue</name></type> <name>audioq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_hw_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>audio_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>audio_buf1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>audio_buf_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>audio_buf1_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_buf_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>audio_write_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_volume</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>muted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AudioParams</name></name></type> <name>audio_src</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>AudioParams</name></name></type> <name>audio_filter_src</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>AudioParams</name></name></type> <name>audio_tgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_drops_early</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_drops_late</name></decl>;</decl_stmt>

<enum>enum <name>ShowMode</name> <block>{
<decl><name>SHOW_MODE_NONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>SHOW_MODE_VIDEO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>SHOW_MODE_WAVES</name></decl>, <decl><name>SHOW_MODE_RDFT</name></decl>, <decl><name>SHOW_MODE_NB</name></decl>
}</block> <decl><name>show_mode</name></decl>;</enum>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>sample_array</name><index>[<expr><name>SAMPLE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_array_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_i_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>rdft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdft_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>rdft_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>last_vis_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Texture</name> <modifier>*</modifier></type><name>vis_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Texture</name> <modifier>*</modifier></type><name>sub_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Texture</name> <modifier>*</modifier></type><name>vid_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subtitle_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>subtitle_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketQueue</name></type> <name>subtitleq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frame_timer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frame_last_returned_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frame_last_filter_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>video_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketQueue</name></type> <name>videoq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>max_frame_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>img_convert_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sub_convert_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>, <name>xleft</name>, <name>ytop</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>vfilter_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>in_video_filter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>out_video_filter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>in_audio_filter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>out_audio_filter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>agraph</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>last_video_stream</name></decl>, <name>last_audio_stream</name>, <name>last_subtitle_stream</name>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_cond</name> <modifier>*</modifier></type><name>continue_read_thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>VideoState</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>file_iformat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window_title</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_width</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>default_height</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_left</name> <init>= <expr><name>SDL_WINDOWPOS_CENTERED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>screen_top</name> <init>= <expr><name>SDL_WINDOWPOS_CENTERED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>audio_disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>video_disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>wanted_stream_spec</name><index>[<expr><name>AVMEDIA_TYPE_NB</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seek_by_bytes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>seek_interval</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>display_disable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>borderless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>alwaysontop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>startup_volume</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>show_status</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>av_sync_type</name> <init>= <expr><name>AV_SYNC_AUDIO_MASTER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>start_time</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>duration</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>genpts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lowres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decoder_reorder_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autoexit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exit_on_keydown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exit_on_mousedown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framedrop</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>infinite_buffer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>ShowMode</name></name></type> <name>show_mode</name> <init>= <expr><name>SHOW_MODE_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audio_codec_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subtitle_codec_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>video_codec_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rdftspeed</name> <init>= <expr><literal type="number">0.02</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cursor_last_shown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cursor_hidden</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vfilters_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nb_vfilters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>afilters</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>autorotate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>find_stream_info</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>filter_nbthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_full_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>audio_callback_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVPacket</name></type> <name>flush_pkt</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QUIT_EVENT</name></cpp:macro> <cpp:value>(SDL_USEREVENT + 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>SDL_Window</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SDL_Renderer</name> <modifier>*</modifier></type><name>renderer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SDL_RendererInfo</name></type> <name>renderer_info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SDL_AudioDeviceID</name></type> <name>audio_dev</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>TextureFormatEntry</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>texture_fmt</name></decl>;</decl_stmt>
}</block> <decl><name><name>sdl_texture_format_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_PIX_FMT_RGB8</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB332</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB444</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB444</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB555</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB555</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR555</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR555</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB565</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB565</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR565</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR565</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB24</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR24</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_0RGB32</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_0BGR32</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR888</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>RGB0</name></expr></argument>, <argument><expr><literal type="number">0BGR</literal></expr></argument>)</argument_list></call></expr>, <expr><name>SDL_PIXELFORMAT_RGBX8888</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>BGR0</name></expr></argument>, <argument><expr><literal type="number">0RGB</literal></expr></argument>)</argument_list></call></expr>, <expr><name>SDL_PIXELFORMAT_BGRX8888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB32</name></expr>, <expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_RGB32_1</name></expr>, <expr><name>SDL_PIXELFORMAT_RGBA8888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR32</name></expr>, <expr><name>SDL_PIXELFORMAT_ABGR8888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_BGR32_1</name></expr>, <expr><name>SDL_PIXELFORMAT_BGRA8888</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>SDL_PIXELFORMAT_IYUV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><name>SDL_PIXELFORMAT_YUY2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_UYVY422</name></expr>, <expr><name>SDL_PIXELFORMAT_UYVY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>SDL_PIXELFORMAT_UNKNOWN</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_add_vfilter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GROW_ARRAY</name><argument_list>(<argument><expr><name>vfilters_list</name></expr></argument>, <argument><expr><name>nb_vfilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vfilters_list</name><index>[<expr><name>nb_vfilters</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>int</name></type> <name>cmp_audio_fmts</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt1</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>channel_count1</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt2</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>channel_count2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel_count1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>channel_count2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>fmt1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>fmt2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>channel_count1</name> <operator>!=</operator> <name>channel_count2</name> <operator>||</operator> <name>fmt1</name> <operator>!=</operator> <name>fmt2</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>int64_t</name></type> <name>get_valid_channel_layout</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>channel_layout</name> <operator>&amp;&amp;</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>channel_layout</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_queue_put_private</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MyAVPacketList</name> <modifier>*</modifier></type><name>pkt1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkt1</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MyAVPacketList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <operator>*</operator><name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>==</operator> <operator>&amp;</operator><name>flush_pkt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>serial</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt1</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>last_pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name> <operator>=</operator> <name>pkt1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_pkt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pkt1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_pkt</name></name> <operator>=</operator> <name>pkt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nb_packets</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>duration</name></name> <operator>+=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_queue_put</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>packet_queue_put_private</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>!=</operator> <operator>&amp;</operator><name>flush_pkt</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_queue_put_nullpacket</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><name>pkt1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<return>return <expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_queue_init</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PacketQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>SDL_CreateMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateMutex(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>SDL_CreateCond</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateCond(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_queue_flush</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MyAVPacketList</name> <modifier>*</modifier></type><name>pkt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pkt1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pkt</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name></expr>;</init> <condition><expr><name>pkt</name></expr>;</condition> <incr><expr><name>pkt</name> <operator>=</operator> <name>pkt1</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pkt1</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_pkt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_queue_destroy</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyCond</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_queue_abort</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packet_queue_start</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put_private</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>packet_queue_get</name><parameter_list>(<parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MyAVPacketList</name> <modifier>*</modifier></type><name>pkt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pkt1</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name> <operator>=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>first_pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>last_pkt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nb_packets</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>duration</name></name> <operator>-=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>pkt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>serial</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>serial</name> <operator>=</operator> <name><name>pkt1</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pkt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>SDL_CondWait</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_init</name><parameter_list>(<parameter><decl><type><name>Decoder</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>SDL_cond</name> <modifier>*</modifier></type><name>empty_queue_cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Decoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>empty_queue_cond</name></name> <operator>=</operator> <name>empty_queue_cond</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pkt_serial</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decoder_decode_frame</name><parameter_list>(<parameter><decl><type><name>Decoder</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>serial</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>pkt_serial</name></name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>decoder_reorder_pts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>decoder_reorder_pts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts_tb</name></name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts_tb</name></name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pkt_serial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>empty_queue_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>packet_pending</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>packet_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>packet_queue_get</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pkt_serial</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>serial</name></name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>pkt_serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name><name>flush_pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avcodec_flush_buffers</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>start_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>next_pts_tb</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>start_pts_tb</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_decode_subtitle2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_frame</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>packet_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>got_frame</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Receive_frame and send_packet both returned EAGAIN, which is an API violation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>packet_pending</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_destroy</name><parameter_list>(<parameter><decl><type><name>Decoder</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_queue_unref_item</name><parameter_list>(<parameter><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vp</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_queue_init</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>pktq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FrameQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>SDL_CreateMutex</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateMutex(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>SDL_CreateCond</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateCond(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pktq</name></name> <operator>=</operator> <name>pktq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>FRAME_QUEUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>keep_last</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>keep_last</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_queue_destory</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>frame_queue_unref_item</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>SDL_DestroyMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyCond</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_queue_signal</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Frame</name> <modifier>*</modifier></type><name>frame_queue_peek</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name><operator>)</operator> <operator>%</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Frame</name> <modifier>*</modifier></type><name>frame_queue_peek_next</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Frame</name> <modifier>*</modifier></type><name>frame_queue_peek_last</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Frame</name> <modifier>*</modifier></type><name>frame_queue_peek_writable</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>pktq</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_CondWait</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pktq</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>windex</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Frame</name> <modifier>*</modifier></type><name>frame_queue_peek_readable</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>pktq</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_CondWait</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pktq</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name><operator>)</operator> <operator>%</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_queue_push</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>f</name><operator>-&gt;</operator><name>windex</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>windex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_queue_next</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>keep_last</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_queue_unref_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_queue_nb_remaining</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>frame_queue_last_pos</name><parameter_list>(<parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>rindex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>rindex_shown</name></name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>serial</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>pktq</name><operator>-&gt;</operator><name>serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decoder_abort</name><parameter_list>(<parameter><decl><type><name>Decoder</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>FrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_abort</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_signal</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_WaitThread</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>decoder_tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>decoder_tid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fill_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>rect</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&amp;&amp;</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_RenderFillRect</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realloc_texture</name><parameter_list>(<parameter><decl><type><name>SDL_Texture</name> <modifier>*</modifier><modifier>*</modifier></type><name>texture</name></decl></parameter>, <parameter><decl><type><name>Uint32</name></type> <name>new_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_height</name></decl></parameter>, <parameter><decl><type><name>SDL_BlendMode</name></type> <name>blendmode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>init_texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Uint32</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>access</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>texture</name> <operator>||</operator> <call><name>SDL_QueryTexture</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>access</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>new_width</name> <operator>!=</operator> <name>w</name> <operator>||</operator> <name>new_height</name> <operator>!=</operator> <name>h</name> <operator>||</operator> <name>new_format</name> <operator>!=</operator> <name>format</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>texture</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>texture</name> <operator>=</operator> <call><name>SDL_CreateTexture</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name>new_format</name></expr></argument>, <argument><expr><name>SDL_TEXTUREACCESS_STREAMING</name></expr></argument>, <argument><expr><name>new_width</name></expr></argument>, <argument><expr><name>new_height</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_SetTextureBlendMode</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>, <argument><expr><name>blendmode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>init_texture</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SDL_LockTexture</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pitch</name> <operator>*</operator> <name>new_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockTexture</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Created %dx%d texture with %s.\n"</literal></expr></argument>, <argument><expr><name>new_width</name></expr></argument>, <argument><expr><name>new_height</name></expr></argument>, <argument><expr><call><name>SDL_GetPixelFormatName</name><argument_list>(<argument><expr><name>new_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_display_rect</name><parameter_list>(<parameter><decl><type><name>SDL_Rect</name> <modifier>*</modifier></type><name>rect</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>scr_xleft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scr_ytop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scr_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scr_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pic_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pic_height</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>pic_sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>aspect_ratio</name> <init>= <expr><name>pic_sar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>aspect_ratio</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aspect_ratio</name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aspect_ratio</name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name>aspect_ratio</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><name>pic_width</name></expr></argument>, <argument><expr><name>pic_height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>height</name> <operator>=</operator> <name>scr_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>scr_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>scr_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>scr_width</name> <operator>-</operator> <name>width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>scr_height</name> <operator>-</operator> <name>height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>scr_xleft</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>scr_ytop</name> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_sdl_pix_fmt_and_blendmode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Uint32</name> <modifier>*</modifier></type><name>sdl_pix_fmt</name></decl></parameter>, <parameter><decl><type><name>SDL_BlendMode</name> <modifier>*</modifier></type><name>sdl_blendmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>sdl_blendmode</name> <operator>=</operator> <name>SDL_BLENDMODE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sdl_pix_fmt</name> <operator>=</operator> <name>SDL_PIXELFORMAT_UNKNOWN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32</name> <operator>||</operator>
<name>format</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator>
<name>format</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32</name> <operator>||</operator>
<name>format</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sdl_blendmode</name> <operator>=</operator> <name>SDL_BLENDMODE_BLEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sdl_texture_format_map</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name><name>sdl_texture_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sdl_pix_fmt</name> <operator>=</operator> <name><name>sdl_texture_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture_fmt</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>upload_texture</name><parameter_list>(<parameter><decl><type><name>SDL_Texture</name> <modifier>*</modifier><modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>img_convert_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Uint32</name></type> <name>sdl_pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_BlendMode</name></type> <name>sdl_blendmode</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_sdl_pix_fmt_and_blendmode</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdl_pix_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdl_blendmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>realloc_texture</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sdl_pix_fmt</name> <operator>==</operator> <name>SDL_PIXELFORMAT_UNKNOWN</name></expr> ?</condition><then> <expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr> </then><else>: <expr><name>sdl_pix_fmt</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>sdl_blendmode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>sdl_pix_fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_PIXELFORMAT_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>img_convert_ctx</name> <operator>=</operator> <call><name>sws_getCachedContext</name><argument_list>(<argument><expr><operator>*</operator><name>img_convert_ctx</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name>AV_PIX_FMT_BGRA</name></expr></argument>, <argument><expr><name>sws_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>img_convert_ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pitch</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_LockTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pixels</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sws_scale</name><argument_list>(<argument><expr><operator>*</operator><name>img_convert_ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot initialize the conversion context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>SDL_PIXELFORMAT_IYUV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateYUVTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateYUVTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mixed negative and positive linesizes are not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateTexture</name><argument_list>(<argument><expr><operator>*</operator><name>tex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_sdl_yuv_conversion_mode</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SDL_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SDL_YUV_CONVERSION_MODE</name></type> <name>mode</name> <init>= <expr><name>SDL_YUV_CONVERSION_AUTOMATIC</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SDL_YUV_CONVERSION_JPEG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SDL_YUV_CONVERSION_BT709</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_BT470BG</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_SMPTE170M</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_SMPTE240M</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SDL_YUV_CONVERSION_BT601</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_SetYUVConversionMode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>video_image_display</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>rect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>frame_queue_peek_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>frame_queue_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name><name>sp</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>start_display_time</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sp</name><operator>-&gt;</operator><name>uploaded</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pitch</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sp</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>sp</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>realloc_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>, <argument><expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>SDL_BLENDMODE_BLEND</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>sub_convert_ctx</name></name> <operator>=</operator> <call><name>sws_getCachedContext</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_convert_ctx</name></name></expr></argument>,
<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_PAL8</name></expr></argument>,
<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGRA</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>sub_convert_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot initialize the conversion context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_LockTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SDL_Rect</name> <operator>*</operator><operator>)</operator><name>sub_rect</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pixels</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sws_scale</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_convert_ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>uploaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>calculate_display_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>xleft</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>ytop</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>sar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vp</name><operator>-&gt;</operator><name>uploaded</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>upload_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vid_texture</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>img_convert_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>uploaded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>flip_v</name></name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_sdl_yuv_conversion_mode</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_RenderCopyEx</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>vid_texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vp</name><operator>-&gt;</operator><name>flip_v</name></name></expr> ?</condition><then> <expr><name>SDL_FLIP_VERTICAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sdl_yuv_conversion_mode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_ONEPASS_SUBTITLE_RENDER</name></expr></cpp:if>
<expr_stmt><expr><call><name>SDL_RenderCopy</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xratio</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>rect</name><operator>.</operator><name>w</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>yratio</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>rect</name><operator>.</operator><name>h</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SDL_Rect</name> <modifier>*</modifier></type><name>sub_rect</name> <init>= <expr><operator>(</operator><name>SDL_Rect</name><operator>*</operator><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>target</name> <init>= <expr><block>{<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name>xratio</name></expr>,
<expr><operator>.</operator><name>y</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>yratio</name></expr>,
<expr><operator>.</operator><name>w</name> <operator>=</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>xratio</name></expr>,
<expr><operator>.</operator><name>h</name> <operator>=</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>yratio</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_RenderCopy</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>, <argument><expr><name>sub_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>compute_mod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name><operator>%</operator><name>b</name> <operator>+</operator> <name>b</name></expr> </then><else>: <expr><name>a</name><operator>%</operator><name>b</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>video_audio_display</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_start</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ys</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nb_display_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>time_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rdft_bits</name></decl>, <decl><type ref="prev"/><name>nb_freq</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>rdft_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rdft_bits</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>rdft_bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name>nb_freq</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>rdft_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_display_channels</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>data_used</name><init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_WAVES</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>nb_freq</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>audio_write_buf_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>/=</operator> <name>n</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>audio_callback_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time_diff</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>audio_callback_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>-=</operator> <operator>(</operator><name>time_diff</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delay</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>data_used</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name>data_used</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>data_used</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_start</name><operator>=</operator> <name>x</name> <operator>=</operator> <call><name>compute_mod</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_array_index</name></name> <operator>-</operator> <name>delay</name> <operator>*</operator> <name>channels</name></expr></argument>, <argument><expr><name>SAMPLE_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_WAVES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>channels</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>SAMPLE_ARRAY_SIZE</name> <operator>+</operator> <name>x</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>SAMPLE_ARRAY_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>channels</name><operator>)</operator> <operator>%</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>channels</name><operator>)</operator> <operator>%</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>channels</name><operator>)</operator> <operator>%</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><name>a</name> <operator>-</operator> <name>d</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <name>score</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>^</operator> <name>c</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i_start</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_i_start</name></name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_i_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_WAVES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_SetRenderDrawColor</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>nb_display_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>*</operator> <literal type="number">9</literal><operator>)</operator> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_display_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_start</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ytop</name></name> <operator>+</operator> <name>ch</name> <operator>*</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>h2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>xleft</name></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>ys</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>SDL_SetRenderDrawColor</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_display_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ytop</name></name> <operator>+</operator> <name>ch</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>xleft</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>realloc_texture</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>, <argument><expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>SDL_BLENDMODE_NONE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_display_channels</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_display_channels</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdft_bits</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>rdft_bits</name></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_bits</name></name> <operator>=</operator> <name>rdft_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft_data</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_freq</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft_data</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate buffers for RDFT, switching to waves display\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>=</operator> <name>SHOW_MODE_WAVES</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>rect</name> <init>= <expr><block>{<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr>, <expr><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nb_display_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rdft_data</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>nb_freq</name> <operator>*</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_start</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>nb_freq</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>x</name><operator>-</operator><name>nb_freq</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>nb_freq</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>w</name> <operator>*</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_LockTexture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pixels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pitch</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>pitch</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>nb_freq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nb_display_channels</name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <call><name>hypot</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>a</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>-=</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pixels</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>SDL_UnlockTexture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_RenderCopy</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xleft</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_component_close</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>stream_index</name> <operator>&gt;=</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>codecpar</name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><call><name>decoder_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CloseAudioDevice</name><argument_list>(<argument><expr><name>audio_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf1_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>rdft</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>rdft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>rdft_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>decoder_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><call><name>decoder_abort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subdec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decoder_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subdec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_close</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_WaitThread</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>read_tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_component_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_component_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_component_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packet_queue_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>frame_queue_destory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_destory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_destory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_DestroyCond</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>img_convert_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_convert_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>vis_texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>vid_texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vid_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_exit</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>renderer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyRenderer</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_DestroyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>uninit_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vfilters_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>avformat_network_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_Quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_QUIET</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sigterm_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_default_window_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>rect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name> <init>= <expr><ternary><condition><expr><name>screen_width</name></expr> ?</condition><then> <expr><name>screen_width</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_height</name> <init>= <expr><ternary><condition><expr><name>screen_height</name></expr> ?</condition><then> <expr><name>screen_height</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>max_width</name> <operator>==</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>max_height</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>calculate_display_rect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_width</name></expr></argument>, <argument><expr><name>max_height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_width</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>default_height</name> <operator>=</operator> <name><name>rect</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_open</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>screen_width</name></expr> ?</condition><then> <expr><name>screen_width</name></expr> </then><else>: <expr><name>default_width</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <ternary><condition><expr><name>screen_height</name></expr> ?</condition><then> <expr><name>screen_height</name></expr> </then><else>: <expr><name>default_height</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window_title</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>window_title</name> <operator>=</operator> <name>input_filename</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowTitle</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_SetWindowSize</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowPosition</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>screen_left</name></expr></argument>, <argument><expr><name>screen_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_full_screen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_SetWindowFullscreen</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>SDL_WINDOW_FULLSCREEN_DESKTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_ShowWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>video_display</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SDL_SetRenderDrawColor</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_RenderClear</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>!=</operator> <name>SHOW_MODE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_audio_display</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_image_display</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_RenderPresent</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_clock</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>queue_serial</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NAN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>pts</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>pts_drift</name></name> <operator>+</operator> <name>time</name> <operator>-</operator> <operator>(</operator><name>time</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>last_updated</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>speed</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_clock_at</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last_updated</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pts_drift</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_clock</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_clock_at</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_clock_speed</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>speed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>get_clock</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_clock</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>queue_serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>queue_serial</name></name> <operator>=</operator> <name>queue_serial</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_clock_to_slave</name><parameter_list>(<parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Clock</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>clock</name> <init>= <expr><call><name>get_clock</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>slave_clock</name> <init>= <expr><call><name>get_clock</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>slave_clock</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isnan</name><argument_list>(<argument><expr><name>clock</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>clock</name> <operator>-</operator> <name>slave_clock</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>AV_NOSYNC_THRESHOLD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>slave_clock</name></expr></argument>, <argument><expr><name><name>slave</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_master_sync_type</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>av_sync_type</name></name> <operator>==</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_SYNC_VIDEO_MASTER</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AV_SYNC_AUDIO_MASTER</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>av_sync_type</name></name> <operator>==</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_SYNC_AUDIO_MASTER</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AV_SYNC_EXTERNAL_CLOCK</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AV_SYNC_EXTERNAL_CLOCK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>get_master_clock</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SYNC_VIDEO_MASTER</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SYNC_AUDIO_MASTER</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_external_clock_speed</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>nb_packets</name></name> <operator>&lt;=</operator> <name>EXTERNAL_CLOCK_MIN_FRAMES</name> <operator>||</operator>
<name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>nb_packets</name></name> <operator>&lt;=</operator> <name>EXTERNAL_CLOCK_MIN_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_clock_speed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>EXTERNAL_CLOCK_SPEED_MIN</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>speed</name></name> <operator>-</operator> <name>EXTERNAL_CLOCK_SPEED_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>nb_packets</name></name> <operator>&gt;</operator> <name>EXTERNAL_CLOCK_MAX_FRAMES</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>nb_packets</name></name> <operator>&gt;</operator> <name>EXTERNAL_CLOCK_MAX_FRAMES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_clock_speed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>EXTERNAL_CLOCK_SPEED_MAX</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>speed</name></name> <operator>+</operator> <name>EXTERNAL_CLOCK_SPEED_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>speed</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>speed</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>speed</name> <operator>!=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_clock_speed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><name>speed</name> <operator>+</operator> <name>EXTERNAL_CLOCK_SPEED_STEP</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>speed</name><operator>)</operator> <operator>/</operator> <call><name>fabs</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>speed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_seek</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seek_by_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>seek_req</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_rel</name></name> <operator>=</operator> <name>rel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVSEEK_FLAG_BYTE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seek_by_bytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>|=</operator> <name>AVSEEK_FLAG_BYTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_req</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondSignal</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_toggle_pause</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>+=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>last_updated</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>read_pause_return</name></name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>, <argument><expr><call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audclk</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_pause</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>stream_toggle_pause</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_mute</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>muted</name></name> <operator>=</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>muted</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_volume</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>volume_level</name> <init>= <expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">20</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>SDL_MIX_MAXVOLUME</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1000.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_volume</name> <init>= <expr><call><name>lrint</name><argument_list>(<argument><expr><name>SDL_MIX_MAXVOLUME</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>volume_level</name> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>/</operator> <literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>==</operator> <name>new_volume</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>+</operator> <name>sign</name><operator>)</operator></expr> </then><else>: <expr><name>new_volume</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SDL_MIX_MAXVOLUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>step_to_next_frame</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_toggle_pause</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>compute_target_delay</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sync_threshold</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>sync_threshold</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>AV_SYNC_THRESHOLD_MIN</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>AV_SYNC_THRESHOLD_MAX</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>is</name><operator>-&gt;</operator><name>max_frame_duration</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <operator>-</operator><name>sync_threshold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>delay</name> <operator>+</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>sync_threshold</name> <operator>&amp;&amp;</operator> <name>delay</name> <operator>&gt;</operator> <name>AV_SYNC_FRAMEDUP_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>delay</name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>sync_threshold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"video: delay=%0.3f A-V=%f\n"</literal></expr></argument>,
<argument><expr><name>delay</name></expr></argument>, <argument><expr><operator>-</operator><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>vp_duration</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>Frame</name> <modifier>*</modifier></type><name>nextvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>serial</name></name> <operator>==</operator> <name><name>nextvp</name><operator>-&gt;</operator><name>serial</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name> <init>= <expr><name><name>nextvp</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>vp</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>duration</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>duration</name> <operator>&gt;</operator> <name><name>is</name><operator>-&gt;</operator><name>max_frame_duration</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>vp</name><operator>-&gt;</operator><name>duration</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>duration</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_video_pts</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sync_clock_to_slave</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>video_refresh</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>remaining_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>&amp;&amp;</operator> <call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_SYNC_EXTERNAL_CLOCK</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>realtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_external_clock_speed</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_disable</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>!=</operator> <name>SHOW_MODE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>||</operator> <name><name>is</name><operator>-&gt;</operator><name>last_vis_time</name></name> <operator>+</operator> <name>rdftspeed</name> <operator>&lt;</operator> <name>time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>video_display</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_vis_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>remaining_time</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>remaining_time</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>last_vis_time</name></name> <operator>+</operator> <name>rdftspeed</name> <operator>-</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition> <block>{<block_content>
<label><name>retry</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>last_duration</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lastvp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>lastvp</name> <operator>=</operator> <call><name>frame_queue_peek_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>frame_queue_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>serial</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>serial</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>frame_queue_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lastvp</name><operator>-&gt;</operator><name>serial</name></name> <operator>!=</operator> <name><name>vp</name><operator>-&gt;</operator><name>serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>display</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>last_duration</name> <operator>=</operator> <call><name>vp_duration</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>lastvp</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>compute_target_delay</name><argument_list>(<argument><expr><name>last_duration</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>time</name><operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1000000.0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&lt;</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>+</operator> <name>delay</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>remaining_time</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>+</operator> <name>delay</name> <operator>-</operator> <name>time</name></expr></argument>, <argument><expr><operator>*</operator><name>remaining_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>display</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>time</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>&gt;</operator> <name>AV_SYNC_THRESHOLD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>pictq</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_video_pts</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>pictq</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>nextvp</name> <init>= <expr><call><name>frame_queue_peek_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>vp_duration</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>nextvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>step</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>framedrop</name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>framedrop</name> <operator>&amp;&amp;</operator> <call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_SYNC_VIDEO_MASTER</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>time</name> <operator>&gt;</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_timer</name></name> <operator>+</operator> <name>duration</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_drops_late</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>frame_queue_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <call><name>frame_queue_peek_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>serial</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitleq</name><operator>.</operator><name>serial</name></name>
<operator>||</operator> <operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>pts</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>sp</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>end_display_time</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>sp2</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>pts</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>sp2</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>sp2</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>start_display_time</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>uploaded</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_LockTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SDL_Rect</name> <operator>*</operator><operator>)</operator><name>sub_rect</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pixels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pixels</name> <operator>+=</operator> <name>pitch</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>SDL_UnlockTexture</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sub_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>frame_queue_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>frame_queue_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>step</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stream_toggle_pause</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<label><name>display</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_disable</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>pictq</name><operator>.</operator><name>rindex_shown</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_display</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aqsize</name></decl>, <decl><type ref="prev"/><name>vqsize</name></decl>, <decl><type ref="prev"/><name>sqsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>av_diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_time</name> <operator>||</operator> <operator>(</operator><name>cur_time</name> <operator>-</operator> <name>last_time</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">30000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aqsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vqsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sqsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aqsize</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vqsize</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sqsize</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitleq</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>av_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_diff</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_diff</name> <operator>=</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_diff</name> <operator>=</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
<argument><expr><literal type="string">"%7.2f %s:%7.3f fd=%4d aq=%5dKB vq=%5dKB sq=%5dB f=%"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">" \r"</literal></expr></argument>,
<argument><expr><call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>video_st</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"A-V"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr> ?</condition><then> <expr><literal type="string">"M-V"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr> ?</condition><then> <expr><literal type="string">"M-A"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><name>av_diff</name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>frame_drops_early</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_drops_late</name></name></expr></argument>,
<argument><expr><name>aqsize</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><name>vqsize</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><name>sqsize</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr> ?</condition><then> <expr><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_dts</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr> ?</condition><then> <expr><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>pts_correction_num_faulty_pts</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_status</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>AV_LOG_INFO</name> <operator>&gt;</operator> <call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_time</name> <operator>=</operator> <name>cur_time</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>queue_picture</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src_frame</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"frame_type=%c pts=%0.3f\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>src_frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>vp</name> <operator>=</operator> <call><name>frame_queue_peek_writable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>sar</name></name> <operator>=</operator> <name><name>src_frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>uploaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src_frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src_frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>src_frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_default_window_size</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>sar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>src_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_video_frame</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>got_picture</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>got_picture</name> <operator>=</operator> <call><name>decoder_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_picture</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dpts</name> <init>= <expr><name>NAN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dpts</name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_guess_sample_aspect_ratio</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framedrop</name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>framedrop</name> <operator>&amp;&amp;</operator> <call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_SYNC_VIDEO_MASTER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><name>dpts</name> <operator>-</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AV_NOSYNC_THRESHOLD</name> <operator>&amp;&amp;</operator>
<name>diff</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_last_filter_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>vidclk</name><operator>.</operator><name>serial</name></name> <operator>&amp;&amp;</operator>
<name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>nb_packets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_drops_early</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_picture</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>got_picture</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_filtergraph</name><parameter_list>(<parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filtergraph</name></decl></parameter>,
<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>source_ctx</name></decl></parameter>, <parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>sink_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_filters</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>nb_filters</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterInOut</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inputs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filtergraph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>outputs</name> <operator>=</operator> <call><name>avfilter_inout_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inputs</name> <operator>=</operator> <call><name>avfilter_inout_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outputs</name> <operator>||</operator> <operator>!</operator><name>inputs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outputs</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><operator>-&gt;</operator><name>filter_ctx</name></name> <operator>=</operator> <name>source_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><operator>-&gt;</operator><name>pad_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inputs</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inputs</name><operator>-&gt;</operator><name>filter_ctx</name></name> <operator>=</operator> <name>sink_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inputs</name><operator>-&gt;</operator><name>pad_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inputs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_parse_ptr</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>filtergraph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_link</name><argument_list>(<argument><expr><name>source_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sink_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>-</operator> <name>nb_filters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFilterContext</name><operator>*</operator></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <name>nb_filters</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_config</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avfilter_inout_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_video_filters</name><parameter_list>(<parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfilters</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sdl_texture_format_map</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sws_flags_str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffersrc_args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filt_src</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filt_out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>fr</name> <init>= <expr><call><name>av_guess_frame_rate</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_pix_fmts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>renderer_info</name><operator>.</operator><name>num_texture_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sdl_texture_format_map</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>renderer_info</name><operator>.</operator><name>texture_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>sdl_texture_format_map</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>texture_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pix_fmts</name><index>[<expr><name>nb_pix_fmts</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>sdl_texture_format_map</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>format</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pix_fmts</name><index>[<expr><name>nb_pix_fmts</name></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>sws_dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"sws_flags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sws_flags_str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>scale_sws_opts</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>sws_flags_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffersrc_args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffersrc_args</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>fr</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buffersrc_args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffersrc_args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">":frame_rate=%d/%d"</literal></expr></argument>, <argument><expr><name><name>fr</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fr</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filt_src</name></expr></argument>,
<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"ffplay_buffer"</literal></expr></argument>, <argument><expr><name>buffersrc_args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>graph</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filt_out</name></expr></argument>,
<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"buffersink"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"ffplay_buffersink"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int_list</name><argument_list>(<argument><expr><name>filt_out</name></expr></argument>, <argument><expr><literal type="string">"pix_fmts"</literal></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_filter</name> <operator>=</operator> <name>filt_out</name></expr>;</expr_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_FILT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AVFilterContext *filt_ctx; ret = avfilter_graph_create_filter(&amp;filt_ctx, avfilter_get_by_name(name), "ffplay_" name, arg, NULL, graph); if (ret &lt; 0) goto fail; ret = avfilter_link(filt_ctx, 0, last_filter, 0); if (ret &lt; 0) goto fail; last_filter = filt_ctx; } while (0)</cpp:value></cpp:define>















<if_stmt><if>if <condition>(<expr><name>autorotate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><call><name>get_rotation</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">90</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INSERT_FILT</name><argument_list>(<argument><expr><literal type="string">"transpose"</literal></expr></argument>, <argument><expr><literal type="string">"clock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">180</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INSERT_FILT</name><argument_list>(<argument><expr><literal type="string">"hflip"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_FILT</name><argument_list>(<argument><expr><literal type="string">"vflip"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name> <operator>-</operator> <literal type="number">270</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>INSERT_FILT</name><argument_list>(<argument><expr><literal type="string">"transpose"</literal></expr></argument>, <argument><expr><literal type="string">"cclock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>rotate_buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rotate_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rotate_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f*PI/180"</literal></expr></argument>, <argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_FILT</name><argument_list>(<argument><expr><literal type="string">"rotate"</literal></expr></argument>, <argument><expr><name>rotate_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_filtergraph</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>vfilters</name></expr></argument>, <argument><expr><name>filt_src</name></expr></argument>, <argument><expr><name>last_filter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>in_video_filter</name></name> <operator>=</operator> <name>filt_src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>out_video_filter</name></name> <operator>=</operator> <name>filt_out</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>configure_audio_filters</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>afilters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_output_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sample_rates</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>channel_layouts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>channels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filt_asrc</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filt_asink</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>aresample_swr_opts</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>asrc_args</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name> <operator>=</operator> <call><name>avfilter_graph_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>agraph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <name>filter_nbthreads</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>swr_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>aresample_swr_opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aresample_swr_opts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s=%s:"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>aresample_swr_opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>aresample_swr_opts</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>aresample_swr_opts</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>, <argument><expr><literal type="string">"aresample_swr_opts"</literal></expr></argument>, <argument><expr><name>aresample_swr_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>asrc_args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asrc_args</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"sample_rate=%d:sample_fmt=%s:channels=%d:time_base=%d/%d"</literal></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channels</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>asrc_args</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asrc_args</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>ret</name></expr></argument>,
<argument><expr><literal type="string">":channel_layout=0x%"</literal><name>PRIx64</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filt_asrc</name></expr></argument>,
<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"abuffer"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ffplay_abuffer"</literal></expr></argument>,
<argument><expr><name>asrc_args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_graph_create_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filt_asink</name></expr></argument>,
<argument><expr><call><name>avfilter_get_by_name</name><argument_list>(<argument><expr><literal type="string">"abuffersink"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ffplay_abuffersink"</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int_list</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"sample_fmts"</literal></expr></argument>, <argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_NONE</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"all_channel_counts"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_output_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>channel_layouts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channels</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_rates</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"all_channel_counts"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int_list</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"channel_layouts"</literal></expr></argument>, <argument><expr><name>channel_layouts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int_list</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"channel_counts"</literal></expr></argument> , <argument><expr><name>channels</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_int_list</name><argument_list>(<argument><expr><name>filt_asink</name></expr></argument>, <argument><expr><literal type="string">"sample_rates"</literal></expr></argument> , <argument><expr><name>sample_rates</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_filtergraph</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>, <argument><expr><name>afilters</name></expr></argument>, <argument><expr><name>filt_asrc</name></expr></argument>, <argument><expr><name>filt_asink</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>in_audio_filter</name></name> <operator>=</operator> <name>filt_asrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>out_audio_filter</name></name> <operator>=</operator> <name>filt_asink</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>audio_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>af</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>last_serial</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dec_channel_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconfigure</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>got_frame</name> <operator>=</operator> <call><name>decoder_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tb</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr_stmt><expr><name>dec_channel_layout</name> <operator>=</operator> <call><name>get_valid_channel_layout</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reconfigure</name> <operator>=</operator>
<call><name>cmp_audio_fmts</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name> <operator>!=</operator> <name>dec_channel_layout</name> <operator>||</operator>
<name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>
<name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name> <operator>!=</operator> <name>last_serial</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reconfigure</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dec_channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Audio frame changed from rate:%d ch:%d fmt:%s layout:%s serial:%d to rate:%d ch:%d fmt:%s layout:%s serial:%d\n"</literal></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>last_serial</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name> <operator>=</operator> <name>dec_channel_layout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_serial</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_audio_filters</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>afilters</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>in_audio_filter</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_buffersink_get_frame_flags</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>out_audio_filter</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>av_buffersink_get_time_base</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>out_audio_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>af</name> <operator>=</operator> <call><name>frame_queue_peek_writable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>af</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <macro><name>av_q2d</name><argument_list>(<argument>(AVRational){frame-&gt;nb_samples</argument>, <argument>frame-&gt;sample_rate}</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>frame_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>serial</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>finished</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition>;</do>
<label><name>the_end</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>agraph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decoder_start</name><parameter_list>(<parameter><decl><type><name>Decoder</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_start</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>decoder_tid</name></name> <operator>=</operator> <call><name>SDL_CreateThread</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>thread_name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>decoder_tid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateThread(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name> <init>= <expr><call><name>av_guess_frame_rate</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>filt_out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>filt_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>last_format</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_serial</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_vfilter_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_video_frame</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><name>last_w</name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name>
<operator>||</operator> <name>last_h</name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name>
<operator>||</operator> <name>last_format</name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name>
<operator>||</operator> <name>last_serial</name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name>
<operator>||</operator> <name>last_vfilter_idx</name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>vfilter_idx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Video frame changed from size:%dx%d format:%s serial:%d to size:%dx%d format:%s serial:%d\n"</literal></expr></argument>,
<argument><expr><name>last_w</name></expr></argument>, <argument><expr><name>last_h</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>last_format</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>last_serial</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>graph</name> <operator>=</operator> <call><name>avfilter_graph_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <name>filter_nbthreads</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_video_filters</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vfilters_list</name></expr> ?</condition><then> <expr><name><name>vfilters_list</name><index>[<expr><name><name>is</name><operator>-&gt;</operator><name>vfilter_idx</name></name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FF_QUIT_EVENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_PushEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filt_in</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>in_video_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>filt_out</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>out_video_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_w</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_h</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_format</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_serial</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_vfilter_idx</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>vfilter_idx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_rate</name> <operator>=</operator> <call><name>av_buffersink_get_frame_rate</name><argument_list>(<argument><expr><name>filt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersrc_add_frame</name><argument_list>(<argument><expr><name>filt_in</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_last_returned_time</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffersink_get_frame_flags</name><argument_list>(<argument><expr><name>filt_out</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>finished</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_last_filter_delay</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>frame_last_returned_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>frame_last_filter_delay</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>AV_NOSYNC_THRESHOLD</name> <operator>/</operator> <literal type="number">10.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>frame_last_filter_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>av_buffersink_get_time_base</name><argument_list>(<argument><expr><name>filt_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>frame_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>frame_rate</name><operator>.</operator><name>den</name></name></expr> ?</condition><then> <macro><name>av_q2d</name><argument_list>(<argument>(AVRational){frame_rate.den</argument>, <argument>frame_rate.num}</argument>)</argument_list></macro> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>queue_picture</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>serial</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>pkt_serial</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<label><name>the_end</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr_stmt><expr><call><name>avfilter_graph_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_subtitle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pts</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>frame_queue_peek_writable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>got_subtitle</name> <operator>=</operator> <call><name>decoder_decode_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subdec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_subtitle</name> <operator>&amp;&amp;</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>format</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>sub</name><operator>.</operator><name>pts</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subdec</name><operator>.</operator><name>pkt_serial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subdec</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subdec</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>uploaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>frame_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>got_subtitle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sp</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sample_display</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>samples_size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SAMPLE_ARRAY_SIZE</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>sample_array_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>sample_array</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>sample_array_index</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>sample_array_index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>sample_array_index</name></name> <operator>&gt;=</operator> <name>SAMPLE_ARRAY_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>sample_array_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>synchronize_audio</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wanted_nb_samples</name> <init>= <expr><name>nb_samples</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_master_sync_type</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>avg_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_nb_samples</name></decl>, <decl><type ref="prev"/><name>max_nb_samples</name></decl>;</decl_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AV_NOSYNC_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_cum</name></name> <operator>=</operator> <name>diff</name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_coef</name></name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_diff_cum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_count</name></name> <operator>&lt;</operator> <name>AUDIO_DIFF_AVG_NB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>avg_diff</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_diff_cum</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_coef</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>avg_diff</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_diff_threshold</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wanted_nb_samples</name> <operator>=</operator> <name>nb_samples</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>diff</name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>freq</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>min_nb_samples</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nb_samples</name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>SAMPLE_CORRECTION_PERCENT_MAX</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>max_nb_samples</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nb_samples</name> <operator>*</operator> <operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>SAMPLE_CORRECTION_PERCENT_MAX</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_nb_samples</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>wanted_nb_samples</name></expr></argument>, <argument><expr><name>min_nb_samples</name></expr></argument>, <argument><expr><name>max_nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"diff=%f adiff=%f sample_diff=%d apts=%0.3f %f\n"</literal></expr></argument>,
<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>avg_diff</name></expr></argument>, <argument><expr><name>wanted_nb_samples</name> <operator>-</operator> <name>nb_samples</name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_cum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>wanted_nb_samples</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>audio_decode_frame</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>, <decl><type ref="prev"/><name>resampled_data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dec_channel_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av_unused</name> <name>double</name></type> <name>audio_clock0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wanted_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frame</name> <modifier>*</modifier></type><name>af</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>audio_callback_time</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1000000LL</literal> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_hw_buf_size</name></name> <operator>/</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>bytes_per_sec</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_usleep</name> <argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>af</name> <operator>=</operator> <call><name>frame_queue_peek_readable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frame_queue_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>af</name><operator>-&gt;</operator><name>serial</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>serial</name></name></expr>)</condition>;</do>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,
<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_channel_layout</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>&amp;&amp;</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr> </then><else>: <expr><call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_nb_samples</name> <operator>=</operator> <call><name>synchronize_audio</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>fmt</name></name> <operator>||</operator>
<name>dec_channel_layout</name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>channel_layout</name></name> <operator>||</operator>
<name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>freq</name></name> <operator>||</operator>
<operator>(</operator><name>wanted_nb_samples</name> <operator>!=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name> <operator>=</operator> <call><name>swr_alloc_set_opts</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name></expr></argument>,
<argument><expr><name>dec_channel_layout</name></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name> <operator>||</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz %s %d channels!\n"</literal></expr></argument>,
<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>channel_layout</name></name> <operator>=</operator> <name>dec_channel_layout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_src</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_count</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>wanted_nb_samples</name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name> <operator>/</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_size</name> <init>= <expr><call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"av_samples_get_buffer_size() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wanted_nb_samples</name> <operator>!=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>swr_set_compensation</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>wanted_nb_samples</name> <operator>-</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name> <operator>/</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name>wanted_nb_samples</name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>freq</name></name> <operator>/</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"swr_set_compensation() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf1_size</name></name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf1</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"swr_convert() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>==</operator> <name>out_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"audio buffer is probably too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>swr_init</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>swr_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>resampled_data_size</name> <operator>=</operator> <name>len2</name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>channels</name></name> <operator>*</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>resampled_data_size</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>audio_clock0</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>af</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>/</operator> <name><name>af</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock_serial</name></name> <operator>=</operator> <name><name>af</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>last_clock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"audio: delay=%0.3f clock=%0.3f clock0=%0.3f\n"</literal></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name> <operator>-</operator> <name>last_clock</name></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name></expr></argument>, <argument><expr><name>audio_clock0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_clock</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>resampled_data_size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>sdl_audio_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>Uint8</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_size</name></decl>, <decl><type ref="prev"/><name>len1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>audio_callback_time</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name> <operator>&gt;=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>audio_size</name> <operator>=</operator> <call><name>audio_decode_frame</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name> <operator>=</operator> <name>SDL_AUDIO_MIN_BUFFER_SIZE</name> <operator>/</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>frame_size</name></name> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>!=</operator> <name>SHOW_MODE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_sample_display</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name></expr></argument>, <argument><expr><name>audio_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name> <operator>=</operator> <name>audio_size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>muted</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>==</operator> <name>SDL_MIX_MAXVOLUME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>muted</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_MixAudioFormat</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>is</name><operator>-&gt;</operator><name>audio_buf</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name></expr></argument>, <argument><expr><name>AUDIO_S16SYS</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name> <operator>+=</operator> <name>len1</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_write_buf_size</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_clock_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_hw_buf_size</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_write_buf_size</name></name><operator>)</operator> <operator>/</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>bytes_per_sec</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock_serial</name></name></expr></argument>, <argument><expr><name>audio_callback_time</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sync_clock_to_slave</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>audio_open</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>wanted_channel_layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wanted_nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wanted_sample_rate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>AudioParams</name></name> <modifier>*</modifier></type><name>audio_hw_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_AudioSpec</name></type> <name>wanted_spec</name></decl>, <decl><type ref="prev"/><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>next_nb_channels</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>next_sample_rates</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">96000</literal></expr>, <expr><literal type="number">192000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_sample_rate_idx</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>next_sample_rates</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>SDL_getenv</name><argument_list>(<argument><expr><literal type="string">"SDL_AUDIO_CHANNELS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wanted_nb_channels</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_channel_layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name>wanted_nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wanted_channel_layout</name> <operator>||</operator> <name>wanted_nb_channels</name> <operator>!=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>wanted_channel_layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wanted_channel_layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name>wanted_nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wanted_channel_layout</name> <operator>&amp;=</operator> <operator>~</operator><name>AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wanted_nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>wanted_channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>wanted_nb_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name>wanted_sample_rate</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wanted_spec</name><operator>.</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample rate or channel count!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>next_sample_rate_idx</name> <operator>&amp;&amp;</operator> <name><name>next_sample_rates</name><index>[<expr><name>next_sample_rate_idx</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>wanted_spec</name><operator>.</operator><name>freq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next_sample_rate_idx</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>AUDIO_S16SYS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>silence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>SDL_AUDIO_MIN_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name> <operator>/</operator> <name>SDL_AUDIO_MAX_CALLBACKS_PER_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>sdl_audio_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>userdata</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>audio_dev</name> <operator>=</operator> <call><name>SDL_OpenAudioDevice</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wanted_spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><name>SDL_AUDIO_ALLOW_FREQUENCY_CHANGE</name> <operator>|</operator> <name>SDL_AUDIO_ALLOW_CHANNELS_CHANGE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SDL_OpenAudio (%d channels, %d Hz): %s\n"</literal></expr></argument>,
<argument><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>next_nb_channels</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>next_sample_rates</name><index>[<expr><name>next_sample_rate_idx</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name>wanted_nb_channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wanted_spec</name><operator>.</operator><name>freq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No more combinations to try, audio open failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wanted_channel_layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>wanted_spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>AUDIO_S16SYS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"SDL advised audio format %d is not supported!\n"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>channels</name></name> <operator>!=</operator> <name><name>wanted_spec</name><operator>.</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wanted_channel_layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wanted_channel_layout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"SDL advised channel count %d is not supported!\n"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>freq</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>freq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>wanted_channel_layout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>bytes_per_sec</name></name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>audio_hw_params</name><operator>-&gt;</operator><name>bytes_per_sec</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>audio_hw_params</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"av_samples_get_buffer_size failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>spec</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_component_open</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>forced_codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>, <decl><type ref="prev"/><name>nb_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_lowres</name> <init>= <expr><name>lowres</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>stream_index</name> <operator>&gt;=</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avctx</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr> :</case> <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_audio_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt> <expr_stmt><expr><name>forced_codec_name</name> <operator>=</operator> <name>audio_codec_name</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_subtitle_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt> <expr_stmt><expr><name>forced_codec_name</name> <operator>=</operator> <name>subtitle_codec_name</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr> :</case> <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_video_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt> <expr_stmt><expr><name>forced_codec_name</name> <operator>=</operator> <name>video_codec_name</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>forced_codec_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder_by_name</name><argument_list>(<argument><expr><name>forced_codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forced_codec_name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"No codec could be found with name '%s'\n"</literal></expr></argument>, <argument><expr><name>forced_codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"No decoder could be found for codec %s\n"</literal></expr></argument>, <argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_lowres</name> <operator>&gt;</operator> <name><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,
<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_lowres</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>max_lowres</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name> <operator>=</operator> <name>stream_lowres</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fast</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG2_FAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>filter_codec_opts</name><argument_list>(<argument><expr><name>codec_opts</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_lowres</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"lowres"</literal></expr></argument>, <argument><expr><name>stream_lowres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"refcounted_frames"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>=</operator> <name>AVDISCARD_DEFAULT</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>sink</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>get_valid_channel_layout</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_filter_src</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>configure_audio_filters</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>afilters</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sink</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>out_audio_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>av_buffersink_get_sample_rate</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <call><name>av_buffersink_get_channels</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channel_layout</name> <operator>=</operator> <call><name>av_buffersink_get_channel_layout</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>channel_layout</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>audio_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>channel_layout</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_hw_buf_size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_src</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_buf_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_coef</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>AUDIO_DIFF_AVG_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_avg_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_diff_threshold</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>audio_hw_buf_size</name></name><operator>)</operator> <operator>/</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_tgt</name><operator>.</operator><name>bytes_per_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AVFMT_NOBINSEARCH</name> <operator>|</operator> <name>AVFMT_NOGENSEARCH</name> <operator>|</operator> <name>AVFMT_NO_BYTE_SEEK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>read_seek</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>start_pts</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_st</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>start_pts_tb</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decoder_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name></name></expr></argument>, <argument><expr><name>audio_thread</name></expr></argument>, <argument><expr><literal type="string">"audio_decoder"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_PauseAudioDevice</name><argument_list>(<argument><expr><name>audio_dev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decoder_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name></name></expr></argument>, <argument><expr><name>video_thread</name></expr></argument>, <argument><expr><literal type="string">"video_decoder"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>queue_attachments_req</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subdec</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decoder_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subdec</name></name></expr></argument>, <argument><expr><name>subtitle_thread</name></expr></argument>, <argument><expr><literal type="string">"subtitle_decoder"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<goto>goto <name>out</name>;</goto>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_interrupt_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>is</name><operator>-&gt;</operator><name>abort_request</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_has_enough_packets</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>PacketQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>stream_id</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
<name><name>queue</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name><operator>)</operator> <operator>||</operator>
<name><name>queue</name><operator>-&gt;</operator><name>nb_packets</name></name></expr></argument> &gt;</argument_list></name> <name>MIN_FRAMES</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>duration</name></name> <operator>||</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>queue</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_realtime</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"sdp"</literal></expr></argument>)</argument_list></call></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"rtp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"udp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call>
<operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>read_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_NB</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><name>pkt1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>stream_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkt_in_play_range</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDL_mutex</name> <modifier>*</modifier></type><name>wait_mutex</name> <init>= <expr><call><name>SDL_CreateMutex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scan_all_pmts_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_ts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wait_mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateMutex(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st_index</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>st_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_video_stream</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_audio_stream</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_subtitle_stream</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>interrupt_callback</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>decode_interrupt_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>interrupt_callback</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_all_pmts_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>iformat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scan_all_pmts_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>genpts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AVFMT_FLAG_GENPTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_format_inject_global_side_data</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>find_stream_info</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>setup_find_stream_info_opts</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>codec_opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_nb_streams</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orig_nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%s: could not find codec parameters\n"</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>seek_by_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seek_by_bytes</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_DISCONT</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"ogg"</literal></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>max_frame_duration</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_TS_DISCONT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10.0</literal></expr> </then><else>: <expr><literal type="number">3600.0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window_title</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ic</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>window_title</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s - %s"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp</name> <operator>+=</operator> <name><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_seek_file</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT64_MIN</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: could not seek to position %0.3f\n"</literal></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>timestamp</name> <operator>/</operator> <name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>realtime</name></name> <operator>=</operator> <call><name>is_realtime</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_status</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wanted_stream_spec</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>st_index</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>avformat_match_stream_specifier</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>wanted_stream_spec</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st_index</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVMEDIA_TYPE_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wanted_stream_spec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>st_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stream specifier %s does not match any %s stream\n"</literal></expr></argument>, <argument><expr><name><name>wanted_stream_spec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>video_disable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name> <operator>=</operator>
<call><name>av_find_best_stream</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>,
<argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio_disable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name> <operator>=</operator>
<call><name>av_find_best_stream</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>,
<argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>video_disable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>subtitle_disable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>]</index></name> <operator>=</operator>
<call><name>av_find_best_stream</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>,
<argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name></expr> </then><else>:
<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>=</operator> <name>show_mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name> <init>= <expr><call><name>av_guess_sample_aspect_ratio</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_default_window_size</name><argument_list>(<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>sar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_component_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>stream_component_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SHOW_MODE_VIDEO</name></expr> </then><else>: <expr><name>SHOW_MODE_RDFT</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_component_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>st_index</name><index>[<expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file '%s' or configure filtergraph\n"</literal></expr></argument>,
<argument><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>infinite_buffer</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>realtime</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>infinite_buffer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>last_paused</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_paused</name></name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>read_pause_return</name></name> <operator>=</operator> <call><name>av_read_pause</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_read_play</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTSP_DEMUXER</name> <operator>||</operator> <name>CONFIG_MMSH_PROTOCOL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ic</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>ic</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>input_filename</name></expr></argument>, <argument><expr><literal type="string">"mmsh:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>SDL_Delay</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>seek_req</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_target</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>seek_pos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_min</name> <init>= <expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>seek_rel</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>seek_target</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>seek_rel</name></name> <operator>+</operator> <literal type="number">2</literal></expr></then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_max</name> <init>= <expr><ternary><condition><expr><name><name>is</name><operator>-&gt;</operator><name>seek_rel</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>seek_target</name> <operator>-</operator> <name><name>is</name><operator>-&gt;</operator><name>seek_rel</name></name> <operator>-</operator> <literal type="number">2</literal></expr></then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_seek_file</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seek_min</name></expr></argument>, <argument><expr><name>seek_target</name></expr></argument>, <argument><expr><name>seek_max</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>seek_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s: error while seeking\n"</literal></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flush_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BYTE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><name>seek_target</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>seek_req</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>queue_attachments_req</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>step_to_next_frame</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>queue_attachments_req</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>copy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>attached_pic</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>packet_queue_put_nullpacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>queue_attachments_req</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>infinite_buffer</name><operator>&lt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitleq</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_QUEUE_SIZE</name>
<operator>||</operator> <operator>(</operator><call><name>stream_has_enough_packets</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>stream_has_enough_packets</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>stream_has_enough_packets</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_st</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name>wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondWaitTimeout</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>, <argument><expr><name>wait_mutex</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name>wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name> <operator>||</operator> <operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>auddec</name><operator>.</operator><name>finished</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>serial</name></name> <operator>&amp;&amp;</operator> <call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name> <operator>||</operator> <operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>viddec</name><operator>.</operator><name>finished</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>serial</name></name> <operator>&amp;&amp;</operator> <call><name>frame_queue_nb_remaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loop</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>loop</name> <operator>||</operator> <operator>--</operator><name>loop</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><ternary><condition><expr><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>start_time</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>autoexit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>||</operator> <call><name>avio_feof</name><argument_list>(<argument><expr><name><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_queue_put_nullpacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_queue_put_nullpacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>packet_queue_put_nullpacket</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ic</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <name><name>ic</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_LockMutex</name><argument_list>(<argument><expr><name>wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_CondWaitTimeout</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name></expr></argument>, <argument><expr><name>wait_mutex</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_UnlockMutex</name><argument_list>(<argument><expr><name>wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>stream_start_time</name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_ts</name> <operator>=</operator> <ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_in_play_range</name> <operator>=</operator> <name>duration</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator>
<operator>(</operator><name>pkt_ts</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>stream_start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>stream_start_time</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>*</operator>
<call><name>av_q2d</name><argument_list>(<argument><expr><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>)</argument_list></call> <operator>-</operator>
<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>start_time</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal>
<operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>duration</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&amp;&amp;</operator> <name>pkt_in_play_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&amp;&amp;</operator> <name>pkt_in_play_range</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>video_st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name> <operator>&amp;&amp;</operator> <name>pkt_in_play_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>packet_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ic</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FF_QUIT_EVENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event</name><operator>.</operator><name>user</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_PushEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_DestroyMutex</name><argument_list>(<argument><expr><name>wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VideoState</name> <modifier>*</modifier></type><name>stream_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>iformat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VideoState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>iformat</name></name> <operator>=</operator> <name>iformat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>ytop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>xleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>frame_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>, <argument><expr><name>VIDEO_PICTURE_QUEUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>frame_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subpq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>, <argument><expr><name>SUBPICTURE_QUEUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>frame_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>, <argument><expr><name>SAMPLE_QUEUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packet_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>packet_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>packet_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>subtitleq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>is</name><operator>-&gt;</operator><name>continue_read_thread</name></name> <operator>=</operator> <call><name>SDL_CreateCond</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateCond(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>vidclk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>videoq</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audclk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>audioq</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>extclk</name><operator>.</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_clock_serial</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>startup_volume</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-volume=%d &lt; 0, setting to 0\n"</literal></expr></argument>, <argument><expr><name>startup_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>startup_volume</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-volume=%d &gt; 100, setting to 100\n"</literal></expr></argument>, <argument><expr><name>startup_volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>startup_volume</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>startup_volume</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startup_volume</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>SDL_MIX_MAXVOLUME</name> <operator>*</operator> <name>startup_volume</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SDL_MIX_MAXVOLUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>audio_volume</name></name> <operator>=</operator> <name>startup_volume</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>muted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>av_sync_type</name></name> <operator>=</operator> <name>av_sync_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>read_tid</name></name> <operator>=</operator> <call><name>SDL_CreateThread</name><argument_list>(<argument><expr><name>read_thread</name></expr></argument>, <argument><expr><literal type="string">"read_thread"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>read_tid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"SDL_CreateThread(): %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>stream_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_cycle_channel</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>ic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_index</name></decl>, <decl><type ref="prev"/><name>stream_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>last_video_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>last_audio_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>audio_stream</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>last_subtitle_stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_index</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>subtitle_stream</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <name>start_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_find_program_from_stream</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>video_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>start_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_index</name> <operator>&lt;</operator> <name>nb_streams</name></expr>;</condition> <incr><expr><name>start_index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>start_index</name></expr>]</index></name> <operator>==</operator> <name>stream_index</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>start_index</name> <operator>==</operator> <name>nb_streams</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <name>start_index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>stream_index</name> <operator>&gt;=</operator> <name>nb_streams</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>last_subtitle_stream</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>the_end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>==</operator> <name>start_index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr> </then><else>: <expr><name>stream_index</name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>codec_type</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>codec_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>the_end</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<goto>goto <name>the_end</name>;</goto>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>the_end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>stream_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Switch %s stream from #%d to #%d\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name>codec_type</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>old_index</name></expr></argument>,
<argument><expr><name>stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stream_component_close</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>old_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_component_open</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_full_screen</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>is_full_screen</name> <operator>=</operator> <operator>!</operator><name>is_full_screen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_SetWindowFullscreen</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_full_screen</name></expr> ?</condition><then> <expr><name>SDL_WINDOW_FULLSCREEN_DESKTOP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>toggle_audio_display</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>next</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHOW_MODE_NB</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>next</name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>next</name> <operator>==</operator> <name>SHOW_MODE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>video_st</name></name> <operator>||</operator> <name>next</name> <operator>!=</operator> <name>SHOW_MODE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>audio_st</name></name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>!=</operator> <name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>refresh_loop_wait_event</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>SDL_Event</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>remaining_time</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SDL_PumpEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>SDL_PeepEvents</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SDL_GETEVENT</name></expr></argument>, <argument><expr><name>SDL_FIRSTEVENT</name></expr></argument>, <argument><expr><name>SDL_LASTEVENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor_hidden</name> <operator>&amp;&amp;</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>cursor_last_shown</name> <operator>&gt;</operator> <name>CURSOR_HIDE_DELAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_ShowCursor</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_hidden</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining_time</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>remaining_time</name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>remaining_time</name> <operator>=</operator> <name>REFRESH_RATE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>!=</operator> <name>SHOW_MODE_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>paused</name></name> <operator>||</operator> <name><name>is</name><operator>-&gt;</operator><name>force_refresh</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>video_refresh</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SDL_PumpEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seek_chapter</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>incr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>get_master_clock</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>AV_TIME_BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_compare_ts</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Seeking to chapter %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>,
<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>event_loop</name><parameter_list>(<parameter><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>cur_stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>incr</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>frac</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>refresh_loop_wait_event</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_KEYDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>exit_on_keydown</name> <operator>||</operator> <name><name>event</name><operator>.</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>sym</name></name> <operator>==</operator> <name>SDLK_ESCAPE</name> <operator>||</operator> <name><name>event</name><operator>.</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>sym</name></name> <operator>==</operator> <name>SDLK_q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_exit</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>sym</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDLK_f</name></expr>:</case>
<expr_stmt><expr><call><name>toggle_full_screen</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_p</name></expr>:</case>
<case>case <expr><name>SDLK_SPACE</name></expr>:</case>
<expr_stmt><expr><call><name>toggle_pause</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_m</name></expr>:</case>
<expr_stmt><expr><call><name>toggle_mute</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_KP_MULTIPLY</name></expr>:</case>
<case>case <expr><name>SDLK_0</name></expr>:</case>
<expr_stmt><expr><call><name>update_volume</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SDL_VOLUME_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_KP_DIVIDE</name></expr>:</case>
<case>case <expr><name>SDLK_9</name></expr>:</case>
<expr_stmt><expr><call><name>update_volume</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SDL_VOLUME_STEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_s</name></expr>:</case> 
<expr_stmt><expr><call><name>step_to_next_frame</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_a</name></expr>:</case>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_v</name></expr>:</case>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_c</name></expr>:</case>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_t</name></expr>:</case>
<expr_stmt><expr><call><name>stream_cycle_channel</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_w</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>show_mode</name></name> <operator>==</operator> <name>SHOW_MODE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>vfilter_idx</name></name> <operator>&lt;</operator> <name>nb_vfilters</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>vfilter_idx</name></name> <operator>&gt;=</operator> <name>nb_vfilters</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>vfilter_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>vfilter_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>toggle_audio_display</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>toggle_audio_display</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>SDLK_PAGEUP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">600.0</literal></expr>;</expr_stmt>
<goto>goto <name>do_seek</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>seek_chapter</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_PAGEDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <operator>-</operator><literal type="number">600.0</literal></expr>;</expr_stmt>
<goto>goto <name>do_seek</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>seek_chapter</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SDLK_LEFT</name></expr>:</case>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <ternary><condition><expr><name>seek_interval</name></expr> ?</condition><then> <expr><operator>-</operator><name>seek_interval</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">10.0</literal></expr></else></ternary></expr>;</expr_stmt>
<goto>goto <name>do_seek</name>;</goto>
<case>case <expr><name>SDLK_RIGHT</name></expr>:</case>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <ternary><condition><expr><name>seek_interval</name></expr> ?</condition><then> <expr><name>seek_interval</name></expr> </then><else>: <expr><literal type="number">10.0</literal></expr></else></ternary></expr>;</expr_stmt>
<goto>goto <name>do_seek</name>;</goto>
<case>case <expr><name>SDLK_UP</name></expr>:</case>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">60.0</literal></expr>;</expr_stmt>
<goto>goto <name>do_seek</name>;</goto>
<case>case <expr><name>SDLK_DOWN</name></expr>:</case>
<expr_stmt><expr><name>incr</name> <operator>=</operator> <operator>-</operator><literal type="number">60.0</literal></expr>;</expr_stmt>
<label><name>do_seek</name>:</label>
<if_stmt><if>if <condition>(<expr><name>seek_by_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>video_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>frame_queue_last_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>pictq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>audio_stream</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>frame_queue_last_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>sampq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>incr</name> <operator>*=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">8.0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>incr</name> <operator>*=</operator> <literal type="number">180000.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_master_clock</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>/</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>*</operator> <name>AV_TIME_BASE</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>incr</name> <operator>*</operator> <name>AV_TIME_BASE</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>SDL_MOUSEBUTTONDOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>exit_on_mousedown</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>do_exit</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>button</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>SDL_BUTTON_LEFT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_mouse_left_click</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>last_mouse_left_click</name> <operator>&lt;=</operator> <literal type="number">500000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>toggle_full_screen</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_mouse_left_click</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>last_mouse_left_click</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>SDL_MOUSEMOTION</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>cursor_hidden</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_ShowCursor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_hidden</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cursor_last_shown</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SDL_MOUSEBUTTONDOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>button</name><operator>.</operator><name>button</name></name> <operator>!=</operator> <name>SDL_BUTTON_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>button</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>event</name><operator>.</operator><name>motion</name><operator>.</operator><name>state</name></name> <operator>&amp;</operator> <name>SDL_BUTTON_RMASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>motion</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seek_by_bytes</name> <operator>||</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_size</name><argument_list>(<argument><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><name>x</name><operator>/</operator><name><name>cur_stream</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>, <decl><type ref="prev"/><name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tns</name></decl>, <decl><type ref="prev"/><name>thh</name></decl>, <decl><type ref="prev"/><name>tmm</name></decl>, <decl><type ref="prev"/><name>tss</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tns</name> <operator>=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name> <operator>/</operator> <literal type="number">1000000LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>thh</name> <operator>=</operator> <name>tns</name> <operator>/</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmm</name> <operator>=</operator> <operator>(</operator><name>tns</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tss</name> <operator>=</operator> <operator>(</operator><name>tns</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>frac</name> <operator>=</operator> <name>x</name> <operator>/</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name>frac</name> <operator>*</operator> <name>tns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hh</name> <operator>=</operator> <name>ns</name> <operator>/</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <operator>(</operator><name>ns</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <operator>(</operator><name>ns</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Seek to %2.0f%% (%2d:%02d:%02d) of total duration (%2d:%02d:%02d) \n"</literal></expr></argument>, <argument><expr><name>frac</name><operator>*</operator><literal type="number">100</literal></expr></argument>,
<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>thh</name></expr></argument>, <argument><expr><name>tmm</name></expr></argument>, <argument><expr><name>tss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <name>frac</name> <operator>*</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ts</name> <operator>+=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stream_seek</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>SDL_WINDOWEVENT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>event</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SDL_WINDOWEVENT_SIZE_CHANGED</name></expr>:</case>
<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>data1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <name><name>cur_stream</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>data2</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_stream</name><operator>-&gt;</operator><name>vis_texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>vis_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>vis_texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<case>case <expr><name>SDL_WINDOWEVENT_EXPOSED</name></expr>:</case>
<expr_stmt><expr><name><name>cur_stream</name><operator>-&gt;</operator><name>force_refresh</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>SDL_QUIT</name></expr>:</case>
<case>case <expr><name>FF_QUIT_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>do_exit</name><argument_list>(<argument><expr><name>cur_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_frame_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Option -s is deprecated, use -video_size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"video_size"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_width</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>screen_width</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_height</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>screen_height</name> <operator>=</operator> <call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>file_iformat</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_iformat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown input format: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_frame_pix_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Option -pix_fmt is deprecated, use -pixel_format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>opt_default</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pixel_format"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_sync_type</name> <operator>=</operator> <name>AV_SYNC_AUDIO_MASTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_sync_type</name> <operator>=</operator> <name>AV_SYNC_VIDEO_MASTER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"ext"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>av_sync_type</name> <operator>=</operator> <name>AV_SYNC_EXTERNAL_CLOCK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown value for %s: %s\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>parse_time_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_duration</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>parse_time_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_show_mode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>show_mode</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SHOW_MODE_VIDEO</name></expr> </then><else>:
<expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"waves"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SHOW_MODE_WAVES</name></expr> </then><else>:
<expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"rdft"</literal></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>SHOW_MODE_RDFT</name></expr> </then><else>:
<expr><call><name>parse_number_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>OPT_INT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHOW_MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_input_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"Argument '%s' provided as input filename, but '%s' was already specified.\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>input_filename</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No media specifier was specified in '%s' in option '%s'\n"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>spec</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>spec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr> :</case> <expr_stmt><expr><name>audio_codec_name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr> :</case> <expr_stmt><expr><name>subtitle_codec_name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr> :</case> <expr_stmt><expr><name>video_codec_name</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid media specifier '%s' in option '%s'\n"</literal></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionDef</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>CMDUTILS_COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"x"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_width</name></expr> }</block></expr>, <expr><literal type="string">"force displayed width"</literal></expr>, <expr><literal type="string">"width"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_height</name></expr> }</block></expr>, <expr><literal type="string">"force displayed height"</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_VIDEO</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_frame_size</name></expr> }</block></expr>, <expr><literal type="string">"set frame size (WxH or abbreviation)"</literal></expr>, <expr><literal type="string">"size"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fs"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>is_full_screen</name></expr> }</block></expr>, <expr><literal type="string">"force full screen"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"an"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>audio_disable</name></expr> }</block></expr>, <expr><literal type="string">"disable audio"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vn"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>video_disable</name></expr> }</block></expr>, <expr><literal type="string">"disable video"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sn"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>subtitle_disable</name></expr> }</block></expr>, <expr><literal type="string">"disable subtitling"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ast"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name><name>wanted_stream_spec</name><index>[<expr><name>AVMEDIA_TYPE_AUDIO</name></expr>]</index></name></expr> }</block></expr>, <expr><literal type="string">"select desired audio stream"</literal></expr>, <expr><literal type="string">"stream_specifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vst"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name><name>wanted_stream_spec</name><index>[<expr><name>AVMEDIA_TYPE_VIDEO</name></expr>]</index></name></expr> }</block></expr>, <expr><literal type="string">"select desired video stream"</literal></expr>, <expr><literal type="string">"stream_specifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sst"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name><name>wanted_stream_spec</name><index>[<expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>]</index></name></expr> }</block></expr>, <expr><literal type="string">"select desired subtitle stream"</literal></expr>, <expr><literal type="string">"stream_specifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ss"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_seek</name></expr> }</block></expr>, <expr><literal type="string">"seek to a given position in seconds"</literal></expr>, <expr><literal type="string">"pos"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_duration</name></expr> }</block></expr>, <expr><literal type="string">"play \"duration\" seconds of audio/video"</literal></expr>, <expr><literal type="string">"duration"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bytes"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>seek_by_bytes</name></expr> }</block></expr>, <expr><literal type="string">"seek by bytes 0=off 1=on -1=auto"</literal></expr>, <expr><literal type="string">"val"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"seek_interval"</literal></expr>, <expr><name>OPT_FLOAT</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>seek_interval</name></expr> }</block></expr>, <expr><literal type="string">"set seek interval for left/right keys, in seconds"</literal></expr>, <expr><literal type="string">"seconds"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nodisp"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>display_disable</name></expr> }</block></expr>, <expr><literal type="string">"disable graphical display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noborder"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>borderless</name></expr> }</block></expr>, <expr><literal type="string">"borderless window"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"alwaysontop"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>alwaysontop</name></expr> }</block></expr>, <expr><literal type="string">"window always on top"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volume"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>startup_volume</name></expr>}</block></expr>, <expr><literal type="string">"set startup volume 0=min 100=max"</literal></expr>, <expr><literal type="string">"volume"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_format</name></expr> }</block></expr>, <expr><literal type="string">"force format"</literal></expr>, <expr><literal type="string">"fmt"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pix_fmt"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name> <operator>|</operator> <name>OPT_VIDEO</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_frame_pix_fmt</name></expr> }</block></expr>, <expr><literal type="string">"set pixel format"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stats"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>show_status</name></expr> }</block></expr>, <expr><literal type="string">"show status"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fast"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>fast</name></expr> }</block></expr>, <expr><literal type="string">"non spec compliant optimizations"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"genpts"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>genpts</name></expr> }</block></expr>, <expr><literal type="string">"generate pts"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"drp"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>decoder_reorder_pts</name></expr> }</block></expr>, <expr><literal type="string">"let decoder reorder pts 0=off 1=on -1=auto"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lowres"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>lowres</name></expr> }</block></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sync"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_sync</name></expr> }</block></expr>, <expr><literal type="string">"set audio-video sync. type (type=audio/video/ext)"</literal></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"autoexit"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>autoexit</name></expr> }</block></expr>, <expr><literal type="string">"exit at the end"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exitonkeydown"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>exit_on_keydown</name></expr> }</block></expr>, <expr><literal type="string">"exit on key down"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exitonmousedown"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>exit_on_mousedown</name></expr> }</block></expr>, <expr><literal type="string">"exit on mouse down"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"loop"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>loop</name></expr> }</block></expr>, <expr><literal type="string">"set number of times the playback shall be looped"</literal></expr>, <expr><literal type="string">"loop count"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framedrop"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>framedrop</name></expr> }</block></expr>, <expr><literal type="string">"drop frames when cpu is too slow"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"infbuf"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>infinite_buffer</name></expr> }</block></expr>, <expr><literal type="string">"don't limit the input buffer size (useful with realtime streams)"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"window_title"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>window_title</name></expr> }</block></expr>, <expr><literal type="string">"set window title"</literal></expr>, <expr><literal type="string">"window title"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>screen_left</name></expr> }</block></expr>, <expr><literal type="string">"set the x position for the left of the window"</literal></expr>, <expr><literal type="string">"x pos"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"top"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>screen_top</name></expr> }</block></expr>, <expr><literal type="string">"set the y position for the top of the window"</literal></expr>, <expr><literal type="string">"y pos"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf"</literal></expr>, <expr><name>OPT_EXPERT</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_add_vfilter</name></expr> }</block></expr>, <expr><literal type="string">"set video filters"</literal></expr>, <expr><literal type="string">"filter_graph"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"af"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>afilters</name></expr> }</block></expr>, <expr><literal type="string">"set audio filters"</literal></expr>, <expr><literal type="string">"filter_graph"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"rdftspeed"</literal></expr>, <expr><name>OPT_INT</name> <operator>|</operator> <name>HAS_ARG</name><operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>rdftspeed</name></expr> }</block></expr>, <expr><literal type="string">"rdft speed"</literal></expr>, <expr><literal type="string">"msecs"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"showmode"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_show_mode</name></expr>}</block></expr>, <expr><literal type="string">"select show mode (0 = video, 1 = waves, 2 = RDFT)"</literal></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_default</name></expr> }</block></expr>, <expr><literal type="string">"generic catch all option"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>dummy</name></expr>}</block></expr>, <expr><literal type="string">"read specified file"</literal></expr>, <expr><literal type="string">"input_file"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"codec"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_codec</name></expr>}</block></expr>, <expr><literal type="string">"force decoder"</literal></expr>, <expr><literal type="string">"decoder_name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acodec"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>audio_codec_name</name></expr> }</block></expr>, <expr><literal type="string">"force audio decoder"</literal></expr>, <expr><literal type="string">"decoder_name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scodec"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>subtitle_codec_name</name></expr> }</block></expr>, <expr><literal type="string">"force subtitle decoder"</literal></expr>, <expr><literal type="string">"decoder_name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vcodec"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_STRING</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>video_codec_name</name></expr> }</block></expr>, <expr><literal type="string">"force video decoder"</literal></expr>, <expr><literal type="string">"decoder_name"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"autorotate"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>autorotate</name></expr> }</block></expr>, <expr><literal type="string">"automatically rotate video"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"find_stream_info"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>find_stream_info</name></expr> }</block></expr>,
<expr><literal type="string">"read and decode the streams to fill missing information with heuristics"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filter_threads"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_INT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>filter_nbthreads</name></expr> }</block></expr>, <expr><literal type="string">"number of filter threads per graph"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Simple media player\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"usage: %s [options] input_file\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_help_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Main options:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPT_EXPERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Advanced options:"</literal></expr></argument>, <argument><expr><name>OPT_EXPERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_AVFILTER</name></expr></cpp:if>
<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>sws_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avfilter_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_FILTERING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nWhile playing:\n"</literal>
<literal type="string">"q, ESC quit\n"</literal>
<literal type="string">"f toggle full screen\n"</literal>
<literal type="string">"p, SPC pause\n"</literal>
<literal type="string">"m toggle mute\n"</literal>
<literal type="string">"9, 0 decrease and increase volume respectively\n"</literal>
<literal type="string">"/, * decrease and increase volume respectively\n"</literal>
<literal type="string">"a cycle audio channel in the current program\n"</literal>
<literal type="string">"v cycle video channel\n"</literal>
<literal type="string">"t cycle subtitle channel in the current program\n"</literal>
<literal type="string">"c cycle program\n"</literal>
<literal type="string">"w cycle video filters or show modes\n"</literal>
<literal type="string">"s activate frame-step mode\n"</literal>
<literal type="string">"left/right seek backward/forward 10 seconds or to custom interval if -seek_interval is set\n"</literal>
<literal type="string">"down/up seek backward/forward 1 minute\n"</literal>
<literal type="string">"page down/page up seek backward/forward 10 minutes\n"</literal>
<literal type="string">"right mouse click seek to percentage in file corresponding to fraction of width\n"</literal>
<literal type="string">"left double-click toggle full screen\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VideoState</name> <modifier>*</modifier></type><name>is</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_dynload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_flags</name><argument_list>(<argument><expr><name>AV_LOG_SKIP_REPEATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_loglevel</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>
<expr_stmt><expr><call><name>avdevice_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument> , <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>show_banner</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_options</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt_input_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"An input file must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,
<argument><expr><literal type="string">"Use -h to get full help or, even better, run 'man %s'\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display_disable</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>video_disable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SDL_INIT_VIDEO</name> <operator>|</operator> <name>SDL_INIT_AUDIO</name> <operator>|</operator> <name>SDL_INIT_TIMER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>audio_disable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SDL_INIT_AUDIO</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_getenv</name><argument_list>(<argument><expr><literal type="string">"SDL_AUDIO_ALSA_SET_BUFFER_SIZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SDL_setenv</name><argument_list>(<argument><expr><literal type="string">"SDL_AUDIO_ALSA_SET_BUFFER_SIZE"</literal></expr></argument>,<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>display_disable</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SDL_INIT_VIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SDL_Init</name> <argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not initialize SDL - %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"(Did you set the DISPLAY variable?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SDL_EventState</name><argument_list>(<argument><expr><name>SDL_SYSWMEVENT</name></expr></argument>, <argument><expr><name>SDL_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_EventState</name><argument_list>(<argument><expr><name>SDL_USEREVENT</name></expr></argument>, <argument><expr><name>SDL_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flush_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flush_pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flush_pkt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_disable</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SDL_WINDOW_HIDDEN</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>alwaysontop</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SDL_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_ALWAYS_ON_TOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Your SDL version doesn't support SDL_WINDOW_ALWAYS_ON_TOP. Feature will be inactive.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>borderless</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_BORDERLESS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SDL_WINDOW_RESIZABLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>window</name> <operator>=</operator> <call><name>SDL_CreateWindow</name><argument_list>(<argument><expr><name>program_name</name></expr></argument>, <argument><expr><name>SDL_WINDOWPOS_UNDEFINED</name></expr></argument>, <argument><expr><name>SDL_WINDOWPOS_UNDEFINED</name></expr></argument>, <argument><expr><name>default_width</name></expr></argument>, <argument><expr><name>default_height</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SDL_SetHint</name><argument_list>(<argument><expr><name>SDL_HINT_RENDER_SCALE_QUALITY</name></expr></argument>, <argument><expr><literal type="string">"linear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>window</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>renderer</name> <operator>=</operator> <call><name>SDL_CreateRenderer</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SDL_RENDERER_ACCELERATED</name> <operator>|</operator> <name>SDL_RENDERER_PRESENTVSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>renderer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize a hardware accelerated renderer: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>renderer</name> <operator>=</operator> <call><name>SDL_CreateRenderer</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>renderer</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SDL_GetRendererInfo</name><argument_list>(<argument><expr><name>renderer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>renderer_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Initialized %s renderer.\n"</literal></expr></argument>, <argument><expr><name><name>renderer_info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name> <operator>||</operator> <operator>!</operator><name>renderer</name> <operator>||</operator> <operator>!</operator><name><name>renderer_info</name><operator>.</operator><name>num_texture_formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to create window or renderer: %s"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_exit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is</name> <operator>=</operator> <call><name>stream_open</name><argument_list>(<argument><expr><name>input_filename</name></expr></argument>, <argument><expr><name>file_iformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize VideoState!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_exit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>event_loop</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
