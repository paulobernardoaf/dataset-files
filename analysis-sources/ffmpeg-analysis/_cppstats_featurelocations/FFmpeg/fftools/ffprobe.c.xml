<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\fftools\ffprobe.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/spherical.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/avdevice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpostproc/postprocess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_THREADS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutex_lock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pthread_mutex_lock</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_lock</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{}while(0)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutex_unlock</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pthread_mutex_unlock</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pthread_mutex_unlock</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{}while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>InputStream</name> <block>{
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>InputStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>InputFile</name> <block>{
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>
}</block></struct></type> <name>InputFile</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>program_name</name><index>[]</index></name> <init>= <expr><literal type="string">"ffprobe"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>program_birth_year</name> <init>= <expr><literal type="number">2007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_bitexact</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_count_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_count_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_read_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_read_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_chapters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_programs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_streams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_stream_disposition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_program_version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_library_versions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_pixel_formats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_pixel_format_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_pixel_format_components</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_chapter_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_format_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_frame_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_program_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_stream_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_show_packet_tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>show_value_unit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_value_prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_byte_value_binary_prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_value_sexagesimal_format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>show_private_data</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>print_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stream_specifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>show_data_hash</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ReadInterval</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <name>end</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_start</name></decl>, <name>has_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_is_offset</name></decl>, <name>end_is_offset</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration_frames</name></decl>;</decl_stmt>
}</block></struct></type> <name>ReadInterval</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ReadInterval</name> <modifier>*</modifier></type><name>read_intervals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>read_intervals_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>find_stream_info</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION_MAX_NB_CHILDREN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>section</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION_FLAG_IS_WRAPPER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION_FLAG_IS_ARRAY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>children_ids</name><index>[<expr><name>SECTION_MAX_NB_CHILDREN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>element_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unique_name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>entries_to_show</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_all_entries</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{
<decl><name>SECTION_ID_NONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>SECTION_ID_CHAPTER</name></decl>,
<decl><name>SECTION_ID_CHAPTER_TAGS</name></decl>,
<decl><name>SECTION_ID_CHAPTERS</name></decl>,
<decl><name>SECTION_ID_ERROR</name></decl>,
<decl><name>SECTION_ID_FORMAT</name></decl>,
<decl><name>SECTION_ID_FORMAT_TAGS</name></decl>,
<decl><name>SECTION_ID_FRAME</name></decl>,
<decl><name>SECTION_ID_FRAMES</name></decl>,
<decl><name>SECTION_ID_FRAME_TAGS</name></decl>,
<decl><name>SECTION_ID_FRAME_SIDE_DATA_LIST</name></decl>,
<decl><name>SECTION_ID_FRAME_SIDE_DATA</name></decl>,
<decl><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE_LIST</name></decl>,
<decl><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE</name></decl>,
<decl><name>SECTION_ID_FRAME_LOG</name></decl>,
<decl><name>SECTION_ID_FRAME_LOGS</name></decl>,
<decl><name>SECTION_ID_LIBRARY_VERSION</name></decl>,
<decl><name>SECTION_ID_LIBRARY_VERSIONS</name></decl>,
<decl><name>SECTION_ID_PACKET</name></decl>,
<decl><name>SECTION_ID_PACKET_TAGS</name></decl>,
<decl><name>SECTION_ID_PACKETS</name></decl>,
<decl><name>SECTION_ID_PACKETS_AND_FRAMES</name></decl>,
<decl><name>SECTION_ID_PACKET_SIDE_DATA_LIST</name></decl>,
<decl><name>SECTION_ID_PACKET_SIDE_DATA</name></decl>,
<decl><name>SECTION_ID_PIXEL_FORMAT</name></decl>,
<decl><name>SECTION_ID_PIXEL_FORMAT_FLAGS</name></decl>,
<decl><name>SECTION_ID_PIXEL_FORMAT_COMPONENT</name></decl>,
<decl><name>SECTION_ID_PIXEL_FORMAT_COMPONENTS</name></decl>,
<decl><name>SECTION_ID_PIXEL_FORMATS</name></decl>,
<decl><name>SECTION_ID_PROGRAM_STREAM_DISPOSITION</name></decl>,
<decl><name>SECTION_ID_PROGRAM_STREAM_TAGS</name></decl>,
<decl><name>SECTION_ID_PROGRAM</name></decl>,
<decl><name>SECTION_ID_PROGRAM_STREAMS</name></decl>,
<decl><name>SECTION_ID_PROGRAM_STREAM</name></decl>,
<decl><name>SECTION_ID_PROGRAM_TAGS</name></decl>,
<decl><name>SECTION_ID_PROGRAM_VERSION</name></decl>,
<decl><name>SECTION_ID_PROGRAMS</name></decl>,
<decl><name>SECTION_ID_ROOT</name></decl>,
<decl><name>SECTION_ID_STREAM</name></decl>,
<decl><name>SECTION_ID_STREAM_DISPOSITION</name></decl>,
<decl><name>SECTION_ID_STREAMS</name></decl>,
<decl><name>SECTION_ID_STREAM_TAGS</name></decl>,
<decl><name>SECTION_ID_STREAM_SIDE_DATA_LIST</name></decl>,
<decl><name>SECTION_ID_STREAM_SIDE_DATA</name></decl>,
<decl><name>SECTION_ID_SUBTITLE</name></decl>,
}</block></enum></type> <name>SectionID</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>section</name></name></type> <name><name>sections</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>SECTION_ID_CHAPTERS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_CHAPTERS</name></expr>, <expr><literal type="string">"chapters"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_CHAPTER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_CHAPTER</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_CHAPTER</name></expr>, <expr><literal type="string">"chapter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_CHAPTER_TAGS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_CHAPTER_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_CHAPTER_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"chapter_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_ERROR</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_ERROR</name></expr>, <expr><literal type="string">"error"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FORMAT</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FORMAT</name></expr>, <expr><literal type="string">"format"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_FORMAT_TAGS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FORMAT_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FORMAT_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"format_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAMES</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAMES</name></expr>, <expr><literal type="string">"frames"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME</name></expr>, <expr><name>SECTION_ID_SUBTITLE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME</name></expr>, <expr><literal type="string">"frame"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME_TAGS</name></expr>, <expr><name>SECTION_ID_FRAME_SIDE_DATA_LIST</name></expr>, <expr><name>SECTION_ID_FRAME_LOGS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"frame_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_SIDE_DATA_LIST</name></expr>]</index> <operator>=</operator><block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA_LIST</name></expr>, <expr><literal type="string">"side_data_list"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"side_data"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"frame_side_data_list"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_SIDE_DATA</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA</name></expr>, <expr><literal type="string">"side_data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE_LIST</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE_LIST</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE_LIST</name></expr>, <expr><literal type="string">"timecodes"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE</name></expr>, <expr><literal type="string">"timecode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_LOGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_LOGS</name></expr>, <expr><literal type="string">"logs"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_FRAME_LOG</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_FRAME_LOG</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_FRAME_LOG</name></expr>, <expr><literal type="string">"log"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_LIBRARY_VERSIONS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_LIBRARY_VERSIONS</name></expr>, <expr><literal type="string">"library_versions"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_LIBRARY_VERSION</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_LIBRARY_VERSION</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_LIBRARY_VERSION</name></expr>, <expr><literal type="string">"library_version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKETS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PACKETS</name></expr>, <expr><literal type="string">"packets"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PACKET</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>, <expr><literal type="string">"packets_and_frames"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PACKET</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKET</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PACKET</name></expr>, <expr><literal type="string">"packet"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_PACKET_TAGS</name></expr>, <expr><name>SECTION_ID_PACKET_SIDE_DATA_LIST</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKET_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PACKET_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"packet_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKET_SIDE_DATA_LIST</name></expr>]</index> <operator>=</operator><block>{ <expr><name>SECTION_ID_PACKET_SIDE_DATA_LIST</name></expr>, <expr><literal type="string">"side_data_list"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PACKET_SIDE_DATA</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"side_data"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"packet_side_data_list"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PACKET_SIDE_DATA</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PACKET_SIDE_DATA</name></expr>, <expr><literal type="string">"side_data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PIXEL_FORMATS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PIXEL_FORMATS</name></expr>, <expr><literal type="string">"pixel_formats"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PIXEL_FORMAT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PIXEL_FORMAT</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PIXEL_FORMAT</name></expr>, <expr><literal type="string">"pixel_format"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_PIXEL_FORMAT_FLAGS</name></expr>, <expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENTS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PIXEL_FORMAT_FLAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PIXEL_FORMAT_FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"pixel_format_flags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENTS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENTS</name></expr>, <expr><literal type="string">"components"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{<expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENT</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"pixel_format_components"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENT</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENT</name></expr>, <expr><literal type="string">"component"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_STREAM_DISPOSITION</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_STREAM_DISPOSITION</name></expr>, <expr><literal type="string">"disposition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"program_stream_disposition"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_STREAM_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_STREAM_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"program_stream_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM</name></expr>, <expr><literal type="string">"program"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_PROGRAM_TAGS</name></expr>, <expr><name>SECTION_ID_PROGRAM_STREAMS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_STREAMS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_STREAMS</name></expr>, <expr><literal type="string">"streams"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PROGRAM_STREAM</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"program_streams"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_STREAM</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_STREAM</name></expr>, <expr><literal type="string">"stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_PROGRAM_STREAM_DISPOSITION</name></expr>, <expr><name>SECTION_ID_PROGRAM_STREAM_TAGS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"program_stream"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"program_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAM_VERSION</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAM_VERSION</name></expr>, <expr><literal type="string">"program_version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_PROGRAMS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_PROGRAMS</name></expr>, <expr><literal type="string">"programs"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_PROGRAM</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_ROOT</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_ROOT</name></expr>, <expr><literal type="string">"root"</literal></expr>, <expr><name>SECTION_FLAG_IS_WRAPPER</name></expr>,
<expr><block>{ <expr><name>SECTION_ID_CHAPTERS</name></expr>, <expr><name>SECTION_ID_FORMAT</name></expr>, <expr><name>SECTION_ID_FRAMES</name></expr>, <expr><name>SECTION_ID_PROGRAMS</name></expr>, <expr><name>SECTION_ID_STREAMS</name></expr>,
<expr><name>SECTION_ID_PACKETS</name></expr>, <expr><name>SECTION_ID_ERROR</name></expr>, <expr><name>SECTION_ID_PROGRAM_VERSION</name></expr>, <expr><name>SECTION_ID_LIBRARY_VERSIONS</name></expr>,
<expr><name>SECTION_ID_PIXEL_FORMATS</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAMS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_STREAMS</name></expr>, <expr><literal type="string">"streams"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_STREAM</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAM</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_STREAM</name></expr>, <expr><literal type="string">"stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>SECTION_ID_STREAM_DISPOSITION</name></expr>, <expr><name>SECTION_ID_STREAM_TAGS</name></expr>, <expr><name>SECTION_ID_STREAM_SIDE_DATA_LIST</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAM_DISPOSITION</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_STREAM_DISPOSITION</name></expr>, <expr><literal type="string">"disposition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"stream_disposition"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAM_TAGS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_STREAM_TAGS</name></expr>, <expr><literal type="string">"tags"</literal></expr>, <expr><name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"tag"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"stream_tags"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAM_SIDE_DATA_LIST</name></expr>]</index> <operator>=</operator><block>{ <expr><name>SECTION_ID_STREAM_SIDE_DATA_LIST</name></expr>, <expr><literal type="string">"side_data_list"</literal></expr>, <expr><name>SECTION_FLAG_IS_ARRAY</name></expr>, <expr><block>{ <expr><name>SECTION_ID_STREAM_SIDE_DATA</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>element_name</name> <operator>=</operator> <literal type="string">"side_data"</literal></expr>, <expr><operator>.</operator><name>unique_name</name> <operator>=</operator> <literal type="string">"stream_side_data_list"</literal></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_STREAM_SIDE_DATA</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_STREAM_SIDE_DATA</name></expr>, <expr><literal type="string">"side_data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
<expr><index>[<expr><name>SECTION_ID_SUBTITLE</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>SECTION_ID_SUBTITLE</name></expr>, <expr><literal type="string">"subtitle"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_input_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>iformat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>AVHashContext</name></name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>bin_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dec_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bin_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dec_str</name></decl>;</decl_stmt>
}</block> <decl><name><name>si_prefixes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.024e3</literal></expr>, <expr><literal type="number">1e3</literal></expr>, <expr><literal type="string">"Ki"</literal></expr>, <expr><literal type="string">"K"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.048576e6</literal></expr>, <expr><literal type="number">1e6</literal></expr>, <expr><literal type="string">"Mi"</literal></expr>, <expr><literal type="string">"M"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.073741824e9</literal></expr>, <expr><literal type="number">1e9</literal></expr>, <expr><literal type="string">"Gi"</literal></expr>, <expr><literal type="string">"G"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.099511627776e12</literal></expr>, <expr><literal type="number">1e12</literal></expr>, <expr><literal type="string">"Ti"</literal></expr>, <expr><literal type="string">"T"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1.125899906842624e15</literal></expr>, <expr><literal type="number">1e15</literal></expr>, <expr><literal type="string">"Pi"</literal></expr>, <expr><literal type="string">"P"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unit_second_str</name><index>[]</index></name> <init>= <expr><literal type="string">"s"</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unit_hertz_str</name><index>[]</index></name> <init>= <expr><literal type="string">"Hz"</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unit_byte_str</name><index>[]</index></name> <init>= <expr><literal type="string">"byte"</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unit_bit_per_second_str</name><index>[]</index></name> <init>= <expr><literal type="string">"bit/s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>nb_streams_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>nb_streams_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>selected_streams</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>log_mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>LogBuffer</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>context_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVClassCategory</name></type> <name>category</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>parent_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVClassCategory</name></type> <name>parent_category</name></decl>;</decl_stmt>
}</block></struct></type><name>LogBuffer</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>LogBuffer</name> <modifier>*</modifier></type><name>log_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>log_buffer_size</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name><modifier>*</modifier></type> <name>avc</name> <init>= <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vl2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>print_prefix</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_log_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>vl2</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log_default_callback</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log_format_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl2</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>print_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_log_buffer</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>log_buffer</name></expr></argument>, <argument><expr><name>log_buffer_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>log_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_log_buffer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>log_buffer</name> <operator>=</operator> <name>new_log_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>context_name</name><operator>=</operator> <ternary><condition><expr><name>avc</name></expr> ?</condition><then> <expr><call><name>av_strdup</name><argument_list>(<argument><expr><call><name><name>avc</name><operator>-&gt;</operator><name>item_name</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>avc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>get_category</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>category</name> <operator>=</operator> <call><name><name>avc</name><operator>-&gt;</operator><name>get_category</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>category</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>category</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>log_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>log_message</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>avc</name> <operator>&amp;&amp;</operator> <name><name>avc</name><operator>-&gt;</operator><name>parent_log_context_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name><modifier>*</modifier><modifier>*</modifier></type> <name>parent</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>+</operator>
<name><name>avc</name><operator>-&gt;</operator><name>parent_log_context_offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>parent_name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator><operator>-&gt;</operator><name>item_name</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_buffer</name><index>[<expr><name>log_buffer_size</name></expr>]</index></name><operator>.</operator><name>parent_category</name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator><operator>-&gt;</operator><name>get_category</name></expr> ?</condition><then> <expr><call><name><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator><operator>-&gt;</operator><name>get_category</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr> </then><else>:<expr><name><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator><operator>-&gt;</operator><name>category</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>log_buffer_size</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffprobe_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries_to_show</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<struct>struct <name>unit_value</name> <block>{
<union>union <block>{ <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt> }</block> <decl><name>val</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>value_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>unit_value</name></name></type> <name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>vald</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>vali</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_float</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>unit_second_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vald</name> <operator>=</operator> <name><name>uv</name><operator>.</operator><name>val</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>show_float</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>vald</name> <operator>=</operator> <name>vali</name> <operator>=</operator> <name><name>uv</name><operator>.</operator><name>val</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>unit_second_str</name> <operator>&amp;&amp;</operator> <name>use_value_sexagesimal_format</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hours</name></decl>, <decl><type ref="prev"/><name>mins</name></decl>;</decl_stmt>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>vald</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mins</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>secs</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>secs</name> <operator>-</operator> <name>mins</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hours</name> <operator>=</operator> <name>mins</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mins</name> <operator>%=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%d:%02d:%09.6f"</literal></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>mins</name></expr></argument>, <argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix_string</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_value_prefix</name> <operator>&amp;&amp;</operator> <name>vald</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>.</operator><name>unit</name></name> <operator>==</operator> <name>unit_byte_str</name> <operator>&amp;&amp;</operator> <name>use_byte_value_binary_prefix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <operator>(</operator><call><name>log2</name><argument_list>(<argument><expr><name>vald</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>si_prefixes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vald</name> <operator>/=</operator> <name><name>si_prefixes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>bin_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_string</name> <operator>=</operator> <name><name>si_prefixes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>bin_str</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <operator>(</operator><call><name>log10</name><argument_list>(<argument><expr><name>vald</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>si_prefixes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vald</name> <operator>/=</operator> <name><name>si_prefixes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>dec_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_string</name> <operator>=</operator> <name><name>si_prefixes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>dec_str</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>vali</name> <operator>=</operator> <name>vald</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>show_float</name> <operator>||</operator> <operator>(</operator><name>use_value_prefix</name> <operator>&amp;&amp;</operator> <name>vald</name> <operator>!=</operator> <operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>vald</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>vald</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>vali</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>prefix_string</name> <operator>||</operator> <name>show_value_unit</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>prefix_string</name></expr></argument>, <argument><expr><ternary><condition><expr><name>show_value_unit</name></expr> ?</condition><then> <expr><name><name>uv</name><operator>.</operator><name>unit</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>



<typedef>typedef <type><name><name>struct</name> <name>WriterContext</name></name></type> <name>WriterContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>WRITER_STRING_VALIDATION_FAIL</name></decl>,
<decl><name>WRITER_STRING_VALIDATION_REPLACE</name></decl>,
<decl><name>WRITER_STRING_VALIDATION_IGNORE</name></decl>,
<decl><name>WRITER_STRING_VALIDATION_NB</name></decl>
}</block></enum></type> <name>StringValidation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Writer</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>priv_class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>priv_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>uninit</name>)<parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_section_header</name>)<parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_section_footer</name>)<parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_integer</name>) <parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_rational</name>) <parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_string</name>) <parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Writer</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTION_MAX_NB_LEVELS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>WriterContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name>writer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>sections</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_sections</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>nb_item</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name><name>section</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name><name>section_pbuf</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_section_packet</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_section_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_section_packet_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>string_validation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string_validation_replacement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>string_validation_utf8_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>writer_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(WriterContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>writer_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"string_validation"</literal></expr>, <expr><literal type="string">"set string validation mode"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>string_validation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WRITER_STRING_VALIDATION_REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>WRITER_STRING_VALIDATION_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"sv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sv"</literal></expr>, <expr><literal type="string">"set string validation mode"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>string_validation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WRITER_STRING_VALIDATION_REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>WRITER_STRING_VALIDATION_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"sv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ignore"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WRITER_STRING_VALIDATION_IGNORE</name></expr>}</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"sv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WRITER_STRING_VALIDATION_REPLACE</name></expr>}</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"sv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fail"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WRITER_STRING_VALIDATION_FAIL</name></expr>}</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"sv"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"string_validation_replacement"</literal></expr>, <expr><literal type="string">"set string validation replacement string"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>string_validation_replacement</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">""</literal></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"svr"</literal></expr>, <expr><literal type="string">"set string validation replacement string"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>string_validation_replacement</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"\xEF\xBF\xBD"</literal></expr>}</block></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>writer_child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>writer</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>writer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Writer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>writer_get_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>writer_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>child_next</name> <operator>=</operator> <name>writer_child_next</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_close</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>wctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name><name>writer</name><operator>-&gt;</operator><name>uninit</name></name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name><name>writer</name><operator>-&gt;</operator><name>uninit</name></name></name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SECTION_MAX_NB_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>section_pbuf</name></name><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name><name>writer</name><operator>-&gt;</operator><name>priv_class</name></name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>priv</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bprint_bytes</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ubuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ubuf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"0X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ubuf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>ubuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>writer_open</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name>writer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>sections</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_sections</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>wctx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WriterContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>priv_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>writer_class</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>sections</name></name> <operator>=</operator> <name>sections</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>nb_sections</name></name> <operator>=</operator> <name>nb_sections</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>writer</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_ctx</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>priv_ctx</name><operator>)</operator> <operator>=</operator> <name><name>writer</name><operator>-&gt;</operator><name>priv_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name>priv_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dict_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse option string '%s' provided to writer context\n"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set option '%s' with value '%s' provided to writer context\n"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>string_validation_replacement</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>p</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_utf8_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>string_validation_utf8_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bprint_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid UTF8 sequence %s found in string validation replace '%s'\n"</literal></expr></argument>,
<argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>string_validation_replacement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SECTION_MAX_NB_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name>section_pbuf</name></name><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name><name>writer</name><operator>-&gt;</operator><name>init</name></name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>wctx</name><operator>)</operator><operator>-&gt;</operator><name><name>writer</name><operator>-&gt;</operator><name>init</name></name></name><argument_list>(<argument><expr><operator>*</operator><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>writer_close</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>writer_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>section_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>parent_section_id</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&lt;</operator> <name>SECTION_MAX_NB_LEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_section_id</name> <operator>=</operator> <ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name>id</name></expr> </then><else>: <expr><name>SECTION_ID_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>section_id</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>section_id</name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_section_frame</name></name> <operator>=</operator>
<name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>parent_section_id</name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet_frame</name></name> <operator>=</operator> <ternary><condition><expr><name>section_id</name> <operator>==</operator> <name>SECTION_ID_PACKET</name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet</name></name></expr> </then><else>: <expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_frame</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_section_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_section_header</name></name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>writer_print_section_footer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>section_id</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent_section_id</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr> </then><else>: <expr><name>SECTION_ID_NONE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_section_id</name> <operator>!=</operator> <name>SECTION_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>parent_section_id</name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>section_id</name> <operator>==</operator> <name>SECTION_ID_PACKET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_frame</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_section_footer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_section_footer</name></name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>writer_print_integer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>show_all_entries</name></name> <operator>||</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>entries_to_show</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_integer</name></name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>validate_string</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>dstbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid_chars_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dstbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>src</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_utf8_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>string_validation_utf8_flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bprint_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Invalid UTF-8 sequence %s found in string '%s'\n"</literal></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>invalid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>invalid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>invalid_chars_nb</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>string_validation</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WRITER_STRING_VALIDATION_FAIL</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid UTF-8 sequence found in string '%s'\n"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
<break>break;</break>

<case>case <expr><name>WRITER_STRING_VALIDATION_REPLACE</name></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dstbuf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>string_validation_replacement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid</name> <operator>||</operator> <name><name>wctx</name><operator>-&gt;</operator><name>string_validation</name></name> <operator>==</operator> <name>WRITER_STRING_VALIDATION_IGNORE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dstbuf</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>invalid_chars_nb</name> <operator>&amp;&amp;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>string_validation</name></name> <operator>==</operator> <name>WRITER_STRING_VALIDATION_REPLACE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%d invalid UTF-8 sequence(s) found in string '%s', replaced with '%s'\n"</literal></expr></argument>,
<argument><expr><name>invalid_chars_nb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>string_validation_replacement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dstbuf</name></expr></argument>, <argument><expr><name>dstp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_STRING_OPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_STRING_VALIDATE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>writer_print_string</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>PRINT_STRING_OPT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>show_all_entries</name></name> <operator>||</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>entries_to_show</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>PRINT_STRING_VALIDATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key1</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val1</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_string</name></name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid key=value string combination %s=%s in section %s\n"</literal></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>print_string</name></name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>writer_print_rational</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d%c%d"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_print_time</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVRational</name> <modifier>*</modifier></type><name>time_base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_duration</name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>is_duration</name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>, <argument><expr><name>PRINT_STRING_OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>ts</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><operator>*</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>unit_value</name></name></type> <name>uv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>uv</name><operator>.</operator><name>val</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uv</name><operator>.</operator><name>unit</name></name> <operator>=</operator> <name>unit_second_str</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>value_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_print_ts</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_duration</name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>is_duration</name> <operator>&amp;&amp;</operator> <name>ts</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>, <argument><expr><name>PRINT_STRING_OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_integer</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_print_data</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%08x: "</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">41</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32U</literal> <operator>&lt;</operator> <literal type="number">95</literal></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_print_data_hash</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><name>AV_HASH_MAX_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_hash_init</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hash_update</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><call><name>av_hash_get_name</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hash_final_hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_print_integers</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%08x: "</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>AV_RN16</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>offset_add</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>writer_print_string</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REGISTERED_WRITERS_NB</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name><name>registered_writers</name><index>[<expr><name>MAX_REGISTERED_WRITERS_NB</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writer_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name>writer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>next_registered_writer_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_registered_writer_idx</name> <operator>==</operator> <name>MAX_REGISTERED_WRITERS_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>registered_writers</name><index>[<expr><name>next_registered_writer_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name>writer_get_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>registered_writers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>registered_writers</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>registered_writers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_WRITER_CLASS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const char *name##_get_name(void *ctx) { return #name ; } static const AVClass name##_class = { .class_name = #name, .item_name = name##_get_name, .option = name##_options }</cpp:value></cpp:define>












<typedef>typedef <type><struct>struct <name>DefaultContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nokey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noprint_wrappers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>nested_section</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DefaultContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DefaultContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>default_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"noprint_wrappers"</literal></expr>, <expr><literal type="string">"do not print headers and footers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noprint_wrappers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nw"</literal></expr>, <expr><literal type="string">"do not print headers and footers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noprint_wrappers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nokey"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nk"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr>default</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>upcase_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>dst_size</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_toupper</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DefaultContext</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent_section</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>def</name><operator>-&gt;</operator><name>nested_section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s%s:"</literal></expr></argument>,
<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><call><name>upcase_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>av_x_if_null</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>element_name</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>noprint_wrappers</name></name> <operator>||</operator> <name><name>def</name><operator>-&gt;</operator><name>nested_section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><call><name>upcase_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_print_section_footer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DefaultContext</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>noprint_wrappers</name></name> <operator>||</operator> <name><name>def</name><operator>-&gt;</operator><name>nested_section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[/%s]\n"</literal></expr></argument>, <argument><expr><call><name>upcase_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DefaultContext</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>def</name><operator>-&gt;</operator><name>nokey</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s="</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DefaultContext</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>def</name><operator>-&gt;</operator><name>nokey</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s="</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>default_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DefaultContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>default_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_section_footer</name> <operator>=</operator> <name>default_print_section_footer</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>default_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>default_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>default_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>sep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>csv_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>meta_chars</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>sep</name></expr>, <expr><literal type="char">'"'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needs_quoting</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>src</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>meta_chars</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_quoting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>src</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>needs_quoting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>none_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>CompactContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>item_sep_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>item_sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nokey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escape_mode_str</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>escape_str</name>)<parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name><name>nested_section</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>has_nested_elems</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>terminate_line</name><index>[<expr><name>SECTION_MAX_NB_LEVELS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CompactContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CompactContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>compact_options</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{<expr><literal type="string">"item_sep"</literal></expr>, <expr><literal type="string">"set item separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>item_sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"|"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set item separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>item_sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"|"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nokey"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nk"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"escape"</literal></expr>, <expr><literal type="string">"set escape mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>escape_mode_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"c"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"set escape mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>escape_mode_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"c"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"print_section"</literal></expr>, <expr><literal type="string">"print section name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_section</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"print section name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_section</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>compact_init</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CompactContext</name> <modifier>*</modifier></type><name>compact</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep_str</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Item separator '%s' specified, but must contain a single character\n"</literal></expr></argument>,
<argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep</name></name> <operator>=</operator> <name><name>compact</name><operator>-&gt;</operator><name>item_sep_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_mode_str</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_str</name></name> <operator>=</operator> <name>none_escape_str</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_mode_str</name></name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_str</name></name> <operator>=</operator> <name>c_escape_str</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_mode_str</name></name></expr></argument>, <argument><expr><literal type="string">"csv"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_str</name></name> <operator>=</operator> <name>csv_escape_str</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown escape mode '%s'\n"</literal></expr></argument>, <argument><expr><name><name>compact</name><operator>-&gt;</operator><name>escape_mode_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compact_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CompactContext</name> <modifier>*</modifier></type><name>compact</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>terminate_line</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>has_nested_elems</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>parent_section</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>nested_section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>has_nested_elems</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%s%s:"</literal></expr></argument>,
<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>element_name</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parent_section</name> <operator>&amp;&amp;</operator> <name><name>compact</name><operator>-&gt;</operator><name>has_nested_elems</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>compact</name><operator>-&gt;</operator><name>terminate_line</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>compact</name><operator>-&gt;</operator><name>print_section</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%c"</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compact_print_section_footer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CompactContext</name> <modifier>*</modifier></type><name>compact</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compact</name><operator>-&gt;</operator><name>nested_section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>compact</name><operator>-&gt;</operator><name>terminate_line</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>|</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compact_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CompactContext</name> <modifier>*</modifier></type><name>compact</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compact</name><operator>-&gt;</operator><name>nokey</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s="</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>compact</name><operator>-&gt;</operator><name>escape_str</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compact_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CompactContext</name> <modifier>*</modifier></type><name>compact</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>compact</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compact</name><operator>-&gt;</operator><name>nokey</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s="</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>compact_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"compact"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CompactContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>compact_init</name></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>compact_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_section_footer</name> <operator>=</operator> <name>compact_print_section_footer</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>compact_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>compact_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>compact_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CompactContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>csv_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"item_sep"</literal></expr>, <expr><literal type="string">"set item separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>item_sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">","</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set item separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>item_sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">","</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nokey"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nk"</literal></expr>, <expr><literal type="string">"force no key printing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nokey</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"escape"</literal></expr>, <expr><literal type="string">"set escape mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>escape_mode_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"csv"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"set escape mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>escape_mode_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"csv"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"print_section"</literal></expr>, <expr><literal type="string">"print section name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_section</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"print section name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_section</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>csv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>csv_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"csv"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CompactContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>compact_init</name></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>compact_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_section_footer</name> <operator>=</operator> <name>compact_print_section_footer</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>compact_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>compact_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>csv_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <name>FlatContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hierarchical</name></decl>;</decl_stmt>
}</block></struct></type> <name>FlatContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FlatContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>flat_options</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{<expr><literal type="string">"sep_char"</literal></expr>, <expr><literal type="string">"set separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"."</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set separator"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sep_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"."</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"hierarchical"</literal></expr>, <expr><literal type="string">"specify if the section specification should be hierarchical"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hierarchical</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"specify if the section specification should be hierarchical"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hierarchical</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>flat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flat_init</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FlatContext</name> <modifier>*</modifier></type><name>flat</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>flat</name><operator>-&gt;</operator><name>sep_str</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Item separator '%s' specified, but must contain a single character\n"</literal></expr></argument>,
<argument><expr><name><name>flat</name><operator>-&gt;</operator><name>sep_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>flat</name><operator>-&gt;</operator><name>sep</name></name> <operator>=</operator> <name><name>flat</name><operator>-&gt;</operator><name>sep_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flat_escape_key_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flat_escape_value_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'`'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\`"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flat_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FlatContext</name> <modifier>*</modifier></type><name>flat</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent_section</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flat</name><operator>-&gt;</operator><name>hierarchical</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>|</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>flat</name><operator>-&gt;</operator><name>sep_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>parent_section</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet_frame</name></name></expr> </then><else>: <expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d%s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>flat</name><operator>-&gt;</operator><name>sep_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flat_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s=%lld\n"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flat_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FlatContext</name> <modifier>*</modifier></type><name>flat</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><call><name>flat_escape_key_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>flat</name><operator>-&gt;</operator><name>sep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\"\n"</literal></expr></argument>, <argument><expr><call><name>flat_escape_value_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>flat_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flat"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FlatContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>flat_init</name></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>flat_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>flat_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>flat_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name><operator>|</operator><name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>flat_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <name>INIContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hierarchical</name></decl>;</decl_stmt>
}</block></struct></type> <name>INIContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(INIContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ini_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"hierarchical"</literal></expr>, <expr><literal type="string">"specify if the section specification should be hierarchical"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hierarchical</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"specify if the section specification should be hierarchical"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hierarchical</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>ini</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ini_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<case>case <expr><literal type="char">'#'</literal></expr> :</case>
<case>case <expr><literal type="char">'='</literal></expr> :</case>
<case>case <expr><literal type="char">':'</literal></expr> :</case> <expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\\x00%02x"</literal></expr></argument>, <argument><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ini_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INIContext</name> <modifier>*</modifier></type><name>ini</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent_section</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#ffprobe output\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section_pbuf</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ini</name><operator>-&gt;</operator><name>hierarchical</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>|</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>parent_section</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_section_packet_frame</name></name></expr> </then><else>: <expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SECTION_FLAG_IS_ARRAY</name><operator>|</operator><name>SECTION_FLAG_IS_WRAPPER</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ini_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><call><name>ini_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>ini_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ini_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=%lld\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>ini_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ini"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INIContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>ini_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>ini_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>ini_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS</name><operator>|</operator><name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ini_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <name>JSONContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compact</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item_sep</name></decl>, <modifier>*</modifier><name>item_start_end</name>;</decl_stmt>
}</block></struct></type> <name>JSONContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(JSONContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>json_options</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"compact"</literal></expr>, <expr><literal type="string">"enable compact output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"enable compact output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>compact</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>json_init</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSONContext</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>item_sep</name></name> <operator>=</operator> <ternary><condition><expr><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">",\n"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>item_start_end</name></name> <operator>=</operator> <ternary><condition><expr><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>json_escape</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'"'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'\b'</literal></expr>, <expr><literal type="char">'\f'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\t'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>json_subst</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'"'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>json_escape</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>json_subst</name><index>[<expr><name>s</name> <operator>-</operator> <name>json_escape</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"\\u00%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_INDENT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("%*c", json-&gt;indent_level * 4, ' ')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSONContext</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;&amp;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_WRAPPER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>indent_level</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>json_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>indent_level</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\": [\n"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>parent_section</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\": {%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>item_start_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{%s"</literal></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>item_start_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>parent_section</name> <operator>&amp;&amp;</operator> <name><name>parent_section</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"type\": \"%s\""</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_print_section_footer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSONContext</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>item_start_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>json_print_item_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\":"</literal></expr></argument>, <argument><expr><call><name>json_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" \"%s\""</literal></expr></argument>, <argument><expr><call><name>json_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSONContext</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>parent_section</name> <operator>&amp;&amp;</operator> <name><name>parent_section</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>json_print_item_str</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JSONContext</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>parent_section</name> <operator>&amp;&amp;</operator> <name><name>parent_section</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>item_sep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>json</name><operator>-&gt;</operator><name>compact</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JSON_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\": %lld"</literal></expr></argument>, <argument><expr><call><name>json_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Writer</name></type> <name>json_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"json"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>JSONContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>json_init</name></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>json_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_section_footer</name> <operator>=</operator> <name>json_print_section_footer</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>json_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>json_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>json_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <name>XMLContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>within_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fully_qualified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xsd_strict</name></decl>;</decl_stmt>
}</block></struct></type> <name>XMLContext</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XMLContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>xml_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"fully_qualified"</literal></expr>, <expr><literal type="string">"specify if the output should be fully qualified"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fully_qualified</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"specify if the output should be fully qualified"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fully_qualified</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"xsd_strict"</literal></expr>, <expr><literal type="string">"ensure that the output is XSD compliant"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>xsd_strict</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"ensure that the output is XSD compliant"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>xsd_strict</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEFINE_WRITER_CLASS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xml_init</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMLContext</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>xsd_strict</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>fully_qualified</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_COMPLIANCE</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>opt_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (opt) { av_log(wctx, AV_LOG_ERROR, "XSD-compliant output selected but option '%s' was selected, XML output may be non-compliant.\n" "You need to disable such option with '-no%s'\n", opt_name, opt_name); return AVERROR(EINVAL); }</cpp:value></cpp:define>






<expr_stmt><expr><call><name>CHECK_COMPLIANCE</name><argument_list>(<argument><expr><name>show_private_data</name></expr></argument>, <argument><expr><literal type="string">"private"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_COMPLIANCE</name><argument_list>(<argument><expr><name>show_value_unit</name></expr></argument>, <argument><expr><literal type="string">"unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_COMPLIANCE</name><argument_list>(<argument><expr><name>use_value_prefix</name></expr></argument>, <argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_frames</name> <operator>&amp;&amp;</operator> <name>do_show_packets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Interleaved frames and packets are not allowed in XSD. "</literal>
<literal type="string">"Select only one between the -show_frames and the -show_packets options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xml_escape_str</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&amp;'</literal></expr> :</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr> :</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr> :</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr> :</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case> <expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&amp;apos;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_INDENT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("%*c", xml-&gt;indent_level * 4, ' ')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_print_section_header</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMLContext</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>parent_section</name> <init>= <expr><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr> ?</condition><then>
<expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qual</name> <init>= <expr><literal type="string">" xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' "</literal>
<literal type="string">"xmlns:ffprobe='http://www.ffmpeg.org/schema/ffprobe' "</literal>
<literal type="string">"xsi:schemaLocation='http://www.ffmpeg.org/schema/ffprobe ffprobe.xsd'"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%sffprobe%s&gt;\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>xml</name><operator>-&gt;</operator><name>fully_qualified</name></name></expr> ?</condition><then> <expr><literal type="string">"ffprobe:"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>xml</name><operator>-&gt;</operator><name>fully_qualified</name></name></expr> ?</condition><then> <expr><name>qual</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>within_tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>within_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>indent_level</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>parent_section</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>parent_section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_WRAPPER</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;&amp;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>indent_level</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XML_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XML_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s "</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>within_tag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_print_section_footer</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMLContext</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;/%sffprobe&gt;\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>xml</name><operator>-&gt;</operator><name>fully_qualified</name></name></expr> ?</condition><then> <expr><literal type="string">"ffprobe:"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>xml</name><operator>-&gt;</operator><name>within_tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>within_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XML_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;/%s&gt;\n"</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xml</name><operator>-&gt;</operator><name>indent_level</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_print_str</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XMLContext</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>section</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XML_INDENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&lt;%s key=\"%s\""</literal></expr></argument>,
<argument><expr><name><name>section</name><operator>-&gt;</operator><name>element_name</name></name></expr></argument>, <argument><expr><call><name>xml_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" value=\"%s\"/&gt;\n"</literal></expr></argument>, <argument><expr><call><name>xml_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=\"%s\""</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>xml_escape_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_print_int</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_item</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>level</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=\"%lld\""</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Writer</name></type> <name>xml_writer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xml"</literal></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XMLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xml_init</name></expr>,
<expr><operator>.</operator><name>print_section_header</name> <operator>=</operator> <name>xml_print_section_header</name></expr>,
<expr><operator>.</operator><name>print_section_footer</name> <operator>=</operator> <name>xml_print_section_footer</name></expr>,
<expr><operator>.</operator><name>print_integer</name> <operator>=</operator> <name>xml_print_int</name></expr>,
<expr><operator>.</operator><name>print_string</name> <operator>=</operator> <name>xml_print_str</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xml_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writer_register_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compact_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>csv_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flat_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ini_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>json_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xml_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_fmt</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_bprint_clear(&amp;pbuf); av_bprintf(&amp;pbuf, f, __VA_ARGS__); writer_print_string(w, k, pbuf.str, 0); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_int</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_integer(w, k, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_q</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_rational(w, k, v, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_str</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_string(w, k, v, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_str_opt</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_string(w, k, v, PRINT_STRING_OPT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_str_validate</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_string(w, k, v, PRINT_STRING_VALIDATE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_time</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_time(w, k, v, tb, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_ts</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_ts(w, k, v, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_duration_time</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_time(w, k, v, tb, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_duration_ts</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_ts(w, k, v, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_val</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct unit_value uv; uv.val.i = v; uv.unit = u; writer_print_string(w, k, value_string(val_str, sizeof(val_str), uv), 0); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_section_header</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_section_header(w, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_section_footer</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>writer_print_section_footer(w, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REALLOCZ_ARRAY_STREAM</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>cur_n</name></type></parameter>, <parameter><type><name>new_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ret = av_reallocp_array(&amp;(ptr), (new_n), sizeof(*(ptr))); if (ret &lt; 0) goto end; memset( (ptr) + (cur_n), 0, ((new_n) - (cur_n)) * sizeof(*(ptr)) ); }</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>show_tags</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>section_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>print_str_validate</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_pkt_side_data</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPacketSideData</name> <modifier>*</modifier></type><name>side_data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_side_data</name></decl></parameter>,
<parameter><decl><type><name>SectionID</name></type> <name>id_data_list</name></decl></parameter>,
<parameter><decl><type><name>SectionID</name></type> <name>id_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>id_data_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_side_data</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPacketSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>&amp;</operator><name><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>av_packet_side_data_name</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>id_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"side_data_type"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_DISPLAYMATRIX</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_integers</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"displaymatrix"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">" %11d"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"rotation"</literal></expr></argument>, <argument><expr><call><name>av_display_rotation_get</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_STEREO3D</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo</name> <init>= <expr><operator>(</operator><name>AVStereo3D</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>av_stereo3d_type_name</name><argument_list>(<argument><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"inverted"</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_SPHERICAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVSphericalMapping</name> <modifier>*</modifier></type><name>spherical</name> <init>= <expr><operator>(</operator><name>AVSphericalMapping</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"projection"</literal></expr></argument>, <argument><expr><call><name>av_spherical_projection_name</name><argument_list>(<argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name> <operator>==</operator> <name>AV_SPHERICAL_CUBEMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name> <operator>==</operator> <name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_spherical_tile_bounds</name><argument_list>(<argument><expr><name>spherical</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bound_left"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bound_top"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bound_right"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bound_bottom"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"yaw"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>yaw</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"pitch"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>pitch</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"roll"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>roll</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_SKIP_SAMPLES</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"skip_samples"</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"discard_padding"</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"skip_reason"</literal></expr></argument>, <argument><expr><call><name>AV_RL8</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"discard_reason"</literal></expr></argument>, <argument><expr><call><name>AV_RL8</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_MASTERING_DISPLAY_METADATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_primaries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"red_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"red_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"green_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"green_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"blue_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"blue_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"white_point_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"white_point_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"min_luminance"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"max_luminance"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"max_content"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"max_average"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_color_range</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <name>color_range</name> <operator>==</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"color_range"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"color_range"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_color_space</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>color_space</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name>color_space</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <name>color_space</name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"color_space"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"color_space"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_primaries</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name>color_primaries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <name>color_primaries</name> <operator>==</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"color_primaries"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"color_primaries"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_color_trc</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name>color_trc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <name>color_trc</name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"color_transfer"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"color_transfer"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_chroma_location</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>av_chroma_location_name</name><argument_list>(<argument><expr><name>chroma_location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <name>chroma_location</name> <operator>==</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"chroma_location"</literal></expr></argument>, <argument><expr><literal type="string">"unspecified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"chroma_location"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>need_lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>log_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>context_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>log_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>log_buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>need_lock</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_log</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_ids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log_buffer_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>section_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>log_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>log_level</name> <operator>&lt;=</operator> <name>log_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>section_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"context"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>context_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>log_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"parent_context"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"parent_category"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"parent_context"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"parent_category"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name><name>log_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>log_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>clear_log</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_packet</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packet_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>val_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>st</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"codec_type"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"codec_type"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"stream_index"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"pts"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"pts_time"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"dts"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"dts_time"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_ts</name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_time</name><argument_list>(<argument><expr><literal type="string">"duration_time"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_ts</name><argument_list>(<argument><expr><literal type="string">"convergence_duration"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_time</name><argument_list>(<argument><expr><literal type="string">"convergence_duration_time"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_val</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>unit_byte_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"pos"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_fmt</name><argument_list>(<argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr> ?</condition><then> <expr><literal type="char">'K'</literal></expr> </then><else>: <expr><literal type="char">'_'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_DISCARD</name></expr> ?</condition><then> <expr><literal type="char">'D'</literal></expr> </then><else>: <expr><literal type="char">'_'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>side_metadata</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_metadata</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_STRINGS_METADATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_metadata</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>do_show_packet_tags</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_packet_unpack_dictionary</name><argument_list>(<argument><expr><name>side_metadata</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>SECTION_ID_PACKET_TAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_pkt_side_data</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr></argument>,
<argument><expr><name>SECTION_ID_PACKET_SIDE_DATA_LIST</name></expr></argument>,
<argument><expr><name>SECTION_ID_PACKET_SIDE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>writer_print_data</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_data_hash</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"data_hash"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_subtitle</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"media_type"</literal></expr></argument>, <argument><expr><literal type="string">"subtitle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"pts"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"pts_time"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"start_display_time"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"end_display_time"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"num_rects"</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_frame</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>val_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"media_type"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"media_type"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"stream_index"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"key_frame"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"pkt_pts"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"pkt_pts_time"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"pkt_dts"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"pkt_dts_time"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"best_effort_timestamp"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"best_effort_timestamp_time"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_ts</name> <argument_list>(<argument><expr><literal type="string">"pkt_duration"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_duration_time</name><argument_list>(<argument><expr><literal type="string">"pkt_duration_time"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"pkt_pos"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"pkt_pos"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_val</name> <argument_list>(<argument><expr><literal type="string">"pkt_size"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name></expr></argument>, <argument><expr><name>unit_byte_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"pkt_size"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>sar</name> <operator>=</operator> <call><name>av_guess_sample_aspect_ratio</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"sample_aspect_ratio"</literal></expr></argument>, <argument><expr><name>sar</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"sample_aspect_ratio"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>print_fmt</name><argument_list>(<argument><expr><literal type="string">"pict_type"</literal></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"coded_picture_number"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>coded_picture_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"display_picture_number"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>display_picture_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"interlaced_frame"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"top_field_first"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"repeat_pict"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_color_range</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color_space</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_primaries</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color_trc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_chroma_location</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"sample_fmt"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"sample_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"nb_samples"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"channels"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"channel_layout"</literal></expr></argument>, <argument><expr><name><name>pbuf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"channel_layout"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>do_show_frame_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_TAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_log</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_log</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_LOGS</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_LOG</name></expr></argument>, <argument><expr><name>do_show_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_SIDE_DATA_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_SIDE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_frame_side_data_name</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"side_data_type"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_DISPLAYMATRIX</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_integers</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"displaymatrix"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">" %11d"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"rotation"</literal></expr></argument>, <argument><expr><call><name>av_display_rotation_get</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_GOP_TIMECODE</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcbuf</name><index>[<expr><name>AV_TIMECODE_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_timecode_make_mpeg_tc_string</name><argument_list>(<argument><expr><name>tcbuf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>tcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_S12M_TIMECODE</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcbuf</name><index>[<expr><name>AV_TIMECODE_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_timecode_make_smpte_tc_string</name><argument_list>(<argument><expr><name>tcbuf</name></expr></argument>, <argument><expr><name><name>tc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FRAME_SIDE_DATA_TIMECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_primaries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"red_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"red_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"green_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"green_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"blue_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"blue_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"white_point_x"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"white_point_y"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"min_luminance"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"max_luminance"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"max_content"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"max_average"</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sd</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_FRAME_DATA_ICC_PROFILE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>sd</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>process_frame</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>packet_new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>dec_ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_log</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name> <operator>&amp;&amp;</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>packet_new</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_packet</name><argument_list>(<argument><expr><name>dec_ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>packet_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_frame</name><argument_list>(<argument><expr><name>dec_ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>packet_new</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_decode_subtitle2</name><argument_list>(<argument><expr><name>dec_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>packet_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>packet_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>packet_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_frame</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_sub</name> <init>= <expr><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb_streams_frames</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_frames</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>is_sub</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_subtitle</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>, <argument><expr><name>fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_frame</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>, <argument><expr><name>fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_sub</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>got_frame</name> <operator>||</operator> <operator>*</operator><name>packet_new</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_read_interval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadInterval</name> <modifier>*</modifier></type><name>interval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"id:%d"</literal></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>has_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" start:%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>interval</name><operator>-&gt;</operator><name>start_is_offset</name></name></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>interval</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" start:N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>has_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" end:%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>duration_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"#%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>interval</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>interval</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" end:N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_interval_packets</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ReadInterval</name> <modifier>*</modifier></type><name>interval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>cur_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>frame_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><operator>-</operator><name>INT64_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>interval</name><operator>-&gt;</operator><name>end</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_end</name> <init>= <expr><name><name>interval</name><operator>-&gt;</operator><name>has_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Processing read interval "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_read_interval</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>has_start</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>target</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>start_is_offset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_ts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not seek to relative position since current "</literal>
<literal type="string">"timestamp is not defined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>*</operator><name>cur_ts</name> <operator>+</operator> <name><name>interval</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>interval</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Seeking to read interval start point %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avformat_seek_file</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>INT64_MAX</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not seek to position %"</literal><name>PRId64</name><literal type="string">": %s\n"</literal></expr></argument>,
<argument><expr><name><name>interval</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>av_read_frame</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <name>nb_streams</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>nb_streams_frames</name></expr></argument>, <argument><expr><name>nb_streams</name></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>nb_streams_packets</name></expr></argument>, <argument><expr><name>nb_streams</name></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>selected_streams</name></expr></argument>, <argument><expr><name>nb_streams</name></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>selected_streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cur_ts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_start</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur_ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>*</operator><name>cur_ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_start</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_end</name> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name><name>interval</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>-&gt;</operator><name>duration_frames</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frame_count</name> <operator>&gt;=</operator> <name><name>interval</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur_ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur_ts</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_read_packets</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_show_packets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_packet</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nb_streams_packets</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_read_frames</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>packet_new</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>process_frame</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_new</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_read_frames</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><macro><name>process_frame</name><argument_list>(<argument>w</argument>, <argument>ifile</argument>, <argument>frame</argument>, <argument>&amp;pkt</argument>, <argument>&amp;(int){<literal type="number">1</literal>}</argument>)</argument_list></macro> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not read packets in interval "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_read_interval</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packets</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_ts</name> <init>= <expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>read_intervals_nb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ReadInterval</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>ReadInterval</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>has_start</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>has_end</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_interval_packets</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>read_intervals_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_interval_packets</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>read_intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_stream</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_idx</name></decl></parameter>, <parameter><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dec_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>val_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>, <decl><type ref="prev"/><name>dar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><ternary><condition><expr><name>in_program</name></expr> ?</condition><then> <expr><name>SECTION_ID_PROGRAM_STREAM</name></expr> </then><else>: <expr><name>SECTION_ID_STREAM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dec_ctx</name> <operator>=</operator> <name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"codec_name"</literal></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_bitexact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"codec_long_name"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>cd</name><operator>-&gt;</operator><name>long_name</name></name></expr> ?</condition><then> <expr><name><name>cd</name><operator>-&gt;</operator><name>long_name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"codec_name"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_bitexact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"codec_long_name"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_bitexact</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>profile</name> <operator>=</operator> <call><name>avcodec_profile_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>profile_num</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>profile_num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile_num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><name>profile_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"profile"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"codec_type"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"codec_type"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"codec_time_base"</literal></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"codec_tag_string"</literal></expr></argument>, <argument><expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fmt</name><argument_list>(<argument><expr><literal type="string">"codec_tag"</literal></expr></argument>, <argument><expr><literal type="string">"0x%04"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"coded_width"</literal></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"coded_height"</literal></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"has_b_frames"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sar</name> <operator>=</operator> <call><name>av_guess_sample_aspect_ratio</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"sample_aspect_ratio"</literal></expr></argument>, <argument><expr><name>sar</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"display_aspect_ratio"</literal></expr></argument>, <argument><expr><name>dar</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"sample_aspect_ratio"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"display_aspect_ratio"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"pix_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_color_range</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color_space</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_color_trc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_primaries</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_chroma_location</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"progressive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_BB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"bb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_TB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"tb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_BT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"bt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"field_order"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name> <operator>&amp;&amp;</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>timecode_frame_start</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcbuf</name><index>[<expr><name>AV_TIMECODE_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_timecode_make_mpeg_tc_string</name><argument_list>(<argument><expr><name>tcbuf</name></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>timecode_frame_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>tcbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"refs"</literal></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"sample_fmt"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"sample_fmt"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_val</name><argument_list>(<argument><expr><literal type="string">"sample_rate"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>unit_hertz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"channels"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"channel_layout"</literal></expr></argument>, <argument><expr><name><name>pbuf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"channel_layout"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bits_per_sample"</literal></expr></argument>, <argument><expr><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>dec_ctx</name> <operator>&amp;&amp;</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <name>show_private_data</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>opt</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>,<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_SHOW_IDS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"0x%x"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"r_frame_rate"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>r_frame_rate</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"avg_frame_rate"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name><argument_list>(<argument><expr><literal type="string">"time_base"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"start_pts"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name> <argument_list>(<argument><expr><literal type="string">"duration_ts"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_val</name> <argument_list>(<argument><expr><literal type="string">"bit_rate"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name>unit_bit_per_second_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"bit_rate"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_val</name> <argument_list>(<argument><expr><literal type="string">"max_bit_rate"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>, <argument><expr><name>unit_bit_per_second_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"max_bit_rate"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>dec_ctx</name> <operator>&amp;&amp;</operator> <name><name>dec_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name><argument_list>(<argument><expr><literal type="string">"bits_per_raw_sample"</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>dec_ctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"bits_per_raw_sample"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"nb_frames"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>nb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"nb_frames"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nb_streams_frames</name><index>[<expr><name>stream_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"nb_read_frames"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name><name>nb_streams_frames</name><index>[<expr><name>stream_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"nb_read_frames"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nb_streams_packets</name><index>[<expr><name>stream_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_fmt</name> <argument_list>(<argument><expr><literal type="string">"nb_read_packets"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name><name>nb_streams_packets</name><index>[<expr><name>stream_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"nb_read_packets"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>writer_print_data</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"extradata"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_data_hash</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"extradata_hash"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_DISPOSITION</name><parameter_list>(<parameter><type><name>flagname</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { print_int(name, !!(stream-&gt;disposition &amp; AV_DISPOSITION_##flagname)); } while (0)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><name>do_show_stream_disposition</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><ternary><condition><expr><name>in_program</name></expr> ?</condition><then> <expr><name>SECTION_ID_PROGRAM_STREAM_DISPOSITION</name></expr> </then><else>: <expr><name>SECTION_ID_STREAM_DISPOSITION</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>DUB</name></expr></argument>, <argument><expr><literal type="string">"dub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>ORIGINAL</name></expr></argument>, <argument><expr><literal type="string">"original"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>LYRICS</name></expr></argument>, <argument><expr><literal type="string">"lyrics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>KARAOKE</name></expr></argument>, <argument><expr><literal type="string">"karaoke"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>FORCED</name></expr></argument>, <argument><expr><literal type="string">"forced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>HEARING_IMPAIRED</name></expr></argument>, <argument><expr><literal type="string">"hearing_impaired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>VISUAL_IMPAIRED</name></expr></argument>, <argument><expr><literal type="string">"visual_impaired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>CLEAN_EFFECTS</name></expr></argument>, <argument><expr><literal type="string">"clean_effects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>ATTACHED_PIC</name></expr></argument>, <argument><expr><literal type="string">"attached_pic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_DISPOSITION</name><argument_list>(<argument><expr><name>TIMED_THUMBNAILS</name></expr></argument>, <argument><expr><literal type="string">"timed_thumbnails"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_stream_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>in_program</name></expr> ?</condition><then> <expr><name>SECTION_ID_PROGRAM_STREAM_TAGS</name></expr> </then><else>: <expr><name>SECTION_ID_STREAM_TAGS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_pkt_side_data</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>side_data</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr></argument>,
<argument><expr><name>SECTION_ID_STREAM_SIDE_DATA_LIST</name></expr></argument>,
<argument><expr><name>SECTION_ID_STREAM_SIDE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_streams</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>selected_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_stream</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_program</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>, <parameter><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PROGRAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"program_id"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"program_num"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>program_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"nb_streams"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"pmt_pid"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pmt_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"pcr_pid"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>pcr_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name><argument_list>(<argument><expr><literal type="string">"start_pts"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_ts</name><argument_list>(<argument><expr><literal type="string">"end_pts"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_program_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>SECTION_ID_PROGRAM_TAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PROGRAM_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>program</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>selected_streams</name><index>[<expr><name><name>program</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_stream</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>program</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_programs</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PROGRAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_program</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_chapters</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_CHAPTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>chapter</name> <init>= <expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_CHAPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_q</name> <argument_list>(<argument><expr><literal type="string">"time_base"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chapter</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"end_time"</literal></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chapter</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_chapter_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>chapter</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>SECTION_ID_CHAPTER_TAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_format</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>val_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr> ?</condition><then> <expr><call><name>avio_size</name><argument_list>(<argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str_validate</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"nb_streams"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"nb_programs"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_programs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"format_name"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_bitexact</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>long_name</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str</name> <argument_list>(<argument><expr><literal type="string">"format_long_name"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"format_long_name"</literal></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_time</name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_val</name> <argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>unit_byte_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_val</name> <argument_list>(<argument><expr><literal type="string">"bit_rate"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name>unit_bit_per_second_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"bit_rate"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"probe_score"</literal></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>probe_score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_format_tags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_tags</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>SECTION_ID_FORMAT_TAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_error</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errbuf_ptr</name> <init>= <expr><name>errbuf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errbuf_ptr</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><name>errbuf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_input_file</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scan_all_pmts_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fmt_ctx</name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan_all_pmts_set</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_ctx</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>iformat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt_ctx</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>print_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name> <operator>=</operator> <name>fmt_ctx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scan_all_pmts_set</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">"scan_all_pmts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>format_opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s not found.\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>find_stream_info</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>setup_find_stream_info_opts</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>codec_opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orig_nb_streams</name> <init>= <expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orig_nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dump_format</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>fmt_ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PROBE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed to probe codec for input stream %d\n"</literal></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported codec with id %d for input stream %d\n"</literal></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>filter_codec_opts</name><argument_list>(<argument><expr><name>codec_opts</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>,
<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_log</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec_opts</name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>
<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>avcodec_open2</name><argument_list>(<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>dec_ctx</name></name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not open codec for input stream %d\n"</literal></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s for input stream %d not found\n"</literal></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name> <operator>=</operator> <name>fmt_ctx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_input_file</name><parameter_list>(<parameter><decl><type><name>InputFile</name> <modifier>*</modifier></type><name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifile</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifile</name><operator>-&gt;</operator><name>fmt_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probe_file</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>InputFile</name></type> <name>ifile</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>section_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>do_read_frames</name> <operator>=</operator> <name>do_show_frames</name> <operator>||</operator> <name>do_count_frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_read_packets</name> <operator>=</operator> <name>do_show_packets</name> <operator>||</operator> <name>do_count_packets</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>print_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_END</name></cpp:macro> <cpp:value>if (ret &lt; 0) goto end</cpp:value></cpp:define>

<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>nb_streams_frames</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>nb_streams_packets</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REALLOCZ_ARRAY_STREAM</name><argument_list>(<argument><expr><name>selected_streams</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stream_specifier</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_match_stream_specifier</name><argument_list>(<argument><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name></name></expr></argument>,
<argument><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>stream_specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>selected_streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>selected_streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>selected_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>=</operator> <name>AVDISCARD_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>do_read_frames</name> <operator>||</operator> <name>do_read_packets</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>do_show_frames</name> <operator>&amp;&amp;</operator> <name>do_show_packets</name> <operator>&amp;&amp;</operator>
<name><name>wctx</name><operator>-&gt;</operator><name>writer</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WRITER_FLAG_PUT_PACKETS_AND_FRAMES_IN_SAME_CHAPTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>section_id</name> <operator>=</operator> <name>SECTION_ID_PACKETS_AND_FRAMES</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>do_show_packets</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_show_frames</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>section_id</name> <operator>=</operator> <name>SECTION_ID_PACKETS</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>section_id</name> <operator>=</operator> <name>SECTION_ID_FRAMES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_frames</name> <operator>||</operator> <name>do_show_packets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>section_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_packets</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_frames</name> <operator>||</operator> <name>do_show_packets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_programs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_programs</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_streams</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_streams</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_chapters</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_chapters</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>show_format</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>CHECK_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ifile</name><operator>.</operator><name>fmt_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close_input_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nb_streams_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nb_streams_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selected_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Simple multimedia streams analyzer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"usage: %s [OPTIONS] [INPUT_FILE]\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffprobe_show_program_version</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>pbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PROGRAM_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>FFMPEG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_fmt</name><argument_list>(<argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright (c) %d-%d the FFmpeg developers"</literal></expr></argument>,
<argument><expr><name>program_birth_year</name></expr></argument>, <argument><expr><name>CONFIG_THIS_YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"compiler_ident"</literal></expr></argument>, <argument><expr><name>CC_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"configuration"</literal></expr></argument>, <argument><expr><name>FFMPEG_CONFIGURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_LIB_VERSION</name><parameter_list>(<parameter><type><name>libname</name></type></parameter>, <parameter><type><name>LIBNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (CONFIG_##LIBNAME) { unsigned int version = libname##_version(); writer_print_section_header(w, SECTION_ID_LIBRARY_VERSION); print_str("name", "lib" #libname); print_int("major", LIB##LIBNAME##_VERSION_MAJOR); print_int("minor", LIB##LIBNAME##_VERSION_MINOR); print_int("micro", LIB##LIBNAME##_VERSION_MICRO); print_int("version", version); print_str("ident", LIB##LIBNAME##_IDENT); writer_print_section_footer(w); } } while (0)</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>void</name></type> <name>ffprobe_show_library_versions</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_LIBRARY_VERSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>avutil</name></expr></argument>, <argument><expr><name>AVUTIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>avcodec</name></expr></argument>, <argument><expr><name>AVCODEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>avformat</name></expr></argument>, <argument><expr><name>AVFORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>avdevice</name></expr></argument>, <argument><expr><name>AVDEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>avfilter</name></expr></argument>, <argument><expr><name>AVFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>swscale</name></expr></argument>, <argument><expr><name>SWSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>swresample</name></expr></argument>, <argument><expr><name>SWRESAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOW_LIB_VERSION</name><argument_list>(<argument><expr><name>postproc</name></expr></argument>, <argument><expr><name>POSTPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_PIX_FMT_FLAG</name><parameter_list>(<parameter><type><name>flagname</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { print_int(name, !!(pixdesc-&gt;flags &amp; AV_PIX_FMT_FLAG_##flagname)); } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ffprobe_show_pixel_formats</name><parameter_list>(<parameter><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PIXEL_FORMATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pixdesc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_next</name><argument_list>(<argument><expr><name>pixdesc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PIXEL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"nb_components"</literal></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>nb_components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"log2_chroma_w"</literal></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"log2_chroma_h"</literal></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"log2_chroma_w"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"log2_chroma_h"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>pixdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_int</name> <argument_list>(<argument><expr><literal type="string">"bits_per_pixel"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_str_opt</name><argument_list>(<argument><expr><literal type="string">"bits_per_pixel"</literal></expr></argument>, <argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_pixel_format_flags</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PIXEL_FORMAT_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><literal type="string">"big_endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>PAL</name></expr></argument>, <argument><expr><literal type="string">"palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>BITSTREAM</name></expr></argument>, <argument><expr><literal type="string">"bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>HWACCEL</name></expr></argument>, <argument><expr><literal type="string">"hwaccel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>PLANAR</name></expr></argument>, <argument><expr><literal type="string">"planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>RGB</name></expr></argument>, <argument><expr><literal type="string">"rgb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PSEUDOPAL</name></expr></cpp:if>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>PSEUDOPAL</name></expr></argument>, <argument><expr><literal type="string">"pseudopal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>PRINT_PIX_FMT_FLAG</name><argument_list>(<argument><expr><name>ALPHA</name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_pixel_format_components</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SECTION_ID_PIXEL_FORMAT_COMPONENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_int</name><argument_list>(<argument><expr><literal type="string">"bit_depth"</literal></expr></argument>, <argument><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>iformat</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iformat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown input format: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mark_section_show_entries</name><parameter_list>(<parameter><decl><type><name>SectionID</name></type> <name>section_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>show_all_entries</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>sections</name><index>[<expr><name>section_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>section</name><operator>-&gt;</operator><name>show_all_entries</name></name> <operator>=</operator> <name>show_all_entries</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_all_entries</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SectionID</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>children_ids</name></name></expr>;</init> <condition><expr><operator>*</operator><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_section_show_entries</name><argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>, <argument><expr><name>show_all_entries</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>section</name><operator>-&gt;</operator><name>entries_to_show</name></name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_section</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section_name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>show_all_entries</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>section_name</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>section_name</name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"'%s' matches section with unique name '%s'\n"</literal></expr></argument>, <argument><expr><name>section_name</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mark_section_show_entries</name><argument_list>(<argument><expr><name><name>section</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>show_all_entries</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_show_entries</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>section_name</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">"=:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_all_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>section_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Missing section name for option '%s'\n"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">",:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Adding '%s' to the entries to show in section '%s'\n"</literal></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>section_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>show_all_entries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>match_section</name><argument_list>(<argument><expr><name>section_name</name></expr></argument>, <argument><expr><name>show_all_entries</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No match for section '%s'\n"</literal></expr></argument>, <argument><expr><name>section_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>section_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_show_format_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"format=%s"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Option '%s' is deprecated, use '-show_entries format=%s' instead\n"</literal></expr></argument>,
<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>opt_show_entries</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_input_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Argument '%s' provided as input filename, but '%s' was already specified.\n"</literal></expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit_program</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>input_filename</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_input_file_i</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>opt_input_file</name><argument_list>(<argument><expr><name>optctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_print_filename</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>print_input_filename</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>show_help_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"Main options:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avformat_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_help_children</name><argument_list>(<argument><expr><call><name>avcodec_get_class</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_read_interval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interval_spec</name></decl></parameter>,
<parameter><decl><type><name>ReadInterval</name> <modifier>*</modifier></type><name>interval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name>interval_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>spec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid empty interval specification\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>has_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>start_is_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>start_is_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>interval</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid interval start specification '%s'\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>has_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>us</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>has_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>-&gt;</operator><name>end_is_offset</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>duration_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lli</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <name>lli</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid or negative value '%s' for duration number of frames\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>lli</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>duration_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid interval end/duration specification '%s'\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>us</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>-&gt;</operator><name>has_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_read_intervals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intervals_spec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name>intervals_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>spec</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>read_intervals</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>read_intervals</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_intervals</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>read_intervals_nb</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>read_intervals_nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>read_intervals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_read_interval</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>read_intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing read interval #%d '%s'\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Parsed log interval "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_read_interval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>read_intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>read_intervals_nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_read_intervals</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>parse_read_intervals</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_pretty</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>show_value_unit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_value_prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_byte_value_binary_prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_value_sexagesimal_format</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_section</name><parameter_list>(<parameter><decl><type><name>SectionID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SectionID</name> <modifier>*</modifier></type><name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>sections</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c%c"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_WRAPPER</name></expr> ?</condition><then> <expr><literal type="char">'W'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_IS_ARRAY</name></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>section</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SECTION_FLAG_HAS_VARIABLE_FIELDS</name></expr> ?</condition><then> <expr><literal type="char">'V'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*c %s"</literal></expr></argument>, <argument><expr><name>level</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name><name>section</name><operator>-&gt;</operator><name>unique_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pid</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>children_ids</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pid</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>pid</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_section</name><argument_list>(<argument><expr><operator>*</operator><name>pid</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_sections</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Sections:\n"</literal>
<literal type="string">"W.. = Section is a wrapper (contains other sections, no local entries)\n"</literal>
<literal type="string">".A. = Section contains an array of elements of the same type\n"</literal>
<literal type="string">"..V = Section may contain a variable number of fields with variable keys\n"</literal>
<literal type="string">"FLAGS NAME/UNIQUE_NAME\n"</literal>
<literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_section</name><argument_list>(<argument><expr><name>SECTION_ID_ROOT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_show_versions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mark_section_show_entries</name><argument_list>(<argument><expr><name>SECTION_ID_PROGRAM_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mark_section_show_entries</name><argument_list>(<argument><expr><name>SECTION_ID_LIBRARY_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_OPT_SHOW_SECTION</name><parameter_list>(<parameter><type><name>section</name></type></parameter>, <parameter><type><name>target_section_id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int opt_show_##section(void *optctx, const char *opt, const char *arg) { mark_section_show_entries(SECTION_ID_##target_section_id, 1, NULL); return 0; }</cpp:value></cpp:define>






<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>chapters</argument>, <argument>CHAPTERS</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>error</argument>, <argument>ERROR</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>format</argument>, <argument>FORMAT</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>frames</argument>, <argument>FRAMES</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>library_versions</argument>, <argument>LIBRARY_VERSIONS</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>packets</argument>, <argument>PACKETS</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>pixel_formats</argument>, <argument>PIXEL_FORMATS</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>program_version</argument>, <argument>PROGRAM_VERSION</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>streams</argument>, <argument>STREAMS</argument>)</argument_list></macro>
<macro><name>DEFINE_OPT_SHOW_SECTION</name><argument_list>(<argument>programs</argument>, <argument>PROGRAMS</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OptionDef</name></type> <name><name>real_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>CMDUTILS_COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"f"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_format</name></expr>}</block></expr>, <expr><literal type="string">"force format"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unit"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{<expr><operator>&amp;</operator><name>show_value_unit</name></expr>}</block></expr>, <expr><literal type="string">"show unit of the displayed values"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prefix"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{<expr><operator>&amp;</operator><name>use_value_prefix</name></expr>}</block></expr>, <expr><literal type="string">"use SI prefixes for the displayed values"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"byte_binary_prefix"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{<expr><operator>&amp;</operator><name>use_byte_value_binary_prefix</name></expr>}</block></expr>,
<expr><literal type="string">"use binary prefixes for byte units"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sexagesimal"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{<expr><operator>&amp;</operator><name>use_value_sexagesimal_format</name></expr>}</block></expr>,
<expr><literal type="string">"use sexagesimal format HOURS:MM:SS.MICROSECONDS for time units"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pretty"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_pretty</name></expr>}</block></expr>,
<expr><literal type="string">"prettify the format of displayed values, make it more human readable"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print_format"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>print_format</name></expr> }</block></expr>,
<expr><literal type="string">"set the output printing format (available formats are: default, compact, csv, flat, ini, json, xml)"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"of"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>print_format</name></expr> }</block></expr>, <expr><literal type="string">"alias for -print_format"</literal></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"select_streams"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>stream_specifier</name></expr> }</block></expr>, <expr><literal type="string">"select the specified streams"</literal></expr>, <expr><literal type="string">"stream_specifier"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sections"</literal></expr>, <expr><name>OPT_EXIT</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_sections</name></expr>}</block></expr>, <expr><literal type="string">"print sections structure and section information, and exit"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_data"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_show_data</name></expr> }</block></expr>, <expr><literal type="string">"show packets data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_data_hash"</literal></expr>, <expr><name>OPT_STRING</name> <operator>|</operator> <name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>show_data_hash</name></expr> }</block></expr>, <expr><literal type="string">"show packets data hash"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_error"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_error</name></expr> }</block></expr>, <expr><literal type="string">"show probing error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_format"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_format</name></expr> }</block></expr>, <expr><literal type="string">"show format/container info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_frames</name></expr> }</block></expr>, <expr><literal type="string">"show frames info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_format_entry"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_show_format_entry</name></expr>}</block></expr>,
<expr><literal type="string">"show a particular entry from the format/container info"</literal></expr>, <expr><literal type="string">"entry"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_entries"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_show_entries</name></expr>}</block></expr>,
<expr><literal type="string">"show a set of specified entries"</literal></expr>, <expr><literal type="string">"entry_list"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"show_log"</literal></expr>, <expr><name>OPT_INT</name><operator>|</operator><name>HAS_ARG</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_show_log</name></expr> }</block></expr>, <expr><literal type="string">"show log"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"show_packets"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_packets</name></expr> }</block></expr>, <expr><literal type="string">"show packets info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_programs"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_programs</name></expr> }</block></expr>, <expr><literal type="string">"show programs info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_streams"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_streams</name></expr> }</block></expr>, <expr><literal type="string">"show streams info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_chapters"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_chapters</name></expr> }</block></expr>, <expr><literal type="string">"show chapters info"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"count_frames"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_count_frames</name></expr> }</block></expr>, <expr><literal type="string">"count the number of frames per stream"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"count_packets"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>do_count_packets</name></expr> }</block></expr>, <expr><literal type="string">"count the number of packets per stream"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_program_version"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_program_version</name></expr> }</block></expr>, <expr><literal type="string">"show ffprobe version"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_library_versions"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_library_versions</name></expr> }</block></expr>, <expr><literal type="string">"show library versions"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_versions"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_versions</name></expr> }</block></expr>, <expr><literal type="string">"show program and library versions"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_pixel_formats"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <operator>&amp;</operator><name>opt_show_pixel_formats</name></expr> }</block></expr>, <expr><literal type="string">"show pixel format descriptions"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"show_private_data"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>show_private_data</name></expr> }</block></expr>, <expr><literal type="string">"show private data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"private"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>show_private_data</name></expr> }</block></expr>, <expr><literal type="string">"same as show_private_data"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bitexact"</literal></expr>, <expr><name>OPT_BOOL</name></expr>, <expr><block>{<expr><operator>&amp;</operator><name>do_bitexact</name></expr>}</block></expr>, <expr><literal type="string">"force bitexact output"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"read_intervals"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_read_intervals</name></expr>}</block></expr>, <expr><literal type="string">"set read intervals"</literal></expr>, <expr><literal type="string">"read_intervals"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>HAS_ARG</name> <operator>|</operator> <name>OPT_AUDIO</name> <operator>|</operator> <name>OPT_VIDEO</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_default</name></expr>}</block></expr>, <expr><literal type="string">"generic catch all option"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_input_file_i</name></expr>}</block></expr>, <expr><literal type="string">"read specified file"</literal></expr>, <expr><literal type="string">"input_file"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"print_filename"</literal></expr>, <expr><name>HAS_ARG</name></expr>, <expr><block>{<expr><operator>.</operator><name>func_arg</name> <operator>=</operator> <name>opt_print_filename</name></expr>}</block></expr>, <expr><literal type="string">"override the printed input filename"</literal></expr>, <expr><literal type="string">"print_file"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"find_stream_info"</literal></expr>, <expr><name>OPT_BOOL</name> <operator>|</operator> <name>OPT_INPUT</name> <operator>|</operator> <name>OPT_EXPERT</name></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>find_stream_info</name></expr> }</block></expr>,
<expr><literal type="string">"read and decode the streams to fill missing information with heuristics"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>check_section_show_entries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>section_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>section</name></name> <modifier>*</modifier></type><name>section</name> <init>= <expr><operator>&amp;</operator><name><name>sections</name><index>[<expr><name>section_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sections</name><index>[<expr><name>section_id</name></expr>]</index></name><operator>.</operator><name>show_all_entries</name> <operator>||</operator> <name><name>sections</name><index>[<expr><name>section_id</name></expr>]</index></name><operator>.</operator><name>entries_to_show</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name><name>section</name><operator>-&gt;</operator><name>children_ids</name></name></expr>;</init> <condition><expr><operator>*</operator><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_section_show_entries</name><argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DO_SHOW</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>varname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (check_section_show_entries(SECTION_ID_##id)) do_show_##varname = 1; } while (0)</cpp:value></cpp:define>




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Writer</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WriterContext</name> <modifier>*</modifier></type><name>wctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w_name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w_args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_dynload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log_set_flags</name><argument_list>(<argument><expr><name>AV_LOG_SKIP_REPEATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_exit</name><argument_list>(<argument><expr><name>ffprobe_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <name>real_options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_loglevel</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>
<expr_stmt><expr><call><name>avdevice_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>show_banner</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_options</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>opt_input_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_log</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>CHAPTERS</name></expr></argument>, <argument><expr><name>chapters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>FORMAT</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>FRAMES</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>LIBRARY_VERSIONS</name></expr></argument>, <argument><expr><name>library_versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PACKETS</name></expr></argument>, <argument><expr><name>packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PIXEL_FORMATS</name></expr></argument>, <argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PIXEL_FORMAT_FLAGS</name></expr></argument>, <argument><expr><name>pixel_format_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PIXEL_FORMAT_COMPONENTS</name></expr></argument>, <argument><expr><name>pixel_format_components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PROGRAM_VERSION</name></expr></argument>, <argument><expr><name>program_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PROGRAMS</name></expr></argument>, <argument><expr><name>programs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>STREAMS</name></expr></argument>, <argument><expr><name>streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>STREAM_DISPOSITION</name></expr></argument>, <argument><expr><name>stream_disposition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PROGRAM_STREAM_DISPOSITION</name></expr></argument>, <argument><expr><name>stream_disposition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>CHAPTER_TAGS</name></expr></argument>, <argument><expr><name>chapter_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>FORMAT_TAGS</name></expr></argument>, <argument><expr><name>format_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>FRAME_TAGS</name></expr></argument>, <argument><expr><name>frame_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PROGRAM_TAGS</name></expr></argument>, <argument><expr><name>program_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>STREAM_TAGS</name></expr></argument>, <argument><expr><name>stream_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PROGRAM_STREAM_TAGS</name></expr></argument>, <argument><expr><name>stream_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_DO_SHOW</name><argument_list>(<argument><expr><name>PACKET_TAGS</name></expr></argument>, <argument><expr><name>packet_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_bitexact</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>do_show_program_version</name> <operator>||</operator> <name>do_show_library_versions</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"-bitexact and -show_program_version or -show_library_versions "</literal>
<literal type="string">"options are incompatible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>writer_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>print_format</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>print_format</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>print_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w_name</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>print_format</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"No name specified for the output format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w_args</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_data_hash</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_hash_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><name>show_data_hash</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unknown hash algorithm '%s'\nKnown algorithms:"</literal></expr></argument>,
<argument><expr><name>show_data_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>av_hash_names</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>writer_get_by_name</name><argument_list>(<argument><expr><name>w_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown output format with name '%s'\n"</literal></expr></argument>, <argument><expr><name>w_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>writer_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w_args</name></expr></argument>,
<argument><expr><name>sections</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>&amp;</operator><name>xml_writer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>string_validation_utf8_flags</name></name> <operator>|=</operator> <name>AV_UTF8_FLAG_EXCLUDE_XML_INVALID_CONTROL_CODES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_header</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>SECTION_ID_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_show_program_version</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffprobe_show_program_version</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_library_versions</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffprobe_show_library_versions</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>do_show_pixel_formats</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffprobe_show_pixel_formats</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_filename</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>do_show_format</name> <operator>||</operator> <name>do_show_programs</name> <operator>||</operator> <name>do_show_streams</name> <operator>||</operator> <name>do_show_chapters</name> <operator>||</operator> <name>do_show_packets</name> <operator>||</operator> <name>do_show_error</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>do_show_program_version</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_show_library_versions</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_show_pixel_formats</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"You have to specify one input file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Use -h to get full help or, even better, run 'man %s'.\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>input_filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>probe_file</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>input_filename</name></expr></argument>, <argument><expr><name>print_input_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>do_show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>show_error</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>writer_print_section_footer</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writer_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>print_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hash_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uninit_opts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries_to_show</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avformat_network_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
