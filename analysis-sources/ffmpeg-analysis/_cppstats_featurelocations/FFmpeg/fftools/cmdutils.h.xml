<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\fftools\cmdutils.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FFTOOLS_CMDUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFTOOLS_CMDUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>main</name></cpp:undef> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>program_name</name><index>[]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name>program_birth_year</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name><name>avcodec_opts</name><index>[<expr><name>AVMEDIA_TYPE_NB</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVFormatContext</name> <modifier>*</modifier></type><name>avformat_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>sws_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>swr_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>format_opts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>codec_opts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>resample_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hide_banner</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>register_exit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>void</name></type> <name>exit_program</name><argument_list>(<argument><expr><name>int</name> <name>ret</name></expr></argument>)</argument_list> <name>av_noreturn</name></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>init_dynload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>init_opts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>uninit_opts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>log_callback_help</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>opt_cpuflags</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>opt_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>opt_loglevel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>opt_report</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>opt_max_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>opt_codec_debug</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>opt_timelimit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>double</name></type> <name>parse_number_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int64_t</name></type> <name>parse_time_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_duration</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>SpecifierOpt</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>specifier</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ui64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dbl</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>SpecifierOpt</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OptionDef</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ARG</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_BOOL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXPERT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STRING</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_VIDEO</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_AUDIO</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INT</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_FLOAT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SUBTITLE</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INT64</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EXIT</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DATA</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PERFILE</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_OFFSET</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_SPEC</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_TIME</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DOUBLE</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INPUT</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_OUTPUT</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define>
<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst_ptr</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func_arg</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argname</name></decl>;</decl_stmt>
}</block></struct></type> <name>OptionDef</name>;</typedef>










<function_decl><type><name>void</name></type> <name>show_help_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_flags</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rej_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alt_flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDUTILS_COMMON_OPTIONS_AVDEVICE</name></cpp:macro> <cpp:value>{ "sources" , OPT_EXIT | HAS_ARG, { .func_arg = show_sources }, "list sources of the input device", "device" }, { "sinks" , OPT_EXIT | HAS_ARG, { .func_arg = show_sinks }, "list sinks of the output device", "device" },</cpp:value></cpp:define> 





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDUTILS_COMMON_OPTIONS_AVDEVICE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDUTILS_COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "L", OPT_EXIT, { .func_arg = show_license }, "show license" }, { "h", OPT_EXIT, { .func_arg = show_help }, "show help", "topic" }, { "?", OPT_EXIT, { .func_arg = show_help }, "show help", "topic" }, { "help", OPT_EXIT, { .func_arg = show_help }, "show help", "topic" }, { "-help", OPT_EXIT, { .func_arg = show_help }, "show help", "topic" }, { "version", OPT_EXIT, { .func_arg = show_version }, "show version" }, { "buildconf", OPT_EXIT, { .func_arg = show_buildconf }, "show build configuration" }, { "formats", OPT_EXIT, { .func_arg = show_formats }, "show available formats" }, { "muxers", OPT_EXIT, { .func_arg = show_muxers }, "show available muxers" }, { "demuxers", OPT_EXIT, { .func_arg = show_demuxers }, "show available demuxers" }, { "devices", OPT_EXIT, { .func_arg = show_devices }, "show available devices" }, { "codecs", OPT_EXIT, { .func_arg = show_codecs }, "show available codecs" }, { "decoders", OPT_EXIT, { .func_arg = show_decoders }, "show available decoders" }, { "encoders", OPT_EXIT, { .func_arg = show_encoders }, "show available encoders" }, { "bsfs", OPT_EXIT, { .func_arg = show_bsfs }, "show available bit stream filters" }, { "protocols", OPT_EXIT, { .func_arg = show_protocols }, "show available protocols" }, { "filters", OPT_EXIT, { .func_arg = show_filters }, "show available filters" }, { "pix_fmts", OPT_EXIT, { .func_arg = show_pix_fmts }, "show available pixel formats" }, { "layouts", OPT_EXIT, { .func_arg = show_layouts }, "show standard channel layouts" }, { "sample_fmts", OPT_EXIT, { .func_arg = show_sample_fmts }, "show available audio sample formats" }, { "colors", OPT_EXIT, { .func_arg = show_colors }, "show available color names" }, { "loglevel", HAS_ARG, { .func_arg = opt_loglevel }, "set logging level", "loglevel" }, { "v", HAS_ARG, { .func_arg = opt_loglevel }, "set logging level", "loglevel" }, { "report", 0, { .func_arg = opt_report }, "generate a report" }, { "max_alloc", HAS_ARG, { .func_arg = opt_max_alloc }, "set maximum size of a single allocated block", "bytes" }, { "cpuflags", HAS_ARG | OPT_EXPERT, { .func_arg = opt_cpuflags }, "force specific cpu flags", "flags" }, { "hide_banner", OPT_BOOL | OPT_EXPERT, {&amp;hide_banner}, "do not show program banner", "hide_banner" }, CMDUTILS_COMMON_OPTIONS_AVDEVICE</cpp:value></cpp:define> 

































<function_decl><type><name>void</name></type> <name>show_help_children</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>show_help_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>show_help</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>parse_arg_function</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>parse_option</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>






<typedef>typedef <type><struct>struct <name>Option</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>Option</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OptionGroupDef</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>OptionGroupDef</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OptionGroup</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>group_def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Option</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>codec_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>format_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>resample_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>sws_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>swr_opts</name></decl>;</decl_stmt>
}</block></struct></type> <name>OptionGroup</name>;</typedef>





<typedef>typedef <type><struct>struct <name>OptionGroupList</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>group_def</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_groups</name></decl>;</decl_stmt>
}</block></struct></type> <name>OptionGroupList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OptionParseContext</name> <block>{
<decl_stmt><decl><type><name>OptionGroup</name></type> <name>global_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionGroupList</name> <modifier>*</modifier></type><name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_groups</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>OptionGroup</name></type> <name>cur_group</name></decl>;</decl_stmt>
}</block></struct></type> <name>OptionParseContext</name>;</typedef>






<function_decl><type><name>int</name></type> <name>parse_optgroup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><name>OptionGroup</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>int</name></type> <name>split_commandline</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OptionGroupDef</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_groups</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>uninit_parse_context</name><parameter_list>(<parameter><decl><type><name>OptionParseContext</name> <modifier>*</modifier></type><name>octx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>parse_loglevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>locate_option</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>check_stream_specifier</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>filter_codec_opts</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>setup_find_stream_info_opts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>codec_opts</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>print_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>show_banner</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OptionDef</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>show_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_buildconf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_license</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_formats</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_muxers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_demuxers</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_devices</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVDEVICE</name></expr></cpp:if>




<function_decl><type><name>int</name></type> <name>show_sinks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>show_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>int</name></type> <name>show_codecs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>show_decoders</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>show_encoders</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_filters</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_bsfs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_protocols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_pix_fmts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>show_layouts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>show_sample_fmts</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>show_colors</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>read_yesno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>get_preset_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>filename_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>preset_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_name</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name> <modifier>*</modifier></type><name>grow_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>media_type_string</name></cpp:macro> <cpp:value>av_get_media_type_string</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROW_ARRAY</name><parameter_list>(<parameter><type><name>array</name></type></parameter>, <parameter><type><name>nb_elems</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>array = grow_array(array, sizeof(*array), &amp;nb_elems, nb_elems + 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PIX_FMT_NAME</name><parameter_list>(<parameter><type><name>pix_fmt</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>const char *name = av_get_pix_fmt_name(pix_fmt);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CODEC_NAME</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>const char *name = avcodec_descriptor_get(id)-&gt;name;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SAMPLE_FMT_NAME</name><parameter_list>(<parameter><type><name>sample_fmt</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>const char *name = av_get_sample_fmt_name(sample_fmt)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SAMPLE_RATE_NAME</name><parameter_list>(<parameter><type><name>rate</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>char name[16];snprintf(name, sizeof(name), "%d", rate);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CH_LAYOUT_NAME</name><parameter_list>(<parameter><type><name>ch_layout</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>char name[16];snprintf(name, sizeof(name), "0x%"PRIx64, ch_layout);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CH_LAYOUT_DESC</name><parameter_list>(<parameter><type><name>ch_layout</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>char name[128];av_get_channel_layout_string(name, sizeof(name), 0, ch_layout);</cpp:value></cpp:define>



<function_decl><type><name>double</name></type> <name>get_rotation</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
