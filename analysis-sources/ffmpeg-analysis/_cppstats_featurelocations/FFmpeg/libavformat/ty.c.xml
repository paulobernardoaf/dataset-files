<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\ty.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERIES1_PES_LENGTH</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERIES2_PES_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PES_LENGTH</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PES_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTIVO_PTS_OFFSET</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_PTS_OFFSET</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PTS_OFFSET</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_PTS_OFFSET</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_PKT_LENGTH</name></cpp:macro> <cpp:value>1536</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_VideoPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_MPEGAudioPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xc0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ty_AC3AudioPacket</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xbd</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIVO_PES_FILEID</name></cpp:macro> <cpp:value>0xf5467abd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro> <cpp:value>(128 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_PEEK_COUNT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>TyRecHdr</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>rec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subrec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ty_pts</name></decl>;</decl_stmt> 
}</block></struct></type> <name>TyRecHdr</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TIVO_TYPE_UNKNOWN</name></decl>,
<decl><name>TIVO_TYPE_SA</name></decl>,
<decl><name>TIVO_TYPE_DTIVO</name></decl>
}</block></enum></type> <name>TiVo_type</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TIVO_SERIES_UNKNOWN</name></decl>,
<decl><name>TIVO_SERIES1</name></decl>,
<decl><name>TIVO_SERIES2</name></decl>
}</block></enum></type> <name>TiVo_series</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>TIVO_AUDIO_UNKNOWN</name></decl>,
<decl><name>TIVO_AUDIO_AC3</name></decl>,
<decl><name>TIVO_AUDIO_MPEG</name></decl>
}</block></enum></type> <name>TiVo_audio</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TySeqTable</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chunk_bitmask</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TySeqTable</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TYDemuxContext</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>cur_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cur_chunk_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TiVo_type</name></type> <name>tivo_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>TiVo_series</name></type> <name>tivo_series</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>TiVo_audio</name></type> <name>audio_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pes_length</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pts_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pes_buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pes_buf_cnt</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>ac3_pkt_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_ty_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>seq_table_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>first_audio_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_audio_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_video_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>rec_hdrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cur_rec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_recs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>seq_rec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>TySeqTable</name> <modifier>*</modifier></type><name>seq_table</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>first_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chunk</name><index>[<expr><name>CHUNK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TYDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">12</literal> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>CHUNK_SIZE</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name> <operator>&amp;&amp;</operator>
<call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator>
<call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>CHUNK_SIZE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TyRecHdr</name> <modifier>*</modifier></type><name>parse_chunk_headers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_recs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>hdrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rec_hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdrs</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>num_recs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TyRecHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdrs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>record_header</name> <init>= <expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rec_hdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_type</name></name> <operator>=</operator> <name><name>record_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name> <operator>=</operator> <name><name>record_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ty_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_size</name></name> <operator>=</operator> <operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<name><name>record_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator>
<operator>(</operator><name><name>record_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>ty_pts</name></name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record_header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>hdrs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_es_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>search_len</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analyze_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_recs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_6e0</name></decl>, <decl><type ref="prev"/><name>num_be0</name></decl>, <decl><type ref="prev"/><name>num_9c0</name></decl>, <decl><type ref="prev"/><name>num_3c0</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>num_recs</name> <operator>=</operator> <name><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_recs</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"probe: chunk has %d recs\n"</literal></expr></argument>, <argument><expr><name>num_recs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> <operator>=</operator> <call><name>parse_chunk_headers</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>num_recs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdrs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name>num_6e0</name> <operator>=</operator> <name>num_be0</name> <operator>=</operator> <name>num_9c0</name> <operator>=</operator> <name>num_3c0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subrec_type</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x6e0</literal></expr>:</case>
<expr_stmt><expr><name>num_6e0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xbe0</literal></expr>:</case>
<expr_stmt><expr><name>num_be0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x3c0</literal></expr>:</case>
<expr_stmt><expr><name>num_3c0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x9c0</literal></expr>:</case>
<expr_stmt><expr><name>num_9c0</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"probe: chunk has %d 0x6e0 recs, %d 0xbe0 recs.\n"</literal></expr></argument>,
<argument><expr><name>num_6e0</name></expr></argument>, <argument><expr><name>num_be0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num_6e0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected Series 1 Tivo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>=</operator> <name>TIVO_SERIES1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name> <operator>=</operator> <name>SERIES1_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_be0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected Series 2 Tivo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>=</operator> <name>TIVO_SERIES2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name> <operator>=</operator> <name>SERIES2_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_9c0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected AC-3 Audio (DTivo)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>=</operator> <name>TIVO_AUDIO_AC3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_DTIVO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>=</operator> <name>AC3_PTS_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name> <operator>=</operator> <name>AC3_PES_LENGTH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_3c0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>=</operator> <name>TIVO_AUDIO_MPEG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected MPEG Audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>==</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_offset</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name>num_recs</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data_offset</name> <operator>+</operator> <name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_size</name> <operator>&gt;</operator> <name>CHUNK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>subrec_type</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_type</name><operator>)</operator> <operator>==</operator> <literal type="number">0x3c0</literal> <operator>&amp;&amp;</operator> <name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_size</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pes_offset</name> <init>= <expr><call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>chunk</name><index>[<expr><name>data_offset</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pes_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chunk</name><index>[<expr><name>data_offset</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>pes_offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected Stand-Alone Tivo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_SA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>=</operator> <name>SA_PTS_OFFSET</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"detected DirecTV Tivo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>=</operator> <name>TIVO_TYPE_DTIVO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>=</operator> <name>DTIVO_PTS_OFFSET</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data_offset</name> <operator>+=</operator> <name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>first_audio_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_video_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHUNK_PEEK_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><name>CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>analyze_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>!=</operator> <name>TIVO_SERIES_UNKNOWN</name> <operator>&amp;&amp;</operator>
<name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>!=</operator> <name>TIVO_AUDIO_UNKNOWN</name> <operator>&amp;&amp;</operator>
<name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>!=</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES_UNKNOWN</name> <operator>||</operator>
<name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_UNKNOWN</name> <operator>||</operator>
<name><name>ty</name><operator>-&gt;</operator><name>tivo_type</name></name> <operator>==</operator> <name>TIVO_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ast</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ast</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_MPEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>first_chunk</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_master</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>map_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>








<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>map_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table_size</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <operator>(</operator><literal type="number">8LL</literal> <operator>+</operator> <name>map_size</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TySeqTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ty</name><operator>-&gt;</operator><name>seq_table_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>&gt;=</operator> <name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map_size</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported SEQ bitmap size in master chunk.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>map_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>chunk_bitmask</name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>map_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_size</name></decl>, <decl><type ref="prev"/><name>num_recs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"parsing ty chunk #%d\n"</literal></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>read_size</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><name>CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>read_size</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TIVO_PES_FILEID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_master</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><call><name>get_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>num_recs</name></name> <operator>=</operator> <name>num_recs</name> <operator>=</operator> <operator>(</operator><name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_rec</name></name> <operator>=</operator> <operator>(</operator><name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>seq_rec</name></name> <operator>!=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_rec</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x8000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>num_recs</name></name> <operator>=</operator> <name>num_recs</name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>seq_rec</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>chunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_rec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>first_chunk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"chunk has %d records\n"</literal></expr></argument>, <argument><expr><name>num_recs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_recs</name> <operator>*</operator> <literal type="number">16</literal> <operator>&gt;=</operator> <name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name></name> <operator>=</operator> <call><name>parse_chunk_headers</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>num_recs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>num_recs</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>demux_video</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>subrec_type</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>rec_size</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>es_offset1</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_packet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name>subrec_type</name> <operator>!=</operator> <literal type="number">0x0c</literal> <operator>&amp;&amp;</operator>
<name>subrec_type</name> <operator>!=</operator> <literal type="number">0x08</literal> <operator>&amp;&amp;</operator> <name>rec_size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>es_offset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_VideoPacket</name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>es_offset1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_video_pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(
<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+</operator> <name>es_offset1</name> <operator>+</operator> <name>VIDEO_PTS_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x06</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>rec_size</name> <operator>&gt;=</operator> <name>VIDEO_PES_LENGTH</name> <operator>+</operator> <name>es_offset1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_size</name></name> <operator>-</operator> <name>VIDEO_PES_LENGTH</name> <operator>-</operator> <name>es_offset1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>VIDEO_PES_LENGTH</name> <operator>+</operator> <name>es_offset1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"video rec type 0x%02x has short PES"</literal>
<literal type="string">" (%"</literal><name>PRId64</name><literal type="string">" bytes)\n"</literal></expr></argument>, <argument><expr><name>subrec_type</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x06</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_packet</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>!=</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x0c</literal> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x08</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x07</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_ty_pts</name></name> <operator>=</operator> <name><name>rec_hdr</name><operator>-&gt;</operator><name>ty_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_ty_pts</name></name> <operator>+=</operator> <literal type="number">35000000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>last_video_pts</name></name> <operator>&gt;</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_video_pts</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_video_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>got_packet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_sync_pes</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rec_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name></expr></argument> &gt;</argument_list></name> <name>rec_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"PES header at %"</literal><name>PRId32</name><literal type="string">" not complete in record. storing.\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rec_len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"PES header not found in record of %"</literal><name>PRId32</name><literal type="string">" bytes!\n"</literal></expr></argument>, <argument><expr><name>rec_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>rec_len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name> <operator>=</operator> <name>rec_len</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>rec_len</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[ <expr><name>offset</name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pts_offset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>first_audio_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>first_audio_pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name></expr></argument>, <argument><expr><name>rec_len</name> <operator>-</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>demux_audio</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>rec_hdr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>subrec_type</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>subrec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>rec_size</name> <init>= <expr><name><name>rec_hdr</name><operator>-&gt;</operator><name>rec_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>es_offset1</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need</name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_length</name></name> <operator>-</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"continuing PES header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;=</operator> <name>rec_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>need</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_MPEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>es_offset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>,
<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>es_offset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_AC3AudioPacket</name></expr></argument>,
<argument><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>es_offset1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Can't find audio PES header in packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>pes_buffer</name><index>[<expr><name>es_offset1</name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>pts_offset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>pes_buf_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rec_size</name> <operator>-</operator> <name>need</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name> <operator>-</operator> <name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name> <operator>-</operator> <name>need</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>audio_type</name></name> <operator>==</operator> <name>TIVO_AUDIO_AC3</name> <operator>&amp;&amp;</operator>
<name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>ac3_pkt_size</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>AC3_PKT_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>ac3_pkt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>ac3_pkt_size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>es_offset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_MPEGAudioPacket</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>es_offset1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rec_size</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>SA_PTS_OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>first_audio_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>first_audio_pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>check_sync_pes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>es_offset1</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ty</name><operator>-&gt;</operator><name>last_audio_pts</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>subrec_type</name> <operator>==</operator> <literal type="number">0x09</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ty</name><operator>-&gt;</operator><name>chunk</name></name> <operator>+</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>es_offset1</name> <operator>=</operator> <call><name>find_es_header</name><argument_list>(<argument><expr><name>ty_AC3AudioPacket</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>check_sync_pes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>es_offset1</name></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>tivo_series</name></name> <operator>==</operator> <name>TIVO_SERIES2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>AC3_PKT_LENGTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>ac3_pkt_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>ac3_pkt_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name>rec_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TyRecHdr</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>rec_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name></name> <operator>||</operator> <name><name>ty</name><operator>-&gt;</operator><name>first_chunk</name></name> <operator>||</operator> <name><name>ty</name><operator>-&gt;</operator><name>cur_rec</name></name> <operator>&gt;=</operator> <name><name>ty</name><operator>-&gt;</operator><name>num_recs</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ty</name><operator>-&gt;</operator><name>num_recs</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name><index>[<expr><name><name>ty</name><operator>-&gt;</operator><name>cur_rec</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rec_size</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>rec_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_rec</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rec_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+</operator> <name><name>rec</name><operator>-&gt;</operator><name>rec_size</name></name> <operator>&gt;</operator> <name>CHUNK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>rec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VIDEO_ID</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>demux_video</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AUDIO_ID</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>demux_audio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Invalid record type 0x%02x\n"</literal></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>rec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<case>case <expr><literal type="number">0x03</literal></expr>:</case> 
<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<expr_stmt><expr><name><name>ty</name><operator>-&gt;</operator><name>cur_chunk_pos</name></name> <operator>+=</operator> <name><name>rec</name><operator>-&gt;</operator><name>rec_size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ty_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TYDemuxContext</name> <modifier>*</modifier></type><name>ty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>seq_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ty</name><operator>-&gt;</operator><name>rec_hdrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ty_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ty"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TiVo TY Stream"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TYDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ty_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ty_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ty_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>ty_read_close</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ty,ty+"</literal></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_TS_DISCONT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
