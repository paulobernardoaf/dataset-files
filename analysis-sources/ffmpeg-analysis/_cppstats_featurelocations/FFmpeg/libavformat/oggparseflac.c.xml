<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\oggparseflac.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/flac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oggdec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OGG_FLAC_METADATA_TYPE_STREAMINFO</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>flac_header</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mdt</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>mdt</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mdt</name> <operator>==</operator> <name>OGG_FLAC_METADATA_TYPE_STREAMINFO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>streaminfo_start</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>samplerate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_FLAC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_HEADERS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>streaminfo_start</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samplerate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mdt</name> <operator>==</operator> <name>FLAC_METADATA_TYPE_VORBIS_COMMENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vorbis_stream_comment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>old_flac_header</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><call><name>av_parser_init</name><argument_list>(<argument><expr><name>AV_CODEC_ID_FLAC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parser</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_FLAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avctx</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_parser_parse2</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>,
<argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_parser_close</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_parser_close</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_flac_codec</name> <init>= <expr><block>{
<expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="string">"\177FLAC"</literal></expr>,
<expr><operator>.</operator><name>magicsize</name> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <name>flac_header</name></expr>,
<expr><operator>.</operator><name>nb_header</name> <operator>=</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_old_flac_codec</name> <init>= <expr><block>{
<expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="string">"fLaC"</literal></expr>,
<expr><operator>.</operator><name>magicsize</name> <operator>=</operator> <literal type="number">4</literal></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <name>old_flac_header</name></expr>,
<expr><operator>.</operator><name>nb_header</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
