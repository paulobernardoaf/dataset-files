<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\httpauth.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldecode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_basic_params</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"realm="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_digest_params</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DigestParams</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>digest_params</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"realm="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"nonce="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"opaque="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"algorithm="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"qop="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"stale="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>stale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>stale</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_digest_update</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DigestParams</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>digest_params</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"nextnonce="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>choose_qop</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>qop</name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>ptr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>end</name> <operator>||</operator> <call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ptr</name> <operator>==</operator> <name>qop</name> <operator>||</operator> <call><name>av_isspace</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>qop</name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>qop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_http_auth_handle_header</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WWW-Authenticate"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Authenticate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"Basic "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>&lt;=</operator> <name>HTTP_AUTH_BASIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>=</operator> <name>HTTP_AUTH_BASIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_basic_params</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"Digest "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>&lt;=</operator> <name>HTTP_AUTH_DIGEST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>=</operator> <name>HTTP_AUTH_DIGEST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>digest_params</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DigestParams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_digest_params</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>choose_qop</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>digest_params</name><operator>.</operator><name>qop</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>digest_params</name><operator>.</operator><name>qop</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>digest_params</name><operator>.</operator><name>stale</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Authentication-Info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_digest_update</name></expr></argument>,
<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>update_md5_strings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVMD5</name></name> <modifier>*</modifier></type><name>md5ctx</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>make_digest_auth</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DigestParams</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>digest_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cnonce_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cnonce</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>A1hash</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>A2hash</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>response</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AVMD5</name></name> <modifier>*</modifier></type><name>md5ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cnonce_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>cnonce</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name>cnonce_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnonce_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cnonce</name><index>[<expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cnonce_buf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>md5ctx</name> <operator>=</operator> <call><name>av_md5_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>md5ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>A1hash</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A1hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>, <argument><expr><literal type="string">"MD5"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>, <argument><expr><literal type="string">"MD5-sess"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>A1hash</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>A1hash</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A1hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>A2hash</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A2hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>A1hash</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth-int"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>update_md5_strings</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>A2hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>response</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>md5ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>, <argument><expr><literal type="string">"auth-int"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cnonce</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">150</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>authstr</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>authstr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"Authorization: Digest "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"username=\"%s\""</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", realm=\"%s\""</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", nonce=\"%s\""</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", uri=\"%s\""</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", response=\"%s\""</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", algorithm=\"%s\""</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", opaque=\"%s\""</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", qop=\"%s\""</literal></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", cnonce=\"%s\""</literal></expr></argument>, <argument><expr><name>cnonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">", nc=%s"</literal></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>authstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ff_http_auth_create_response</name><parameter_list>(<parameter><decl><type><name>HTTPAuthState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>auth</name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>==</operator> <name>HTTP_AUTH_BASIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>auth_b64_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decoded_auth</name> <init>= <expr><call><name>ff_urldecode</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decoded_auth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auth_b64_len</name> <operator>=</operator> <call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>decoded_auth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>auth_b64_len</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>authstr</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>authstr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decoded_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"Authorization: Basic "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>authstr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>authstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>auth_b64_len</name></expr></argument>, <argument><expr><name>decoded_auth</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>decoded_auth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>authstr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decoded_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>==</operator> <name>HTTP_AUTH_DIGEST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><call><name>ff_urldecode</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>username</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>password</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>password</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>authstr</name> <operator>=</operator> <call><name>make_digest_auth</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>authstr</name></expr>;</return>
</block_content>}</block></function>
</unit>
