<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\hls.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_BUFFER_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FIELD_LEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHARACTERISTICS_LEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_TIME_BASE</name></cpp:macro> <cpp:value>90000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEG_TIME_BASE_Q</name></cpp:macro> <cpp:value>(AVRational){1, MPEG_TIME_BASE}</cpp:value></cpp:define>













<enum>enum <name>KeyType</name> <block>{
<decl><name>KEY_NONE</name></decl>,
<decl><name>KEY_AES_128</name></decl>,
<decl><name>KEY_SAMPLE_AES</name></decl>
}</block>;</enum>

<struct>struct <name>segment</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>url_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>KeyType</name></name></type> <name>key_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>init_section</name></decl>;</decl_stmt>
}</block>;</struct>

<struct_decl>struct <name>rendition</name>;</struct_decl>

<enum>enum <name>PlaylistType</name> <block>{
<decl><name>PLS_TYPE_UNSPECIFIED</name></decl>,
<decl><name>PLS_TYPE_EVENT</name></decl>,
<decl><name>PLS_TYPE_VOD</name></decl>
}</block>;</enum>






<struct>struct <name>playlist</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>read_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_read_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>input_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input_next_requested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_noheader_flag</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>main_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_main_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>finished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>PlaylistType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>target_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>broken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m3u8_hold_counters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_seg_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_load_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>cur_init_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>init_sec_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>init_sec_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>init_sec_data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>init_sec_buf_read_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_url</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>is_id3_timestamped</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>id3_mpegts_timestamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>id3_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>id3_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id3_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>id3_initial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>id3_found</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>id3_changed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier></type><name>id3_deferred_extra</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seek_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seek_stream_index</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>int</name></type> <name>n_renditions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>renditions</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>n_init_sections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>init_sections</name></decl>;</decl_stmt>
}</block>;</struct>







<struct>struct <name>rendition</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>group_id</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disposition</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>variant</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>n_playlists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>playlists</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>audio_group</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>video_group</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subtitles_group</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>HLSContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_variants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>variants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_playlists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>playlists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_renditions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>renditions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m3u8_hold_counters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>live_start_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOInterruptCB</name> <modifier>*</modifier></type><name>interrupt_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>avio_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allowed_extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_reload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_persistent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_multiple</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_seekable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>playlist_pb</name></decl>;</decl_stmt>
}</block></struct></type> <name>HLSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_segment_dynarray</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>segments</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_segment_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_segment_dynarray</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_init_section_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_init_sections</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sections</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>n_init_sections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_playlist_list</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_segment_list</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_init_section_list</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>renditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_initial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_id3v2_free_extra_meta</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_read_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>playlists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_variant_list</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>playlists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>variants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_rendition_list</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_renditions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>renditions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>renditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_renditions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>new_playlist</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>playlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reset_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_mpegts_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>playlists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pls</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>variant_info</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>bandwidth</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>audio</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>video</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subtitles</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>new_variant</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variant_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pls</name> <operator>=</operator> <call><name>new_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>variant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>audio_group</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>video_group</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>subtitles_group</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>variants</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>playlists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>n_playlists</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>var</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_variant_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>variant_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"BANDWIDTH="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AUDIO="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>audio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"VIDEO="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>video</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"SUBTITLES="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>subtitles</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>key_info</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>method</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_key_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>key_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"METHOD="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>method</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"URI="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"IV="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>init_section_info</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>byterange</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>new_init_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>init_section_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_str</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>tmp_str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sec</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><literal type="string">"data:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>url_base</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sec</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>byterange</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>byterange</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>byterange</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>n_init_sections</name></name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_init_section_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>init_section_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"URI="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"BYTERANGE="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>byterange</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>byterange</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>rendition_info</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>group_id</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>assoc_language</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAX_FIELD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>defaultr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>forced</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>characteristics</name><index>[<expr><name>MAX_CHARACTERISTICS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier></type><name>new_rendition</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rendition_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier></type><name>rend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>characteristic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chr_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"AUDIO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"VIDEO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"SUBTITLES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"CLOSED-CAPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't support the type: %s\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The URI tag is REQUIRED for subtitle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't support the subtitle(uri: %s)\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rend</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rendition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rend</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>renditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_renditions</name></name></expr></argument>, <argument><expr><name>rend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>new_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><name>url_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>playlist</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rend</name><operator>-&gt;</operator><name>playlist</name><operator>-&gt;</operator><name>renditions</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rend</name><operator>-&gt;</operator><name>playlist</name><operator>-&gt;</operator><name>n_renditions</name></name></expr></argument>, <argument><expr><name>rend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>assoc_language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>langlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>langlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name><index>[<expr><name>langlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name> <operator>+</operator> <name>langlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>assoc_language</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>langlen</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>defaultr</name></name></expr></argument>, <argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>forced</name></name></expr></argument>, <argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_FORCED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chr_ptr</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>characteristics</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>characteristic</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>chr_ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>characteristic</name></expr></argument>, <argument><expr><literal type="string">"public.accessibility.describes-music-and-sound"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>characteristic</name></expr></argument>, <argument><expr><literal type="string">"public.accessibility.describes-video"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rend</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chr_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>rend</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_rendition_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rendition_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"TYPE="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"URI="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"GROUP-ID="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>group_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"LANGUAGE="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>language</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ASSOC-LANGUAGE="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>assoc_language</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>assoc_language</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"NAME="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>defaultr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>defaultr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"FORCED="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>forced</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>forced</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS="</literal></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>characteristics</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>characteristics</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>ensure_playlist</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_variant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pls</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_url_keepalive</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_HTTP_PROTOCOL</name></expr></cpp:if>
<return>return <expr><name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><call><name>ffio_geturlcontext</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pb</name><operator>)</operator><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_http_do_new_request2</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_url</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_http_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_http</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"crypto"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>url</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>url</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>url</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>url</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>allowed_extensions</name></name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_ext</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>allowed_extensions</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Filename extension of \'%s\' is not a common multimedia extension, blocked for security reasons.\n"</literal>
<literal type="string">"If you wish to override this adjust allowed_extensions, you can set it to \'ALL\' to allow all\n"</literal></expr></argument>,
<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_http</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"crypto"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"file,"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>opts2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_http</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_url_keepalive</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EXIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"keepalive request failed for '%s' with error: '%s' when opening url, retrying with new connection\n"</literal></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_cookies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_CUSTOM_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cookies"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>new_cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cookies</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"cookies"</literal></expr></argument>, <argument><expr><name>new_cookies</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_http_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>is_http_out</name> <operator>=</operator> <name>is_http</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_playlist</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_segment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_variant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>KeyType</name></name></type> <name>key_type</name> <init>= <expr><name>KEY_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_iv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>close_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seg_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seg_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>variant_info</name></name></type> <name>variant_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_str</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>cur_init_section</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_http</name> <init>= <expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_segments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_n_segments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_start_seq_no</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_http</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>in</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>playlist_pb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>playlist_pb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_url_keepalive</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>playlist_pb</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EXIT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"keepalive request failed for '%s' with error: '%s' when parsing playlist\n"</literal></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"multiple_requests"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_http</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>playlist_pb</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>close_in</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_url</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name>new_url</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_get_chomp_line</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pls</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev_start_seq_no</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_segments</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>segments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_n_segments</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PLS_TYPE_UNSPECIFIED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_get_chomp_line</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-STREAM-INF:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_variant</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>variant_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_variant_args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>variant_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-KEY:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>key_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_key_args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key_type</name> <operator>=</operator> <name>KEY_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_iv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="string">"AES-128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_type</name> <operator>=</operator> <name>KEY_AES_128</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="string">"SAMPLE-AES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key_type</name> <operator>=</operator> <name>KEY_SAMPLE_AES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="string">"0X"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_hex_to_data</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>iv</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_iv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>uri</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_rendition_args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>new_rendition</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-TARGETDURATION:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ensure_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>target_duration</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ensure_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-PLAYLIST-TYPE:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ensure_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PLS_TYPE_EVENT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"VOD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PLS_TYPE_VOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MAP:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>init_section_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ensure_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_parse_key_value</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ff_parse_key_val_cb</name><operator>)</operator> <name>handle_init_section_args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_init_section</name> <operator>=</operator> <call><name>new_init_section</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>key_type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_iv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>iv</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_type</name> <operator>!=</operator> <name>KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur_init_section</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cur_init_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cur_init_section</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-ENDLIST"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_segment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-BYTERANGE:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seg_size</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seg_offset</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Skip ('%s')\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_variant</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>new_variant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>variant_info</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>is_variant</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_segment</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ensure_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>key_type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_iv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_type</name> <operator>!=</operator> <name>KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_segment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>seg_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seg_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>=</operator> <name>seg_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seg_offset</name> <operator>+=</operator> <name>seg_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seg_size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seg_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name> <operator>=</operator> <name>cur_init_section</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>prev_segments</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>&gt;</operator> <name>prev_start_seq_no</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>prev_timestamp</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>-</operator> <name>prev_start_seq_no</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prev_n_segments</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>diff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>+=</operator> <name><name>prev_segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Media sequence change (%d -&gt; %d)"</literal>
<literal type="string">" reflected in first_timestamp: %"</literal><name>PRId64</name><literal type="string">" -&gt; %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>prev_start_seq_no</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr></argument>,
<argument><expr><name>prev_timestamp</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>&lt;</operator> <name>prev_start_seq_no</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Media sequence changed unexpectedly: %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>prev_start_seq_no</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free_segment_dynarray</name><argument_list>(<argument><expr><name>prev_segments</name></expr></argument>, <argument><expr><name>prev_n_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>last_load_time</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>close_in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>AVFMTCTX_UNSEEKABLE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>n_playlists</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>finished</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>PLS_TYPE_EVENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_UNSEEKABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>current_segment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>-</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>next_segment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>-</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_from_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_id3</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>,
<parameter><decl><type><name>ID3v2ExtraMetaAPIC</name> <modifier>*</modifier><modifier>*</modifier></type><name>apic</name></decl></parameter>, <parameter><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra_meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>id3_priv_owner_ts</name><index>[]</index></name> <init>= <expr><literal type="string">"com.apple.streaming.transportStreamTimestamp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_id3v2_read_dict</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>, <argument><expr><name>extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>meta</name> <operator>=</operator> <operator>*</operator><name>extra_meta</name></expr>;</init> <condition><expr><name>meta</name></expr>;</condition> <incr><expr><name>meta</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"PRIV"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ID3v2ExtraMetaPRIV</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>meta</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>datasize</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>id3_priv_owner_ts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"HLS ID3 audio timestamp %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ts</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">33</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid HLS ID3 audio timestamp %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"APIC"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>apic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>apic</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>id3_has_changed_values</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>,
<parameter><decl><type><name>ID3v2ExtraMetaAPIC</name> <modifier>*</modifier></type><name>apic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>oldentry</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldentry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_initial</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_MATCH_CASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldentry</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>oldentry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>apic</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>attached_pic</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>apic</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>attached_pic</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>apic</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>apic</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>attached_pic</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_id3</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3v2ExtraMetaAPIC</name> <modifier>*</modifier></type><name>apic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier></type><name>extra_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_id3</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>apic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_mpegts_timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_found</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_id3v2_parse_apic</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name> <operator>=</operator> <name>extra_meta</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_id3v2_parse_priv_dict</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_initial</name></name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_changed</name></name> <operator>&amp;&amp;</operator> <call><name>id3_has_changed_values</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>apic</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><literal type="string">"Changing ID3 metadata in HLS audio elementary stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_id3v2_free_extra_meta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intercept_id3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id3_buf_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>current_segment</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <name>ID3v2_HEADER_SIZE</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;=</operator> <name>ID3v2_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>ID3v2_HEADER_SIZE</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <name>ID3v2_HEADER_SIZE</name> <operator>-</operator> <operator>*</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>fill_buf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fill_buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <name>ID3v2_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_id3v2_match</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>maxsize</name> <init>= <expr><ternary><condition><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>taglen</name> <init>= <expr><call><name>ff_id3v2_tag_len</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag_got_bytes</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>taglen</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>taglen</name> <operator>-</operator> <name>tag_got_bytes</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>taglen</name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too large HLS ID3 tag (%d &gt; %"</literal><name>PRId64</name><literal type="string">" bytes)\n"</literal></expr></argument>,
<argument><expr><name>taglen</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_buf_size</name></name></expr></argument>, <argument><expr><name>id3_buf_pos</name> <operator>+</operator> <name>taglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name> <operator>+</operator> <name>id3_buf_pos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag_got_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id3_buf_pos</name> <operator>+=</operator> <name>tag_got_bytes</name></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>tag_got_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>tag_got_bytes</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stripped %d HLS ID3 bytes\n"</literal></expr></argument>, <argument><expr><name>tag_got_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_from_url</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name> <operator>+</operator> <name>id3_buf_pos</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>remaining</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id3_buf_pos</name> <operator>+=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Stripped additional %d HLS ID3 bytes\n"</literal></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fill_buf</name> <operator>||</operator> <operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name></type> <name>id3ioctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3ioctx</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_buf</name></name></expr></argument>, <argument><expr><name>id3_buf_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>handle_id3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3ioctx</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>=</operator> <operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_mpegts_timestamp</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_input</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_http</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"multiple_requests"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"end_offset"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"HLS request for url '%s', offset %"</literal><name>PRId64</name><literal type="string">", playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_url</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_AES_128</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>url</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key_url</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>open_url</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to read key file %s\n"</literal></expr></argument>,
<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open key file %s\n"</literal></expr></argument>,
<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key_url</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"crypto+%s"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"crypto:%s"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"iv"</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_url</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_SAMPLE_AES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"SAMPLE-AES encryption is not supported yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>











<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_http</name> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_NONE</name> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seekret</name> <init>= <expr><call><name>avio_seek</name><argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>seekret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to seek to offset %"</literal><name>PRId64</name><literal type="string">" of HLS segment '%s'\n"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>seekret</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_init_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>max_init_section_size</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>urlsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name> <operator>==</operator> <name><name>pls</name><operator>-&gt;</operator><name>cur_init_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_init_section</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed to open an initialization section in playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>urlsize</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name>urlsize</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name>max_init_section_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Downloading an initialization section of size %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>sec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sec_size</name></expr></argument>, <argument><expr><name>max_init_section_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr></argument>, <argument><expr><name>sec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_init_section</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>init_section</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_data_len</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>default_reload_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr> </then><else>:
<expr><name><name>pls</name><operator>-&gt;</operator><name>target_duration</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>playlist_needed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_needed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_st</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>||</operator> <operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>&lt;</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stream_needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_needed</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>first_st</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>discard</name></name> <operator>&lt;</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>program</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>first_st</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>just_opened</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reload_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>segment</name></name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>needed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>input</name></name> <operator>||</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>input_read_done</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>reload_interval</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>needed</name></name> <operator>=</operator> <call><name>playlist_needed</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"No longer receiving playlist %d ('%s')\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>reload_interval</name> <operator>=</operator> <call><name>default_reload_interval</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>reload</name>:</label>
<expr_stmt><expr><name>reload_count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reload_count</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>max_reload</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;&amp;</operator>
<call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>last_load_time</name></name> <operator>&gt;=</operator> <name>reload_interval</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EXIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to reload playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>reload_interval</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>target_duration</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"skipping %d segments ahead, expired from playlists\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>m3u8_hold_counters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>m3u8_hold_counters</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>m3u8_hold_counters</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>m3u8_hold_counters</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"maybe the m3u8 list sequence have been wraped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>n_segments</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>finished</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>last_load_time</name></name> <operator>&lt;</operator> <name>reload_interval</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">100</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<goto>goto <name>reload</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>input_read_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>current_segment</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_init_section</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_multiple</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>input_next_requested</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVIOContext</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>input_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open segment %d of playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>reload</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>just_opened</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_multiple</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>http_version_opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="string">"http_version"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>http_version_opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>http_multiple</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>http_version_opt</name></expr></argument>, <argument><expr><literal type="string">"1.1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>http_version_opt</name></expr></argument>, <argument><expr><literal type="string">"2.0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_version_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>next_segment</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_multiple</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>&amp;&amp;</operator>
<name>seg</name> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_NONE</name> <operator>&amp;&amp;</operator> <call><name>av_strstart</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>input_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open next segment %d of playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>init_sec_data_len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_size</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_data_len</name></name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>
<return>return <expr><name>copy_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>current_segment</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>just_opened</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>intercept_id3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>&amp;&amp;</operator>
<name><name>seg</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>KEY_NONE</name> <operator>&amp;&amp;</operator> <call><name>av_strstart</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>input_read_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>;</expr_stmt>

<goto>goto <name>restart</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_renditions_to_variant</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_renditions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier></type><name>rend</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>renditions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rend</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>, <argument><expr><name>group_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>playlist</name></name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>playlists</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>n_playlists</name></name></expr></argument>, <argument><expr><name><name>rend</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>renditions</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>n_renditions</name></expr></argument>,
<argument><expr><name>rend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_metadata_from_renditions</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rend_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>rend_idx</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_renditions</name></name></expr>;</condition> <incr><expr><name>rend_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rendition</name></name> <modifier>*</modifier></type><name>rend</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>renditions</name><index>[<expr><name>rend_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name><name>rend</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rend</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name><name>rend</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name><name>rend</name><operator>-&gt;</operator><name>disposition</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rend_idx</name> <operator>&gt;=</operator><name><name>pls</name><operator>-&gt;</operator><name>n_renditions</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>find_timestamp_in_playlist</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>seq_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>seq_no</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><name>pos</name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>-</operator> <name>timestamp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>seq_no</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>seq_no</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_cur_seq_no</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>seq_no</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>&amp;&amp;</operator>
<call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pls</name><operator>-&gt;</operator><name>last_load_time</name></name> <operator>&gt;=</operator> <call><name>default_reload_interval</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_timestamp_in_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>seq_no</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>&amp;&amp;</operator> 
<name><name>c</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;=</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr>)</condition><block type="pseudo"><block_content>




<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>live_start_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>live_start_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>live_start_index</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>save_avio_options</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"headers"</literal></expr>, <expr><literal type="string">"http_proxy"</literal></expr>, <expr><literal type="string">"user_agent"</literal></expr>, <expr><literal type="string">"cookies"</literal></expr>, <expr><literal type="string">"referer"</literal></expr>, <expr><literal type="string">"rw_timeout"</literal></expr>, <expr><literal type="string">"icy"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>opt</name> <init>= <expr><name>opts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>opt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name> <operator>|</operator> <name>AV_OPT_ALLOW_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nested_io_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"A HLS playlist item '%s' referred to an external file '%s'. "</literal>
<literal type="string">"Opening this file was forbidden for security reasons\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_stream_to_programs</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>pls</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandwidth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bandwidth</name> <operator>!=</operator> <name><name>v</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bandwidth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"variant_bitrate"</literal></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_stream_info_from_input_stream</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>ist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MPEG_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>update_streams_from_subdemuxer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ist_idx</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>ist_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_stream_to_programs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>set_stream_info_from_input_stream</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_noheader_flag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag_needed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>has_noheader_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag_needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flag_needed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_playlist_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_variant_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_rendition_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>playlist_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>highest_cur_seq_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>save_avio_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><literal type="string">"seekable"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>http_seekable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Empty playlist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>n_segments</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>m3u8_hold_counters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"parse_playlist error %s [%s]\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>n_segments</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Empty segment [%s]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>broken</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>finished</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>n_segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>playlists</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>audio_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_renditions_to_variant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>audio_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>video_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_renditions_to_variant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>video_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>subtitles_group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_renditions_to_variant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>subtitles_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_variants</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>variant</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>variants</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>av_new_program</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>program</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"variant_bitrate"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>select_cur_seq_no</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highest_cur_seq_no</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>highest_cur_seq_no</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>in_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>finished</name></name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>==</operator> <name>highest_cur_seq_no</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>highest_cur_seq_no</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>start_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_segments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name>highest_cur_seq_no</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>read_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>INITIAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>read_buffer</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>read_buffer</name></name></expr></argument>, <argument><expr><name>INITIAL_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pls</name></expr></argument>,
<argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>probesize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>probesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>probesize</name></name></expr> </then><else>: <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>max_analyze_duration</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_analyze_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_analyze_duration</name></name></expr> </then><else>: <expr><literal type="number">4</literal> <operator>*</operator> <name>AV_TIME_BASE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_probe_input_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_fmt</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error when loading first segment '%s'\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>io_open</name></name> <operator>=</operator> <name>nested_io_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>AVFMT_FLAG_CUSTOM_IO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_copy_whiteblacklists</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_id3v2_parse_apic</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_queue_attached_pictures</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_id3v2_parse_priv</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_id3v2_free_extra_meta</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_deferred_extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No expected HTTP requests have been made\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>||</operator> <operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>n_renditions</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>renditions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>has_noheader_flag</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;</operator> <name>AVFMTCTX_NOHEADER</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_streams_from_subdemuxer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_metadata_from_renditions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_metadata_from_renditions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_metadata_from_renditions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>update_noheader_flag</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>hls_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>recheck_discard_flags</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_needed</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_needed</name> <operator>=</operator> <call><name>playlist_needed</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>broken</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_needed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>select_cur_seq_no</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>=</operator> <name>AVSEEK_FLAG_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Now receiving playlist %d, segment %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cur_needed</name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_read_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"No longer receiving playlist %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_timing_for_id3_timestamped_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>id3_offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>id3_mpegts_timestamp</name></name> <operator>+</operator>
<call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_offset</name></name></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>,
<argument><expr><name>MPEG_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_offset</name></name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>id3_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>,
<argument><expr><name>MPEG_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVRational</name></type> <name>get_timebase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MPEG_TIME_BASE_Q</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_ts_with_wrapdetect</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts_a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls_a</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>ts_b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls_b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scaled_ts_a</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>ts_a</name></expr></argument>, <argument><expr><call><name>get_timebase</name><argument_list>(<argument><expr><name>pls_a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MPEG_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scaled_ts_b</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>ts_b</name></expr></argument>, <argument><expr><call><name>get_timebase</name><argument_list>(<argument><expr><name>pls_b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MPEG_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_compare_mod</name><argument_list>(<argument><expr><name>scaled_ts_a</name></expr></argument>, <argument><expr><name>scaled_ts_b</name></expr></argument>, <argument><expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>minplaylist</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>recheck_discard_flags</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>first_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>needed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reset_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>is_id3_timestamped</name></name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_timing_for_id3_timestamped_stream</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>
<name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>,
<argument><expr><call><name>get_timebase</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>seek_stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>pls</name><operator>-&gt;</operator><name>seek_stream_index</name></name> <operator>==</operator> <name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>get_timebase</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts_diff</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>,
<argument><expr><name><name>tb</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call> <operator>-</operator>
<name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts_diff</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>&amp;</operator> <name>AVSEEK_FLAG_ANY</name> <operator>||</operator>
<name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>minpls</name> <init>= <expr><ternary><condition><expr><name>minplaylist</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>NULL</name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>minplaylist</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>minplaylist</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>minplaylist</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mindts</name> <init>= <expr><name><name>minpls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator>
<operator>(</operator><name>mindts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <call><name>compare_ts_with_wrapdetect</name><argument_list>(<argument><expr><name>dts</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>mindts</name></expr></argument>, <argument><expr><name>minpls</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minplaylist</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>minplaylist</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>minplaylist</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>ist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_streams_from_subdemuxer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>event_flags</name></name> <operator>&amp;</operator> <name>AVFMT_EVENT_FLAG_METADATA_UPDATED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>event_flags</name></name> <operator>|=</operator> <name>AVSTREAM_EVENT_FLAG_METADATA_UPDATED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>event_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVFMT_EVENT_FLAG_METADATA_UPDATED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>has_noheader_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;</operator> <name>AVFMTCTX_NOHEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>has_noheader_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_noheader_flag</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>&gt;=</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"stream index inconsistency: index %d, %d main streams, %d subdemuxer streams\n"</literal></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ist</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>,
<argument><expr><name><name>ist</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,
<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ist</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_stream_info_from_input_stream</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>seek_pls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_subdemuxer_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_timestamp</name></decl>, <decl><type ref="prev"/><name>seek_timestamp</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BYTE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;</operator> <name>AVFMTCTX_UNSEEKABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_timestamp</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>first_timestamp</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>seek_timestamp</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr> ?</condition><then>
<expr><name>AV_ROUND_DOWN</name></expr> </then><else>: <expr><name>AV_ROUND_UP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>duration</name> <operator>&amp;&amp;</operator> <name>duration</name> <operator>&lt;</operator> <name>seek_timestamp</name> <operator>-</operator> <name>first_timestamp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_main_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>main_streams</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seek_pls</name> <operator>=</operator> <name>pls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_subdemuxer_index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seek_pls</name> <operator>||</operator> <operator>!</operator><call><name>find_timestamp_in_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>seek_pls</name></expr></argument>, <argument><expr><name>seek_timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq_no</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>seek_pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name>seq_no</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seek_pls</name><operator>-&gt;</operator><name>seek_stream_index</name></name> <operator>=</operator> <name>stream_subdemuxer_index</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_playlists</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>playlist</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>playlists</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_read_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>input_next_requested</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_read_frame_flush</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <name>seek_timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pls</name> <operator>!=</operator> <name>seek_pls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_timestamp_in_playlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>seek_timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>seek_flags</name></name> <operator>|=</operator> <name>AVSEEK_FLAG_ANY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <name>seek_timestamp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-STREAM-INF:"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-TARGETDURATION:"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HLSContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>hls_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"live_start_index"</literal></expr>, <expr><literal type="string">"segment index to start live streams at (negative values are from the end)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>live_start_index</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"allowed_extensions"</literal></expr>, <expr><literal type="string">"List of file extensions that hls is allowed to access"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>allowed_extensions</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>,
<expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav"</literal></expr>}</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"max_reload"</literal></expr>, <expr><literal type="string">"Maximum number of times a insufficient list is attempted to be reloaded"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_reload</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"m3u8_hold_counters"</literal></expr>, <expr><literal type="string">"The maximum number of times to load m3u8 when it refreshes without new segments"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>m3u8_hold_counters</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"http_persistent"</literal></expr>, <expr><literal type="string">"Use persistent HTTP connections"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_persistent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"http_multiple"</literal></expr>, <expr><literal type="string">"Use multiple HTTP connections for fetching segments"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_multiple</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"http_seekable"</literal></expr>, <expr><literal type="string">"Use HTTP partial requests, 0 = disable, 1 = enable, -1 = auto"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_seekable</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hls_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hls demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>hls_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_hls_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hls"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple HTTP Live Streaming"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hls_class</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HLSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOGENSEARCH</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>hls_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>hls_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>hls_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>hls_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>hls_read_seek</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
