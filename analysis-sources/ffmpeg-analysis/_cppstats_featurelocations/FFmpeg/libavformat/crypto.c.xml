<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\crypto.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUFFER_BLOCKS</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CryptoContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>inbuffer</name> <index>[<expr><name>BLOCKSIZE</name><operator>*</operator><name>MAX_BUFFER_BLOCKS</name></expr>]</index></name></decl>,
<name><name>outbuffer</name><index>[<expr><name>BLOCKSIZE</name><operator>*</operator><name>MAX_BUFFER_BLOCKS</name></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indata</name></decl>, <name>indata_used</name>, <name>outdata</name>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ivlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decrypt_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decrypt_keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decrypt_iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decrypt_ivlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>encrypt_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encrypt_keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>encrypt_iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encrypt_ivlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>aes_decrypt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>aes_encrypt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>write_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>write_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pad</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>CryptoContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CryptoContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"AES encryption/decryption key"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"iv"</literal></expr>, <expr><literal type="string">"AES encryption/decryption initialization vector"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"decryption_key"</literal></expr>, <expr><literal type="string">"AES decryption key"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>decrypt_key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"decryption_iv"</literal></expr>, <expr><literal type="string">"AES decryption initialization vector"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>decrypt_iv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"encryption_key"</literal></expr>, <expr><literal type="string">"AES encryption key"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>encrypt_key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"encryption_iv"</literal></expr>, <expr><literal type="string">"AES encryption initialization vector"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>encrypt_iv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>crypto_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"crypto"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_aes_arg</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>default_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_buf_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>default_buf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s not set\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>default_buf_len</name> <operator>!=</operator> <name>BLOCKSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid %s size (%d bytes, block size is %d)\n"</literal></expr></argument>,
<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>default_buf_len</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name>default_buf</name></expr></argument>, <argument><expr><name>default_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buf_len</name> <operator>=</operator> <name>default_buf_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>buf_len</name> <operator>!=</operator> <name>BLOCKSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid %s size (%d bytes, block size is %d)\n"</literal></expr></argument>,
<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>*</operator><name>buf_len</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crypto_open2</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nested_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CryptoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strstart</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"crypto+"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nested_url</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>av_strstart</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"crypto:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nested_url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported url %s\n"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_aes_arg</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decrypt_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decrypt_keylen</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><literal type="string">"decryption key"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_aes_arg</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decrypt_iv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decrypt_ivlen</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>, <argument><expr><literal type="string">"decryption IV"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_aes_arg</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>encrypt_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>encrypt_keylen</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><literal type="string">"encryption key"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_aes_arg</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>encrypt_iv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>encrypt_ivlen</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>, <argument><expr><literal type="string">"encryption IV"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>nested_url</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open resource: %s\n"</literal></expr></argument>, <argument><expr><name>nested_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>aes_decrypt</name></name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>aes_decrypt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_decrypt</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt_key</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hd</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hd</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt_key</name></name></expr></argument>, <argument><expr><name>BLOCKSIZE</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>err</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crypto_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CryptoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>;</decl_stmt>
<label><name>retry</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>outptr</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outptr</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>position</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>BLOCKSIZE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>indata</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>indata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name><operator>)</operator> <operator>/</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blocks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blocks</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_decrypt</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>outbuffer</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name></expr></argument>,
<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt_iv</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outptr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>outbuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name> <operator>+=</operator> <name>BLOCKSIZE</name> <operator>*</operator> <name>blocks</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuffer</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>outbuffer</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>crypto_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CryptoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>newpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Crypto: seek not supported for write\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ESPIPE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SEEK_SET</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>SEEK_CUR</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEEK_END</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>newpos</name> <init>= <expr><call><name>ffurl_seek</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>AVSEEK_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Crypto: seek_end - can't get file size (pos=%lld)\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newpos</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>newpos</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>AVSEEK_SIZE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>newpos</name> <init>= <expr><call><name>ffurl_seek</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>AVSEEK_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>newpos</name></expr>;</return>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Crypto: no support for seek where 'whence' is %d\r\n"</literal></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outdata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>indata_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>outptr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>outbuffer</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>block</name> <operator>=</operator> <name>pos</name><operator>/</operator><name>BLOCKSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt_iv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>block</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>block</name> <operator>*</operator> <name>BLOCKSIZE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>newpos</name> <operator>=</operator> <call><name>ffurl_seek</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newpos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Crypto: nested protocol no support for seek or seek failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newpos</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>position</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><name>BLOCKSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>pos</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>position</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>crypto_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><literal type="string">"unknown error"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Crypto: discard read did not get all the bytes (%d remain) - read returned (%d)-%s\n"</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>position</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crypto_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CryptoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_size</name></decl>, <decl><type ref="prev"/><name>blocks</name></decl>, <decl><type ref="prev"/><name>pad_len</name></decl>, <decl><type ref="prev"/><name>out_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name>size</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name>total_size</name> <operator>%</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_size</name> <operator>=</operator> <name>total_size</name> <operator>-</operator> <name>pad_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name>out_size</name> <operator>/</operator> <name>BLOCKSIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_buf_size</name></name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>write_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pad</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt_iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocks</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_buf</name><index>[<expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr> ?</condition><then> <expr><name>BLOCKSIZE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr> ?</condition><then> <expr><name>BLOCKSIZE</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></argument>,
<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt_iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>size</name> <operator>-</operator> <name>pad_len</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pad</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name> <operator>=</operator> <name>pad_len</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crypto_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CryptoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out_buf</name><index>[<expr><name>BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><name>BLOCKSIZE</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pad</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>pad_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt_iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>aes_decrypt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>aes_encrypt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>write_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_crypto_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"crypto"</literal></expr>,
<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>crypto_open2</name></expr>,
<expr><operator>.</operator><name>url_seek</name> <operator>=</operator> <name>crypto_seek</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>crypto_read</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>crypto_write</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>crypto_close</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CryptoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>crypto_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NESTED_SCHEME</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
