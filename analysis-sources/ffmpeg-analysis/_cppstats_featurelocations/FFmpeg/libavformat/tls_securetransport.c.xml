<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\tls_securetransport.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/SecureTransport.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>


<function_decl><type><name>SecIdentityRef</name></type> <name>SecIdentityCreate</name><parameter_list>(<parameter><decl><type><name>CFAllocatorRef</name></type> <name>allocator</name></decl></parameter>, <parameter><decl><type><name>SecCertificateRef</name></type> <name>certificate</name></decl></parameter>, <parameter><decl><type><name>SecKeyRef</name></type> <name>privateKey</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ioErr</name></cpp:macro> <cpp:value>-36</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>TLSContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TLSShared</name></type> <name>tls_shared</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLContextRef</name></type> <name>ssl_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>ca_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastErr</name></decl>;</decl_stmt>
}</block></struct></type> <name>TLSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_tls_error</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>errSSLWouldBlock</name></expr>:</case>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>errSSLXCertChainInvalid</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid certificate chain\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>ioErr</name></expr>:</case>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>lastErr</name></name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"IO Error: %i\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>import_pem</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>CFArrayRef</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_SECITEMIMPORT</name></expr></cpp:if>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFDataRef</name></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecExternalFormat</name></type> <name>format</name> <init>= <expr><name>kSecFormatPEMSequence</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecExternalFormat</name></type> <name>type</name> <init>= <expr><name>kSecItemTypeAggregate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>pathStr</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0x08000100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pathStr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SecItemImport</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pathStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><operator>*</operator><name>array</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pathStr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pathStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_ca</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>import_pem</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>ca_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ca_array</name></name> <operator>=</operator> <call><name>CFRetain</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_cert</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>certArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>keyArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecIdentityRef</name></type> <name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>outArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>import_pem</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>cert_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certArray</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>import_pem</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>key_file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyArray</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>id</name> <operator>=</operator> <call><name>SecIdentityCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,
<argument><expr><operator>(</operator><name>SecCertificateRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>certArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>SecKeyRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>keyArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>outArray</name> <operator>=</operator> <call><name>CFArrayCreateMutableCopy</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>certArray</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFArraySetValueAtIndex</name><argument_list>(<argument><expr><name>outArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSLSetCertificate</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>outArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>certArray</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>certArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keyArray</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>keyArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>outArray</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>outArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>tls_read_cb</name><parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>URLContext</name><operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>requested</name> <init>= <expr><operator>*</operator><name>dataLength</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENOENT</name></expr>:</case>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>errSSLClosedGraceful</name></expr>;</return>
<case>case <expr><name>ECONNRESET</name></expr>:</case>
<return>return <expr><name>errSSLClosedAbort</name></expr>;</return>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<return>return <expr><name>errSSLWouldBlock</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lastErr</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
<return>return <expr><name>ioErr</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;</operator> <name>requested</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>errSSLWouldBlock</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>noErr</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>tls_write_cb</name><parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>URLContext</name><operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>dataLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EAGAIN</name></expr>:</case>
<return>return <expr><name>errSSLWouldBlock</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lastErr</name></name> <operator>=</operator> <name>written</name></expr>;</expr_stmt>
<return>return <expr><name>ioErr</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <name>written</name></expr>;</expr_stmt>
<return>return <expr><name>noErr</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SSLClose</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ca_array</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ca_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERROR</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { OSStatus status = func(__VA_ARGS__); if (status != noErr) { ret = AVERROR_UNKNOWN; av_log(h, AV_LOG_ERROR, #func ": Error %i\n", (int)status); goto fail; } } while (0)</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_tls_open_underlying</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name> <operator>=</operator> <call><name>SSLCreateContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>listen</name></name></expr> ?</condition><then> <expr><name>kSSLServerSide</name></expr> </then><else>: <expr><name>kSSLClientSide</name></expr></else></ternary></expr></argument>, <argument><expr><name>kSSLStreamType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create SSL context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ca_file</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>load_ca</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ca_file</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>verify</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>SSLSetSessionOption</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>kSSLSessionOptionBreakOnServerAuth</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cert_file</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>load_cert</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>SSLSetPeerDomainName</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>SSLSetIOFuncs</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>tls_read_cb</name></expr></argument>, <argument><expr><name>tls_write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>(<argument><expr><name>SSLSetConnection</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><call><name>SSLHandshake</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>errSSLServerAuthCompleted</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>peerTrust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecTrustResultType</name></type> <name>trustResult</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>verify</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peerTrust</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SecTrustSetAnchorCertificates</name><argument_list>(<argument><expr><name>peerTrust</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ca_array</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SecTrustEvaluate</name><argument_list>(<argument><expr><name>peerTrust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trustResult</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trustResult</name> <operator>==</operator> <name>kSecTrustResultProceed</name> <operator>||</operator>
<name>trustResult</name> <operator>==</operator> <name>kSecTrustResultUnspecified</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>errSSLWouldBlock</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>trustResult</name> <operator>==</operator> <name>kSecTrustResultRecoverableTrustFailure</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>errSSLXCertChainInvalid</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>errSSLBadCert</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peerTrust</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>peerTrust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>errSSLWouldBlock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to negotiate TLS/SSL session: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>tls_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_ssl_error</name><parameter_list>(<parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>processed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>noErr</name></expr>:</case>
<return>return <expr><name>processed</name></expr>;</return>
<case>case <expr><name>errSSLClosedGraceful</name></expr>:</case>
<case>case <expr><name>errSSLClosedNoNotify</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>errSSLWouldBlock</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>processed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>processed</name></expr>;</return></block_content></block></if></if_stmt>
<default>default:</default>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSLGetBufferedReadSize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>available</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>available</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSLRead</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_ssl_error</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>print_tls_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSLWrite</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_ssl_error</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>print_tls_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>TLS_COMMON_OPTIONS</name><argument_list>(<argument><expr><name>TLSContext</name></expr></argument>, <argument><expr><name>tls_shared</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tls_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tls_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,
<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>tls_open</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>tls_read</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>tls_write</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>tls_close</name></expr>,
<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>tls_get_file_handle</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TLSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>tls_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
