<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\aviobuf.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_BUFFER_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORT_SEEK_THRESHOLD</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ff_avio_child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>ff_avio_child_class_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ffurl_context_class</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AVIOContext,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ff_avio_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"protocol_whitelist"</literal></expr>, <expr><literal type="string">"List of protocols that are allowed to be used"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>protocol_whitelist</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name></type> <name>ff_avio_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AVIOContext"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_avio_options</name></expr>,
<expr><operator>.</operator><name>child_next</name> <operator>=</operator> <name>ff_avio_child_next</name></expr>,
<expr><operator>.</operator><name>child_class_next</name> <operator>=</operator> <name>ff_avio_child_class_next</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>url_resetbuf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>ffio_init_context</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buffer_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>write_flag</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVIOContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>url_resetbuf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>write_flag</name></expr> ?</condition><then> <expr><name>AVIO_FLAG_WRITE</name></expr> </then><else>: <expr><name>AVIO_FLAG_READ</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>write_packet</name></name> <operator>=</operator> <name>write_packet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name> <operator>=</operator> <name>read_packet</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seek</name></name> <operator>=</operator> <name>seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>=</operator> <ternary><condition><expr><name>seek</name></expr> ?</condition><then> <expr><name>AVIO_SEEKABLE_NORMAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_packet_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>short_seek_threshold</name></name> <operator>=</operator> <name>SHORT_SEEK_THRESHOLD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>read_packet</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>write_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>buffer_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_pause</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>read_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>write_data_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ignore_boundary_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>=</operator> <name>AVIO_DATA_MARKER_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>short_seek_get</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio_alloc_context</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>buffer_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>write_flag</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_packet</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int64_t</name></type> (<modifier>*</modifier><name>seek</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVIOContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><name>write_flag</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>,
<argument><expr><name>read_packet</name></expr></argument>, <argument><expr><name>write_packet</name></expr></argument>, <argument><expr><name>seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_context_free</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeout</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_data_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>write_data_type</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_packet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>write_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>written</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>==</operator> <name>AVIO_DATA_MARKER_SYNC_POINT</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>==</operator> <name>AVIO_DATA_MARKER_BOUNDARY_POINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>=</operator> <name>AVIO_DATA_MARKER_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>writeout_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_buffer</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>writeout</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_w8</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>b</name><operator>&gt;=</operator><operator>-</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&lt;=</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flush_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ffio_fill</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flush_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_write</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>direct</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writeout</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flush_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_flush</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>seekback</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>flush_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seekback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>seekback</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>avio_seek</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><name>whence</name> <operator>&amp;</operator> <name>AVSEEK_FORCE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_seek</name></decl>;</decl_stmt>
<expr_stmt><expr><name>whence</name> <operator>&amp;=</operator> <operator>~</operator><name>AVSEEK_FORCE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>whence</name> <operator>&amp;</operator> <name>AVSEEK_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>seek</name></name></expr> ?</condition><then> <expr><call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>AVSEEK_SIZE</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>buffer_size</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>!=</operator> <name>SEEK_CUR</name> <operator>&amp;&amp;</operator> <name>whence</name> <operator>!=</operator> <name>SEEK_SET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset1</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>offset1</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>-</operator> <name>offset1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>offset1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>short_seek_get</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>short_seek</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>short_seek_get</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>short_seek</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>short_seek</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>short_seek_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>short_seek</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>short_seek_threshold</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>offset1</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>direct</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>offset1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset1</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr> </then><else>: <expr><name>buffer_size</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>offset1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>||</operator>
<name>offset1</name> <operator>&lt;=</operator> <name>buffer_size</name> <operator>+</operator> <name>short_seek</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>&amp;&amp;</operator> <name>offset1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>direct</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>whence</name> <operator>!=</operator> <name>SEEK_END</name> <operator>||</operator> <name>force</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>offset</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>&amp;&amp;</operator> <name><name>offset1</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name><name>offset1</name> <argument_list type="generic">&lt; <argument><expr><name>buffer_size</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>seek</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>-=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buffer_size</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name> <operator>|</operator> <name>force</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>flush_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPIPE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seek_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>avio_skip</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>avio_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>written</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>seek</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVSEEK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_feof</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wl32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wb32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_put_str</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>put_str16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>be</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<macro><name>GET_UTF8</name><argument_list>(<argument>ch</argument>, <argument>*q++</argument>, <argument>goto invalid;</argument>)</argument_list></macro>
<macro><name>PUT_UTF16</name><argument_list>(<argument>ch</argument>, <argument>tmp</argument>, <argument>be ? avio_wb16(s, tmp) : avio_wl16(s, tmp);
ret += <literal type="number">2</literal>;</argument>)</argument_list></macro>
<continue>continue;</continue>
<label><name>invalid</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid UTF8 sequence in avio_put_str16%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>be</name></expr> ?</condition><then> <expr><literal type="string">"be"</literal></expr> </then><else>: <expr><literal type="string">"le"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>q</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_STR16</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>big_endian</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int avio_put_str16 ##type(AVIOContext *s, const char *str) { return put_str16(s, str, big_endian); }</cpp:value></cpp:define>





<macro><name>PUT_STR16</name><argument_list>(<argument>le</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>PUT_STR16</name><argument_list>(<argument>be</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUT_STR16</name></cpp:undef>

<function><type><name>int</name></type> <name>ff_get_v_length</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_v</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ff_get_v_length</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>|</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wl64</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wb64</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wl16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wb16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wl24</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_wb24</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_write_marker</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVIODataMarkerType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_packet_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_data_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVIO_DATA_MARKER_BOUNDARY_POINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ignore_boundary_point</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVIO_DATA_MARKER_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVIO_DATA_MARKER_UNKNOWN</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>!=</operator> <name>AVIO_DATA_MARKER_HEADER</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>!=</operator> <name>AVIO_DATA_MARKER_TRAILER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVIO_DATA_MARKER_HEADER</name></expr>:</case>
<case>case <expr><name>AVIO_DATA_MARKER_TRAILER</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>current_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet_wrapper</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_AVIO_EOF_0</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid return value 0 for stream protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>ret</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_buffer_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr> ?</condition><then>
<expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr> </then><else>: <expr><name>IO_BUFFER_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>max_buffer_size</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr> ?</condition><then>
<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>-</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>!=</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ffio_set_buf_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to decrease buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>=</operator> <name>dst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_packet_wrapper</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>ff_crc04C11DB7_update</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>ff_crcEDB88320_update</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>ff_crcA001_update</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>ffio_get_checksum</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>ffio_init_checksum</name><argument_list>(<argument><expr><name>AVIOContext</name> <operator>*</operator><name>s</name></expr></argument>,
<argument><expr><name>unsigned</name> <macro><name>long</name> <argument_list>(<argument>*update_checksum</argument>)</argument_list></macro><operator>(</operator><name>unsigned</name> <name>long</name> <name>c</name><operator>,</operator> <specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>p</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>len</name><operator>)</operator></expr></argument>,
<argument><expr><name>unsigned</name> <name>long</name> <name>checksum</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>update_checksum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>checksum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name>int</name></type> <name>avio_r8</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_read</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size1</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>direct</name></name> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>update_checksum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_packet_wrapper</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator> <name>len</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>size1</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size1</name> <operator>-</operator> <name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_read_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_read_indirect</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<return>return <expr><call><name>avio_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_read_partial</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_packet_wrapper</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rl16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rl24</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rl32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>avio_rl64</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rb16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rb24</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>unsigned</name> <name>int</name></type> <name>avio_rb32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_get_line</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>maxlen</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_get_chomp_line</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>av_isspace</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_read_line_to_bprint</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>end</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>read</name> <operator>&amp;&amp;</operator> <call><name>avio_feof</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>read</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_read_line_to_bprint_overwrite</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_read_line_to_bprint</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_get_str</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avio_r8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>maxlen</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STR16</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>read</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int avio_get_str16 ##type(AVIOContext *pb, int maxlen, char *buf, int buflen){char* q = buf;int ret = 0;if (buflen &lt;= 0) return AVERROR(EINVAL); while (ret + 1 &lt; maxlen) {uint8_t tmp;uint32_t ch;GET_UTF16(ch, (ret += 2) &lt;= maxlen ? read(pb) : 0, break;)if (!ch)break;PUT_UTF8(ch, tmp, if (q - buf &lt; buflen - 1) *q++ = tmp;)}*q = 0;return ret;}</cpp:value></cpp:define>


















<macro><name>GET_STR16</name><argument_list>(<argument>le</argument>, <argument>avio_rl16</argument>)</argument_list></macro>
<macro><name>GET_STR16</name><argument_list>(<argument>be</argument>, <argument>avio_rb16</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_STR16</name></cpp:undef>

<function><type><name>uint64_t</name></type> <name>avio_rb64</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>avio_rb32</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>avio_rb32</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>ffio_read_varlen</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<do>do<block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name><operator>=</operator> <operator>(</operator><name>val</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>tmp</name><operator>&amp;</operator><literal type="number">127</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>while<condition>(<expr><name>tmp</name><operator>&amp;</operator><literal type="number">128</literal></expr>)</condition>;</do>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_fdopen</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>, <decl><type ref="prev"/><name>max_packet_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max_packet_size</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_packet_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name>max_packet_size</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name>IO_BUFFER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>avio_alloc_context</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <name>ffurl_read</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <name>ffurl_write</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>int64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><name>ffurl_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>protocol_blacklist</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>protocol_blacklist</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>direct</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>seekable</name></name> <operator>=</operator> <ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVIO_SEEKABLE_NORMAL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name>max_packet_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>min_packet_size</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>min_packet_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>prot</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>read_pause</name></name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>prot</name><operator>-&gt;</operator><name>url_read_pause</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>read_seek</name></name> <operator>=</operator>
<operator>(</operator><call><call><name>int64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>prot</name><operator>-&gt;</operator><name>url_read_seek</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>prot</name><operator>-&gt;</operator><name>url_read_seek</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>seekable</name></name> <operator>|=</operator> <name>AVIO_SEEKABLE_TIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>short_seek_get</name></name> <operator>=</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>ffurl_get_short_seek</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_avio_class</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>URLContext</name><modifier>*</modifier></type> <name>ffio_geturlcontext</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name> <operator>==</operator> <operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><name>ffurl_read</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_ensure_seekback</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_buffer_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr> ?</condition><then>
<expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr> </then><else>: <expr><name>IO_BUFFER_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>checksum_ptr_offset</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>max_buffer_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>filled</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>read_packet</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>checksum_ptr_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>checksum_ptr_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_set_buf_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>url_resetbuf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><name>AVIO_FLAG_WRITE</name></expr> </then><else>: <expr><name>AVIO_FLAG_READ</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_realloc_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ffio_set_buf_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>orig_buffer_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>data_size</name><operator>)</operator></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>data_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+</operator> <name>data_size</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>url_resetbuf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>flags</name> <operator>==</operator> <name>AVIO_FLAG_WRITE</name> <operator>||</operator> <name>flags</name> <operator>==</operator> <name>AVIO_FLAG_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_rewind_with_probe_data</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>buffer_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>, <decl><type ref="prev"/><name>new_size</name></decl>, <decl><type ref="prev"/><name>alloc_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>*</operator><name>bufp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buffer_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>buffer_size</name><operator>)</operator> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>overlap</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name>buffer_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>buf_size</name> <operator>+</operator> <name>buffer_size</name> <operator>-</operator> <name>overlap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alloc_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bufp</name><operator>)</operator> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>overlap</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>alloc_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_open</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>avio_open2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_open_whitelist</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVIOInterruptCB</name> <modifier>*</modifier></type><name>int_cb</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whitelist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>blacklist</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>int_cb</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>whitelist</name></expr></argument>, <argument><expr><name>blacklist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffio_fdopen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_open2</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVIOInterruptCB</name> <modifier>*</modifier></type><name>int_cb</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ffio_open_whitelist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>int_cb</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_close</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>write_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Statistics: %d seeks, %d writeouts\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>seek_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>writeout_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Statistics: %"</literal><name>PRId64</name><literal type="string">" bytes read, %d seeks\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytes_read</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>seek_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_closep</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_close</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_printf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_vbprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>bp</name><operator>.</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avio_print_string_array</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>strings</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>strings</name></expr>;</condition> <incr><expr><name>strings</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>strings</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>strings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_pause</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>read_pause</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>read_pause</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>avio_seek_time</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>read_seek</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>read_seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>seek</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pos</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_read_to_bprint</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>max_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max_size</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_accept</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_accept</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ffio_fdopen</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_handshake</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffurl_handshake</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<typedef>typedef <type><struct>struct <name>DynBuffer</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <name>size</name>, <name>allocated_size</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>io_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DynBuffer</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dyn_buf_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>new_size</name></decl>, <decl><type ref="prev"/><name>new_allocated_size</name></decl>;</decl_stmt>


<expr_stmt><expr><name>new_size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_allocated_size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>allocated_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>new_size</name> <argument_list type="generic">&lt; <argument><expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>||</operator> <name>new_size</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>new_allocated_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_allocated_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>new_allocated_size</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_allocated_size</name> <operator>+=</operator> <name>new_allocated_size</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>new_allocated_size</name> <operator>&gt;</operator> <name><name>d</name><operator>-&gt;</operator><name>allocated_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>new_allocated_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>allocated_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>allocated_size</name></name> <operator>=</operator> <name>new_allocated_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dyn_packet_buf_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dyn_buf_write</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>dyn_buf_write</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>dyn_buf_seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>d</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>offset</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x7fffffffLL</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>url_open_dyn_buf_internal</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packet_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>io_buffer_size</name> <init>= <expr><ternary><condition><expr><name>max_packet_size</name></expr> ?</condition><then> <expr><name>max_packet_size</name></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>DynBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>io_buffer_size</name> <operator>&lt;</operator> <name>io_buffer_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DynBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>io_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>io_buffer_size</name></name> <operator>=</operator> <name>io_buffer_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>avio_alloc_context</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>io_buffer</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>io_buffer_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>max_packet_size</name></expr> ?</condition><then> <expr><name>dyn_packet_buf_write</name></expr> </then><else>: <expr><name>dyn_buf_write</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>max_packet_size</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>dyn_buf_seek</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name>max_packet_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_open_dyn_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>url_open_dyn_buf_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_open_dyn_packet_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packet_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_packet_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>url_open_dyn_buf_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max_packet_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_get_dyn_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pbuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pbuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pbuffer</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>io_buffer</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr_max</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pbuffer</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ffio_reset_dyn_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_packet_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>io_buffer</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>io_buffer_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>write_packet</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>seek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name>max_packet_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avio_close_dyn_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pbuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>padbuf</name><index>[<expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pbuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>padbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pbuffer</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name> <operator>-</operator> <name>padding</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ffio_free_dyn_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>null_buf_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_open_null_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>url_open_dyn_buf_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>write_packet</name></name> <operator>=</operator> <name>null_buf_write</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ffio_close_null_buf</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DynBuffer</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>
</unit>
