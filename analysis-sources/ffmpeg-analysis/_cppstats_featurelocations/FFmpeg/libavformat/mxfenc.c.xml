<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mxfenc.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dnxhddata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dv_profile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264_ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/golomb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiointerleave.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mxf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mxf_d10_muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mxf_opatom_muxer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDIT_UNITS_PER_BODY</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KAG_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MXFLocalTagPair</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>local_tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>uid</name></decl>;</decl_stmt>
}</block></struct></type> <name>MXFLocalTagPair</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MXFIndexEntry</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>temporal_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>MXFIndexEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MXFStreamContext</name> <block>{
<decl_stmt><decl><type><name>AudioInterleaveContext</name></type> <name>aic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>track_essence_element_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>UID</name> <modifier>*</modifier></type><name>codec_ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UID</name> <modifier>*</modifier></type><name>container_ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>field_dominance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>component_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color_siting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signal_standard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_chroma_sub_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v_chroma_sub_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temporal_reordering</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>aspect_ratio</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>closed_gop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>video_bit_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>seq_closed_gop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_gop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>b_picture_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>low_delay</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>avc_intra</name></decl>;</decl_stmt>
}</block></struct></type> <name>MXFStreamContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MXFContainerEssenceEntry</name> <block>{
<decl_stmt><decl><type><name>UID</name></type> <name>container_ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>element_ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>codec_ul</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write_desc</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>MXFContainerEssenceEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MXFPackage</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>MXFMetadataSetType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MXFPackage</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>MXFPackage</name>;</typedef>

<enum>enum <name>ULIndex</name> <block>{
<decl><name>INDEX_MPEG2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>INDEX_AES3</name></decl>,
<decl><name>INDEX_WAV</name></decl>,
<decl><name>INDEX_D10_VIDEO</name></decl>,
<decl><name>INDEX_D10_AUDIO</name></decl>,
<decl><name>INDEX_DV</name></decl>,
<decl><name>INDEX_DNXHD</name></decl>,
<decl><name>INDEX_JPEG2000</name></decl>,
<decl><name>INDEX_H264</name></decl>,
<decl><name>INDEX_S436M</name></decl>,
<decl><name>INDEX_PRORES</name></decl>,
}</block>;</enum>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ULIndex</name></name></type> <name>index</name></decl>;</decl_stmt>
}</block> <decl><name><name>mxf_essence_mappings</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>, <expr><name>INDEX_MPEG2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>, <expr><name>INDEX_AES3</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>, <expr><name>INDEX_AES3</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_DVVIDEO</name></expr>, <expr><name>INDEX_DV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_DNXHD</name></expr>, <expr><name>INDEX_DNXHD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_JPEG2000</name></expr>, <expr><name>INDEX_JPEG2000</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>INDEX_H264</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PRORES</name></expr>, <expr><name>INDEX_PRORES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_wav_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_aes3_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_mpegvideo_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_h264_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_cdci_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_generic_sound_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_s436m_anc_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MXFContainerEssenceEntry</name></type> <name><name>mxf_essence_container_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_mpegvideo_desc</name></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_aes3_desc</name></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_wav_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><name>mxf_write_cdci_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_generic_sound_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_cdci_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_cdci_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0c</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_cdci_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_h264_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_s436m_anc_desc</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x1c</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>mxf_write_cdci_desc</name></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name><name>mxf_d10_codec_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name><name>mxf_d10_container_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>MXFContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>footer_partition_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>essence_container_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFIndexEntry</name> <modifier>*</modifier></type><name>index_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>edit_units_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>slice_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_indexed_edit_unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>body_partition_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>body_partitions_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_key_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>timecode_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timecode_base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>edit_unit_byte_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>content_package_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>body_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>instance_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>umid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>signal_standard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tagged_value_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>audio_edit_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>store_user_comments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>track_instance_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cbr_index</name></decl>;</decl_stmt> 
}</block></struct></type> <name>MXFContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>uuid_base</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4d</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0xbd</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>umid_ul</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x13</literal></expr> }</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>op1a_ul</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opatom_ul</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>footer_partition_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>primer_pack_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>index_table_segment_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>random_index_pack_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>header_open_partition_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>header_closed_partition_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>klv_fill_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>body_partition_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt> 




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>header_metadata_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>multiple_desc_ul</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MXFLocalTagPair</name></type> <name><name>mxf_local_tag_batch</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x3C0A</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B02</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B05</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B07</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B06</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B03</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B09</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B0A</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3B0B</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3C09</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C01</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C02</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C03</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C04</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C05</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C06</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C07</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3C08</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x1901</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1902</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x2701</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F07</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x4401</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4405</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4404</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4402</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4403</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4701</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x4801</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4804</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4B01</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4B02</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x4803</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x0201</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x0202</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1001</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x1201</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1101</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1102</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x1501</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1502</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1503</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3F01</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3006</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3001</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3002</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3004</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x320C</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x320D</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3203</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3202</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3216</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3205</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3204</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3206</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3207</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3209</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3208</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x320A</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x320B</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3217</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x320E</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3210</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3213</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3214</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3201</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3212</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3215</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3301</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3302</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3308</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3303</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3307</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3304</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3305</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3306</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3D02</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D03</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D04</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D07</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D01</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D06</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3F0B</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F0C</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F0D</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F05</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F06</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F08</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F09</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3F0A</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x8000</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8003</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8004</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8006</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8007</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8008</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">0x3D09</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3D0A</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MXFLocalTagPair</name></type> <name><name>mxf_avc_subdescriptor_local_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x8100</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8200</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8201</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x8202</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MXFLocalTagPair</name></type> <name><name>mxf_user_comments_local_tag</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x4406</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x5001</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
<expr><block>{ <expr><literal type="number">0x5003</literal></expr>, <expr><block>{<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>}</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_uuid</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>MXFMetadataSetType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>uuid_base</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_umid</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>umid_ul</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>instance_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>umid</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_refs_count</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ref_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>klv_ber_length</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>klv_encode_ber_length</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>klv_ber_length</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>size</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>klv_encode_ber4_length</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>klv_encode_ber9_length</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_get_essence_container_ul_index</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mxf_essence_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mxf_essence_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>mxf_essence_mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_local_tags</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MXFLocalTagPair</name> <modifier>*</modifier></type><name>local_tags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>local_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>local_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_primer_pack</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local_tag_number</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>avc_tags_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>local_tag_number</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_local_tag_batch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_tag_number</name> <operator>+=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name> <operator>*</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_user_comments_local_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>avc_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>avc_tags_count</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_avc_subdescriptor_local_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>local_tag_number</name> <operator>+=</operator> <name>avc_tags_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>primer_pack_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>local_tag_number</name> <operator>*</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>local_tag_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_local_tag_batch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf_local_tag_batch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf_local_tag_batch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_user_comments_local_tag</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf_user_comments_local_tag</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf_user_comments_local_tag</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>avc_tags_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_local_tags</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mxf_avc_subdescriptor_local_tags</name></expr></argument>, <argument><expr><name>avc_tags_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_local_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_metadata_key</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_metadata_key</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>MXFCodecUL</name> <modifier>*</modifier></type><name>mxf_get_data_definition_ul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MXFCodecUL</name> <modifier>*</modifier></type><name>uls</name> <init>= <expr><name>ff_mxf_data_definition_uls</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>uls</name><operator>-&gt;</operator><name>uid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>uls</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uls</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>uls</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTOR_COUNT</name><parameter_list>(<parameter><type><name>essence_container_count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(essence_container_count &gt; 1 ? essence_container_count + 1 : essence_container_count)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_essence_container_refs</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>DESCRIPTOR_COUNT</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>essence_container_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"essence container count:%d\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>essence_container_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>essence_container_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>essence_container_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>multiple_desc_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_preface</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x012f00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"preface key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">138</literal> <operator>+</operator> <literal type="number">16LL</literal> <operator>*</operator> <call><name>DESCRIPTOR_COUNT</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Preface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"preface uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3B02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x3B05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">259</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3B07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3B06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Identification</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3B03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ContentStorage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3B09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>opatom_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>op1a_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16LL</literal> <operator>*</operator> <call><name>DESCRIPTOR_COUNT</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x3B0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_essence_container_refs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3B0B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>mxf_utf16len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>utf8_str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>GET_UTF8</name><argument_list>(<argument>ch</argument>, <argument>*q++</argument>, <argument>goto invalid;</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<continue>continue;</continue>
<label><name>invalid</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid UTF8 sequence in mxf_utf16len\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_utf16_local_tag_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf8_str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>mxf_utf16len</name><argument_list>(<argument><expr><name>utf8_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>UINT16_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"utf16 local tag size %"</literal><name>PRIx64</name><literal type="string">" invalid (too large), ignoring\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">4</literal> <operator>+</operator> <name>size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_local_tag_utf16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>mxf_utf16len</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>UINT16_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"utf16 local tag size %"</literal><name>PRIx64</name><literal type="string">" invalid (too large), ignoring\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_put_str16be</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_version</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>LIBAVFORMAT_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>LIBAVFORMAT_VERSION_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>LIBAVFORMAT_VERSION_MICRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_identification</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>company</name> <init>= <expr><literal type="string">"FFmpeg"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>product</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr> ?</condition><then> <expr><literal type="string">"OP1a Muxer"</literal></expr> </then><else>: <expr><literal type="string">"OPAtom Muxer"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x013000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"identification key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name></expr> ?</condition><then>
<expr><literal type="string">"0.0.0"</literal></expr> </then><else>: <expr><call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>LIBAVFORMAT_VERSION</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator><call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name>company</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name>product</name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Identification</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"identification uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Identification</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag_utf16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x3C01</literal></expr></argument>, <argument><expr><name>company</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>mxf_write_local_tag_utf16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x3C02</literal></expr></argument>, <argument><expr><name>product</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x3C03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>store_version</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag_utf16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x3C04</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Identification</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3C06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x3C07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>store_version</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_content_storage</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>packages</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>package_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x011800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"content storage key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>package_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ContentStorage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"content storage uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>package_count</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x1901</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>package_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>package_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>packages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>packages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x1902</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EssenceContainerData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_track</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>package</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x013b00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"track key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Track</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"track uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x4801</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x4804</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MaterialPackage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4B01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4B02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x4803</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Sequence</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>smpte_12m_timecode_track_data_ul</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_common_fields</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x0201</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>smpte_12m_timecode_track_data_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>MXFCodecUL</name> <modifier>*</modifier></type><name>data_def_ul</name> <init>= <expr><call><name>mxf_get_data_definition_ul</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>data_def_ul</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0202</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>/</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_sequence</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>package</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>MXFMetadataSetType</name></name></type> <name>component</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x010f00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sequence key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Sequence</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sequence uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_common_fields</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x1001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>component</name> <operator>=</operator> <name>TimecodeComponent</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>component</name> <operator>=</operator> <name>SourceClip</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_timecode_component</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>package</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x011400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TimecodeComponent</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_common_fields</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x1501</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x1502</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x1503</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_structural_component</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>package</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x011100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sturctural component key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SourceClip</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structural component uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_common_fields</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x1201</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x1101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>package</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_umid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x1102</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SourcePackage</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>package</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_tape_descriptor</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x012e00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"tape descriptor key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TapeDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"tape_desc uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_multi_descriptor</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x014400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"multiple descriptor key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">16LL</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MultipleDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"multi_desc uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <name>multiple_desc_ul</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3F01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SubDescriptor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mxf_write_generic_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UID</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SubDescriptor</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3006</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S16LE</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S24LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_s436m_anc_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x5c</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_mpegvideo_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_wav_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_aes3_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_cdci_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_generic_sound_descriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name>mxf_avc_subdescriptor_key</name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_trc</name><parameter_list>(<parameter><decl><type><name>UID</name></type> <name>ul</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>trc</name></expr>)</condition><block>{<block_content>
<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr> :</case>
<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr> :</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AVCOL_TRC_BT709</name></expr> :</case>
<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr> :</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x02</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr> :</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x03</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AVCOL_TRC_BT1361_ECG</name></expr>:</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x06</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x05</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr> :</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x06</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x06</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AVCOL_TRC_SMPTE428</name></expr> :</case>
<macro><name>memcpy</name><argument_list>(<argument>ul</argument>, <argument>((UID){<literal type="number">0x06</literal>,<literal type="number">0x0E</literal>,<literal type="number">0x2B</literal>,<literal type="number">0x34</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x08</literal>,<literal type="number">0x04</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x01</literal>,<literal type="number">0x07</literal>,<literal type="number">0x00</literal>,<literal type="number">0x00</literal>})</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mxf_write_cdci_common</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UID</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stored_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stored_height</name> <init>= <expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>transfer_ul</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_generic_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_trc</name><argument_list>(<argument><expr><name>transfer_ul</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stored_width</name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stored_width</name> <operator>=</operator> <literal type="number">1280</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stored_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stored_width</name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3203</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stored_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3202</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stored_height</name><operator>&gt;&gt;</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3216</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3213</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3214</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3205</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stored_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3204</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name><operator>&gt;&gt;</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3207</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3209</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stored_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">608</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>display_height</name> <operator>=</operator> <literal type="number">576</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>display_height</name> <operator>=</operator> <literal type="number">486</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>display_height</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3208</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>display_height</name><operator>&gt;&gt;</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x320A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x320B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>display_height</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3217</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>display_height</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3301</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3302</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>h_chroma_sub_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3308</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>v_chroma_sub_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3303</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x3307</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>black</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><type ref="prev"/><name>white</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><type ref="prev"/><name>color</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_MPEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>black</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>white</name> <operator>=</operator> <literal type="number">235</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>(</operator><literal type="number">14</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3304</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3305</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3306</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>signal_standard</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3215</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>signal_standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x320C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">576</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr> ?</condition><then> <expr><literal type="number">335</literal></expr> </then><else>: <expr><literal type="number">336</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">608</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">480</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr> ?</condition><then> <expr><literal type="number">285</literal></expr> </then><else>: <expr><literal type="number">283</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">512</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">270</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">720</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">1080</literal></expr>:</case> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">584</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&amp;&amp;</operator> <name>f2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f1</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x320D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x320E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>transfer_ul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3210</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>transfer_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3201</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>&amp;&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>field_dominance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3212</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>field_dominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>avc_intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x8100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>AVCSubDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_update_klv_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>cur_pos</name> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_avc_subdesc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mxf_avc_subdescriptor_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>AVCSubDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8201</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8202</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_cdci_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_cdci_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_cdci_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_avc_subdesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_h264_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>avc_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_mpegvideo_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_cdci_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_cdci_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_avc_subdesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_s436m_anc_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_generic_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_s436m_anc_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_mpegvideo_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_and_level</name> <init>= <expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_cdci_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_mpegvideo_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8007</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>profile_and_level</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>profile_and_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>low_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x8004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>seq_closed_gop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x8006</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>max_gop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x8008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>b_picture_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mxf_write_generic_sound_common</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UID</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_warnings</name> <init>= <expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>footer_partition_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_generic_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3002</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>/</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3D02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3D03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3D04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3D07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_warnings</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"the number of audio channels shall be 4 or 8 : the output will not comply to MXF D-10 specs, use -d10_channelcount to fix this\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_warnings</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"d10_channelcount &lt; actual number of audio channels : some channels will be discarded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>show_warnings</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"d10_channelcount shall be set to 4 or 8 : the output will not comply to MXF D-10 specs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3D01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mxf_write_wav_common</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UID</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_generic_sound_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x3D0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3D09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name><operator>*</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_wav_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_wav_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_wav_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_aes3_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_wav_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_aes3_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_generic_sound_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>mxf_write_generic_sound_common</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>mxf_generic_sound_descriptor_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mxf_indirect_value_utf16le</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4c</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_tagged_value</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_size</name> <init>= <expr><call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indirect_value_size</name> <init>= <expr><literal type="number">13</literal> <operator>+</operator> <call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_size</name> <operator>||</operator> <name>indirect_value_size</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x013f00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>+</operator> <name>name_size</name> <operator>+</operator> <name>indirect_value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TaggedValue</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tagged_value_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag_utf16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x5001</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>indirect_value_size</name></expr></argument>, <argument><expr><literal type="number">0x5003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mxf_indirect_value_utf16le</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>tagged_value_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_user_comments</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"comment_"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>tagged_value_count</name></name> <operator>&gt;=</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many tagged values, ignoring remaining\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mxf_write_tagged_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_package</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MXFPackage</name> <modifier>*</modifier></type><name>package</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>track_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_size</name> <init>= <expr><call><name>mxf_utf16_local_tag_length</name><argument_list>(<argument><expr><name><name>package</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>user_comment_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MaterialPackage</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>user_comment_count</name> <operator>=</operator> <call><name>mxf_write_user_comments</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x013600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Material Package key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">92</literal> <operator>+</operator> <name>name_size</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>track_count</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>user_comment_count</name><operator>)</operator> <operator>+</operator> <literal type="number">12LL</literal><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x013700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Source Package key"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">112</literal> <operator>+</operator> <name>name_size</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>track_count</name><operator>)</operator> <operator>+</operator> <literal type="number">12LL</literal><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"package type:%d\n"</literal></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"package uid"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x4401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_umid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"package umid second part"</literal></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>name_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag_utf16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x4402</literal></expr></argument>, <argument><expr><name><name>package</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4405</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track_count</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4403</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>track_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>Track</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>user_comment_count</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x4406</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_refs_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>user_comment_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>user_comment_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TaggedValue</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tagged_value_count</name></name> <operator>-</operator> <name>user_comment_count</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SourcePackage</name> <operator>&amp;&amp;</operator> <name><name>package</name><operator>-&gt;</operator><name>instance</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x4701</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MultipleDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_multi_descriptor</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>SubDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SourcePackage</name> <operator>&amp;&amp;</operator> <name><name>package</name><operator>-&gt;</operator><name>instance</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x4701</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TapeDescriptor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_tape_descriptor</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><call><name>mxf_write_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_sequence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_timecode_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_write_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_sequence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_structural_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>package</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SourcePackage</name> <operator>&amp;&amp;</operator> <name><name>package</name><operator>-&gt;</operator><name>instance</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mxf_essence_container_uls</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><call><name>write_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_essence_container_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_metadata_key</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x012300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EssenceContainerData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x2701</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>mxf_write_umid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3F07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3F06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_header_metadata_sets</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFPackage</name></type> <name><name>packages</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>package_count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>MaterialPackage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SourcePackage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>instance</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"material_package_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"file_package_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"file_package_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"reel_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>SourcePackage</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>instance</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>packages</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>package_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_preface</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_identification</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_content_storage</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>packages</name></expr></argument>, <argument><expr><name>package_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>track_instance_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>package_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_write_package</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>packages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>mxf_write_essence_container_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>klv_fill_size</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pad</name> <init>= <expr><name>KAG_SIZE</name> <operator>-</operator> <operator>(</operator><name>size</name> <operator>&amp;</operator> <operator>(</operator><name>KAG_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>pad</name> <operator>+</operator> <name>KAG_SIZE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>pad</name> <operator>&amp;</operator> <operator>(</operator><name>KAG_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_index_table_segment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>temporal_reordering</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_index</name> <init>= <expr><name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_non_b_picture</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_frame_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"edit units count %d\n"</literal></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>index_table_segment_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x3C0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_uuid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>IndexTableSegment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3F0B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3F0C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_indexed_edit_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x3F0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3F05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3F06</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x3F07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3F08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x3F09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>temporal_reordering</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>temporal_reordering</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>temporal_reordering</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>KAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio_frame_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>audio_frame_size</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_frame_size</name> <operator>+=</operator> <call><name>klv_fill_size</name><argument_list>(<argument><expr><name>audio_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>audio_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mxf_write_local_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>*</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0x3F0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temporal_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x33</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>max_gop</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>max_gop</name></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name> <operator>=</operator> <name>key_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temporal_reordering</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pic_num_in_gop</name> <init>= <expr><name>i</name> <operator>-</operator> <name>key_index</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pic_num_in_gop</name> <operator>!=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>temporal_ref</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>key_index</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pic_num_in_gop</name> <operator>==</operator> <name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>temporal_ref</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"missing frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>temporal_offset</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>key_index</name> <operator>-</operator> <name>pic_num_in_gop</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>temporal_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>b_picture_count</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>b_picture_count</name></name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>prev_non_b_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key_index</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name> <operator>=</operator> <name>key_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev_non_b_picture</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x33</literal><operator>)</operator> <operator>&amp;&amp;</operator> 
<name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>temporal_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slice_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_key_index</name></name> <operator>=</operator> <name>key_index</name> <operator>-</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>last_indexed_edit_unit</name></name> <operator>+=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_update_klv_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_klv_fill</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>pad</name> <init>= <expr><call><name>klv_fill_size</name><argument_list>(<argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>klv_fill_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>-=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>KAG_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_partition</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bodysid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>indexsid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write_metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>header_byte_count_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index_byte_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>partition_offset</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_byte_count</name> <operator>=</operator> <literal type="number">85</literal> <operator>+</operator> <literal type="number">12</literal><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">6</literal> <operator>+</operator>
<literal type="number">12</literal><operator>+</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>*</operator><literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name>indexsid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index_byte_count</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index_byte_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>index_byte_count</name> <operator>+=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>index_byte_count</name> <operator>+=</operator> <call><name>klv_fill_size</name><argument_list>(<argument><expr><name>index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>body_partition_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>partition_offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>body_partition_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">88</literal> <operator>+</operator> <literal type="number">16LL</literal> <operator>*</operator> <call><name>DESCRIPTOR_COUNT</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>KAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>partition_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>body_partition_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>footer_partition_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>footer_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>header_byte_count_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>index_byte_count</name></expr> ?</condition><then> <expr><name>indexsid</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>bodysid</name> <operator>&amp;&amp;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>&amp;&amp;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bodysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>opatom_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>op1a_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>mxf_write_essence_container_refs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write_metadata</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>header_byte_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_primer_pack</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_header_metadata_sets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_byte_count</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>start</name> <operator>+</operator> <call><name>klv_fill_size</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_byte_count_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>codec_ul</name></decl>;</decl_stmt>
}</block> <decl><name><name>mxf_prores_codec_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_PRORES_PROXY</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_LT</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_STANDARD</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_HQ</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_4444</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_PRORES_XQ</name></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_parse_prores_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>profile</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_prores_codec_uls</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name><name>mxf_prores_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_prores_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_ul</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UID</name></type> <name>codec_ul</name></decl>;</decl_stmt>
}</block> <decl><name><name>mxf_dnxhd_codec_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">1235</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1237</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1238</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1241</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1242</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1243</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1244</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1250</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1251</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1252</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1253</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1256</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1258</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1259</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1260</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1270</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1271</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1272</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1273</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">1274</literal></expr>, <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>, 
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_parse_dnxhd_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cid</name></decl>, <decl><type ref="prev"/><name>frame_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">43</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cid</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_dnxhd_codec_uls</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>==</operator> <name><name>mxf_dnxhd_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_dnxhd_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_ul</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0x21</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>frame_size</name> <operator>=</operator> <call><name>avpriv_dnxhd_get_frame_size</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>DNXHD_VARIABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>avpriv_dnxhd_get_hr_frame_size</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <call><name>avpriv_dnxhd_get_interlaced</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&gt;=</operator> <literal type="number">1270</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>UID</name></type> <name>container_ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>UID</name></type> <name>codec_ul</name></decl>;</decl_stmt>
}</block> <decl><name><name>mxf_dv_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_parse_dv_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vs_pack</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vsc_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apt</name></decl>, <decl><type ref="prev"/><name>ul_index</name></decl>, <decl><type ref="prev"/><name>stype</name></decl>, <decl><type ref="prev"/><name>pal</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">120000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>apt</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vs_pack</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">80</literal><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vsc_pack</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">80</literal><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">53</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stype</name> <operator>=</operator> <name><name>vs_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>(</operator><name><name>vs_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>




<switch>switch <condition>(<expr><name>stype</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x18</literal></expr>:</case> 
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">8</literal><operator>+</operator><name>pal</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"source marked as interlaced but codec profile is progressive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">6</literal><operator>+</operator><name>pal</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x04</literal></expr>:</case> 
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">4</literal><operator>+</operator><name>pal</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>apt</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">0</literal><operator>+</operator><name>pal</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">2</literal><operator>+</operator><name>pal</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_dv_uls</name><index>[<expr><name>ul_index</name></expr>]</index></name><operator>.</operator><name>container_ul</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_dv_uls</name><index>[<expr><name>ul_index</name></expr>]</index></name><operator>.</operator><name>codec_ul</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>UID</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>interlaced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_only</name></decl>;</decl_stmt> 
}</block> <decl><name><name>mxf_h264_codec_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">232960</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x02</literal></expr> }</block></expr>, <expr><literal type="number">281088</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x03</literal></expr> }</block></expr>, <expr><literal type="number">232960</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x04</literal></expr> }</block></expr>, <expr><literal type="number">281088</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x08</literal></expr> }</block></expr>, <expr><literal type="number">116736</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x09</literal></expr> }</block></expr>, <expr><literal type="number">140800</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">472576</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x02</literal></expr> }</block></expr>, <expr><literal type="number">568832</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x03</literal></expr> }</block></expr>, <expr><literal type="number">472576</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x04</literal></expr> }</block></expr>, <expr><literal type="number">568832</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x08</literal></expr> }</block></expr>, <expr><literal type="number">236544</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x09</literal></expr> }</block></expr>, <expr><literal type="number">284672</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_parse_h264_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MXFIndexEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264SequenceParameterSet</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_size</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>, <decl><type ref="prev"/><name>slice_type</name></decl>, <decl><type ref="prev"/><name>intra_only</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <name>buf_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>state</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>H264_NAL_SPS</name></expr>:</case>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>ff_avc_find_startcode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sps</name> <operator>=</operator> <call><name>ff_avc_decode_sps</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nal_end</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error parsing sps\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>intra_only</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H264_NAL_PPS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>extra_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>H264_NAL_IDR_SLICE</name></expr>:</case>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_end</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>H264_NAL_SLICE</name></expr>:</case>
<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_end</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>slice_type</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>slice_type</name> <operator>%</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_end</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>field_order</name></name> <operator>!=</operator> <name>AV_FIELD_PROGRESSIVE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>extra_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_h264_codec_uls</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>==</operator> <name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_size</name> <operator>&amp;&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>==</operator> <name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>avc_intra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>cbr_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>field_dominance</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sps</name> <operator>&amp;&amp;</operator> <name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile</name> <operator>==</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>intra_only</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>intra_only</name> <operator>==</operator> <name>intra_only</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_h264_codec_uls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"h264 profile not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name></type> <name><name>mxf_mpeg2_codec_uls</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>UID</name> <modifier>*</modifier></type><name>mxf_get_mpeg2_codec_ul</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>long_gop</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>mxf_mpeg2_codec_uls</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>long_gop</name></expr>]</index></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>mxf_mpeg2_codec_uls</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>long_gop</name></expr>]</index></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>mxf_mpeg2_codec_uls</name><index>[<expr><literal type="number">8</literal><operator>+</operator><name>long_gop</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>mxf_mpeg2_codec_uls</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>long_gop</name></expr>]</index></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><operator>&amp;</operator><name><name>mxf_mpeg2_codec_uls</name><index>[<expr><literal type="number">6</literal><operator>+</operator><name>long_gop</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_parse_mpeg2_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MXFIndexEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>field_dominance</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b8</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>seq_closed_gop</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>seq_closed_gop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>seq_closed_gop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b3</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">221</literal></expr>,<expr><literal type="number">100</literal></expr>}</block></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name> <init>= <expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>temporal_ref</name></name> <operator>=</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x22</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pict_type</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>closed_gop</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x13</literal></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x33</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>temporal_reordering</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>pict_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error parsing mpeg2 frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <call><name>mxf_get_mpeg2_codec_ul</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>mxf_parse_timestamp</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>timestamp64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name> <init>= <expr><name>timestamp64</name> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>time</name> <init>= <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>time</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>time</name><operator>-&gt;</operator><name>tm_year</name></name><operator>+</operator><literal type="number">1900</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal> <operator>|</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>time</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>time</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator>
<name><name>time</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
<name><name>time</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
<name><name>time</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator>
<operator>(</operator><name>timestamp64</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">4000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_gen_umid</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>umid</name> <init>= <expr><name>seed</name> <operator>+</operator> <literal type="number">0x5294713400000000LL</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>umid</name></name></expr></argument> , <argument><expr><name>umid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>umid</name></name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>umid</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>instance_number</name></name> <operator>=</operator> <name>seed</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_init_timecode</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tbc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tcr</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_mxf_get_content_package_rate</name><argument_list>(<argument><expr><name>tbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported frame rate %d/%d. Set -strict option to 'unofficial' or lower in order to allow it!\n"</literal></expr></argument>, <argument><expr><name><name>tbc</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>tbc</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unofficial frame rate %d/%d.\n"</literal></expr></argument>, <argument><expr><name><name>tbc</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>tbc</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_base</name></name> <operator>=</operator> <operator>(</operator><name><name>tbc</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name><name>tbc</name><operator>.</operator><name>num</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>tbc</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tcr</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tcr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_timecode_init_from_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name>tbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tcr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>av_timecode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name>tbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>present</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mxf_essence_container_uls</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"there must be exactly one stream for mxf opatom\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment_"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>store_user_comments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"there must be exactly one video stream and it must be the first one\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tbc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>h_chroma_sub_sample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>v_chroma_sub_sample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>aspect_ratio</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>,
<argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>component_depth</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>h_chroma_sub_sample</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>v_chroma_sub_sample</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>ff_choose_chroma_location</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCHROMA_LOC_TOPLEFT</name></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCHROMA_LOC_LEFT</name></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCHROMA_LOC_TOP</name></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCHROMA_LOC_CENTER</name></expr>:</case> <expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>content_package_rate</name></name> <operator>=</operator> <call><name>ff_mxf_get_content_package_rate</name><argument_list>(<argument><expr><name>tbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name>tbc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mxf_init_timecode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>tbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>seq_closed_gop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>cbr_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ntsc</name> <init>= <expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">25</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ul_index</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error MXF D-10 only support MPEG-2 Video\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>==</operator> <literal type="number">50000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>==</operator> <literal type="number">49999840</literal> <operator>||</operator> <name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>==</operator> <literal type="number">50000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>ntsc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>==</operator> <literal type="number">40000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">2</literal><operator>+</operator><name>ntsc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>==</operator> <literal type="number">30000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ul_index</name> <operator>=</operator> <literal type="number">4</literal><operator>+</operator><name>ntsc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error MXF D-10 only support 30/40/50 mbit/s\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_d10_codec_uls</name><index>[<expr><name>ul_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_d10_container_uls</name><index>[<expr><name>ul_index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>INDEX_D10_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>signal_standard</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>color_siting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sc</name><operator>-&gt;</operator><name>video_bit_rate</name></name> <operator>*</operator>
<name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>signal_standard</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>signal_standard</name></name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>signal_standard</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only 48khz is implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MXF D-10 only support one audio track\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_PCM_S16LE</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_PCM_S24LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MXF D-10 only support 16 or 24 bits le audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>INDEX_D10_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MXFStreamContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name><operator>)</operator><operator>-&gt;</operator><name>container_ul</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>tbc</name> <init>= <expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>audio_edit_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_PCM_S16LE</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_PCM_S24LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only pcm_s16le and pcm_s24le audio codecs are implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MXF OPAtom only supports single channel audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mxf_init_timecode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>tbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>=</operator> <operator>(</operator><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>INDEX_WAV</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call> <operator>*</operator>
<call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"data_type"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"vbi_vanc_smpte_436M"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>INDEX_S436M</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"track %d: unsupported data type\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"data track must be placed last\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>mxf_get_essence_container_ul_index</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"track %d: could not find essence container ul, "</literal>
<literal type="string">"codec not currently supported in container\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>codec_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_essence_container_uls</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>codec_ul</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>mxf_essence_container_uls</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>container_ul</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name></expr></argument>, <argument><expr><name><name>mxf_essence_container_uls</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>element_ul</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>present</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PRINT_KEY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"track essence element key"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>present</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>present</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_gen_umid</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>present</name><index>[<expr><name><name>sc</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name></expr></argument>, <argument><expr><name><name>mxf_essence_container_uls</name><index>[<expr><name>INDEX_DV</name></expr>]</index></name><operator>.</operator><name>element_ul</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0x15</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name><operator>+</operator><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>ff_parse_creation_time_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>mxf_parse_timestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MXFStreamContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_audio_interleave_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>tc</name><operator>.</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>system_metadata_pack_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>system_metadata_package_set_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_system_item</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>time_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>system_item_bitmap</name> <init>= <expr><literal type="number">0x58</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>last_indexed_edit_unit</name></name> <operator>+</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>system_metadata_pack_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>system_item_bitmap</name> <operator>|=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>system_item_bitmap</name> <operator>|=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>system_item_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>content_package_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>frame</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>essence_container_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>multiple_desc_ul</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>*</operator><name><name>sc</name><operator>-&gt;</operator><name>container_ul</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>time_code</name> <operator>=</operator> <call><name>av_timecode_get_smpte_from_framenum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>time_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>system_metadata_package_set_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_umid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_d10_audio_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>frame_size</name><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>frame_size</name> <operator>==</operator> <literal type="number">1920</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samples</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sample</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S24LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>samples</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>samples</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sample</name> <operator>|</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_opatom_body_partition</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>body_partition_key</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber9_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_opatom_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MXFIndexEntry</name> <modifier>*</modifier></type><name>ie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header_open_partition_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_opatom_body_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>ie</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>temporal_ref</name> <operator>=</operator> <name><name>ie</name><operator>-&gt;</operator><name>temporal_ref</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_compute_edit_unit_byte_count</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>=</operator> <name>KAG_SIZE</name></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>slice_offset</name></name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>+=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>+=</operator> <call><name>klv_fill_size</name><argument_list>(<argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFIndexEntry</name></type> <name>ie</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>cbr_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>%</operator> <name>EDIT_UNITS_PER_BODY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name>
<operator>+</operator> <name>EDIT_UNITS_PER_BODY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not allocate index entries\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxf_parse_mpeg2_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ie</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get mpeg2 profile and level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxf_parse_dnxhd_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get dnxhd profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PRORES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxf_parse_prores_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get prores profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxf_parse_dv_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get dv profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxf_parse_h264_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ie</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get h264 profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>cbr_index</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"track %d: frame size does not match index unit size, %d != %d\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mxf_compute_edit_unit_byte_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>mxf_write_opatom_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ie</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>header_open_partition_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_index_table_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header_open_partition_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>||</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name> <operator>&gt;</operator> <name>EDIT_UNITS_PER_BODY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>ie</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x33</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>body_partition_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_index_table_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_system_item</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>ie</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>]</index></name><operator>.</operator><name>temporal_ref</name> <operator>=</operator> <name><name>ie</name><operator>.</operator><name>temporal_ref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>+=</operator> <name>KAG_SIZE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No packets in first stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>slice_offset</name> <operator>=</operator>
<name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>-</operator> <name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>track_essence_element_key</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_d10_muxer</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mxf_write_d10_audio_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>klv_encode_ber4_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_offset</name></name> <operator>+=</operator> <literal type="number">16</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>klv_fill_size</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_write_random_index_pack</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>random_index_pack_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>klv_encode_ber_length</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>+</operator> <literal type="number">12LL</literal><operator>*</operator><name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>footer_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_write_footer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>header_written</name></name> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>mxf</name><operator>-&gt;</operator><name>last_indexed_edit_unit</name></name> <operator>+</operator> <name><name>mxf</name><operator>-&gt;</operator><name>edit_units_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxf</name><operator>-&gt;</operator><name>footer_partition_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>footer_partition_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>footer_partition_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_index_table_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_random_index_pack</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_opatom_body_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>edit_unit_byte_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>!=</operator> <operator>&amp;</operator><name>ff_mxf_opatom_muxer</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>header_closed_partition_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mxf_write_klv_fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mxf_write_index_table_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mxf_write_partition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header_closed_partition_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mxf</name><operator>-&gt;</operator><name>body_partitions_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">44</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mxf</name><operator>-&gt;</operator><name>footer_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mxf_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFContext</name> <modifier>*</modifier></type><name>mxf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_audio_interleave_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>body_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mxf</name><operator>-&gt;</operator><name>timecode_track</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_interleave_get_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>stream_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>stream_count</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>last_in_packet_buffer</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>stream_count</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <name>stream_count</name> <operator>||</operator> <name>flush</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <name>stream_count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pktl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_count</name> <operator>||</operator> <name><name>pktl</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>last_in_packet_buffer</name> <operator>!=</operator> <name>pktl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>last_in_packet_buffer</name> <operator>=</operator> <name>pktl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>pktl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>pktl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer_end</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pktl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>pktl</name><operator>-&gt;</operator><name>pkt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"out st:%d dts:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>.</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>out</name><operator>)</operator><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer</name></name> <operator>=</operator> <name><name>pktl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>last_in_packet_buffer</name> <operator>==</operator> <name>pktl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pktl</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>last_in_packet_buffer</name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>packet_buffer_end</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pktl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_compare_timestamps</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>next</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name> <operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MXFStreamContext</name> <modifier>*</modifier></type><name>sc2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>next</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>next</name><operator>-&gt;</operator><name>dts</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>||</operator>
<operator>(</operator><name><name>next</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&amp;&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>order</name></name> <operator>&lt;</operator> <name><name>sc2</name><operator>-&gt;</operator><name>order</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mxf_interleave</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_audio_rechunk_interleave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>,
<argument><expr><name>mxf_interleave_get_packet</name></expr></argument>, <argument><expr><name>mxf_compare_timestamps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MXF_COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "signal_standard", "Force/set Signal Standard",offsetof(MXFContext, signal_standard), AV_OPT_TYPE_INT, {.i64 = -1}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "bt601", "ITU-R BT.601 and BT.656, also SMPTE 125M (525 and 625 line interlaced)",0, AV_OPT_TYPE_CONST, {.i64 = 1}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "bt1358", "ITU-R BT.1358 and ITU-R BT.799-3, also SMPTE 293M (525 and 625 line progressive)",0, AV_OPT_TYPE_CONST, {.i64 = 2}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "smpte347m", "SMPTE 347M (540 Mbps mappings)",0, AV_OPT_TYPE_CONST, {.i64 = 3}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "smpte274m", "SMPTE 274M (1125 line)",0, AV_OPT_TYPE_CONST, {.i64 = 4}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "smpte296m", "SMPTE 296M (750 line progressive)",0, AV_OPT_TYPE_CONST, {.i64 = 5}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "smpte349m", "SMPTE 349M (1485 Mbps mappings)",0, AV_OPT_TYPE_CONST, {.i64 = 6}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},{ "smpte428", "SMPTE 428-1 DCDM",0, AV_OPT_TYPE_CONST, {.i64 = 7}, -1, 7, AV_OPT_FLAG_ENCODING_PARAM, "signal_standard"},</cpp:value></cpp:define>



















<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>mxf_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MXF_COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"store_user_comments"</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MXFContext</name></expr></argument>, <argument><expr><name>store_user_comments</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mxf_muxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"MXF muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>mxf_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>d10_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"d10_channelcount"</literal></expr>, <expr><literal type="string">"Force/set channelcount in generic sound essence descriptor"</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MXFContext</name></expr></argument>, <argument><expr><name>channel_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,
<expr><name>MXF_COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"store_user_comments"</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MXFContext</name></expr></argument>, <argument><expr><name>store_user_comments</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mxf_d10_muxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"MXF-D10 muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>d10_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>opatom_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mxf_audio_edit_rate"</literal></expr>, <expr><literal type="string">"Audio edit rate for timecode"</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MXFContext</name></expr></argument>, <argument><expr><name>audio_edit_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">25</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,
<expr><name>MXF_COMMON_OPTIONS</name>
<block>{ <expr><literal type="string">"store_user_comments"</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MXFContext</name></expr></argument>, <argument><expr><name>store_user_comments</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mxf_opatom_muxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"MXF-OPAtom muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>opatom_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mxf_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mxf"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MXF (Material eXchange Format)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"application/mxf"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mxf"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MXFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mxf_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mxf_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mxf_write_footer</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mxf_deinit</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,
<expr><operator>.</operator><name>interleave_packet</name> <operator>=</operator> <name>mxf_interleave</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mxf_muxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mxf_d10_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mxf_d10"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MXF (Material eXchange Format) D-10 Mapping"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"application/mxf"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MXFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mxf_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mxf_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mxf_write_footer</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mxf_deinit</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,
<expr><operator>.</operator><name>interleave_packet</name> <operator>=</operator> <name>mxf_interleave</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mxf_d10_muxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mxf_opatom_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mxf_opatom"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MXF (Material eXchange Format) Operational Pattern Atom"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"application/mxf"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mxf"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MXFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_DNXHD</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mxf_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mxf_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mxf_write_footer</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mxf_deinit</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,
<expr><operator>.</operator><name>interleave_packet</name> <operator>=</operator> <name>mxf_interleave</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mxf_opatom_muxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
