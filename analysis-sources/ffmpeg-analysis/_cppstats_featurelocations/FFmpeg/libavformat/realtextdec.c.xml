<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\realtextdec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name>q</name></decl>;</decl_stmt>
}</block></struct></type> <name>RealTextContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realtext_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTextReader</name></type> <name>tr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_text_init_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_text_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;window"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>ms</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <name>mm</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>ms</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <name>mm</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>ms</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">100</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realtext_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RealTextContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>duration</name> <init>= <expr><call><name>read_ts</name><argument_list>(<argument><expr><literal type="string">"60"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FFTextReader</name></type> <name>tr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_text_init_avio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_REALTEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ff_text_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>ff_text_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>ff_smil_extract_next_text_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;window"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ff_smil_get_attr_ptr</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>read_ts</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>merge</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;time"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merge</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><call><name>ff_smil_get_attr_ptr</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>ff_smil_get_attr_ptr</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <ternary><condition><expr><name>begin</name></expr> ?</condition><then> <expr><call><name>read_ts</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <ternary><condition><expr><name>end</name></expr> ?</condition><then> <expr><operator>(</operator><call><name>read_ts</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name><operator>)</operator></expr> </then><else>: <expr><name>duration</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realtext_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RealTextContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realtext_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RealTextContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,
<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realtext_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RealTextContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_realtext_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"realtext"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealText subtitle format"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RealTextContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>realtext_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>realtext_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>realtext_read_packet</name></expr>,
<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>realtext_read_seek</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>realtext_read_close</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"rt"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
