<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\icecast.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>IcecastContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>genre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>legacy_icecast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>public</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent</name></decl>;</decl_stmt>
}</block></struct></type> <name>IcecastContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ICE_USER</name></cpp:macro> <cpp:value>"source"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_EMPTY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s &amp;&amp; s[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(IcecastContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ice_genre"</literal></expr>, <expr><literal type="string">"set stream genre"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>genre</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ice_name"</literal></expr>, <expr><literal type="string">"set stream description"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ice_description"</literal></expr>, <expr><literal type="string">"set stream description"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ice_url"</literal></expr>, <expr><literal type="string">"set stream website"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ice_public"</literal></expr>, <expr><literal type="string">"set if stream is public"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>public</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"user_agent"</literal></expr>, <expr><literal type="string">"override User-Agent header"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"password"</literal></expr>, <expr><literal type="string">"set password"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"content_type"</literal></expr>, <expr><literal type="string">"set content-type, MUST be set if not audio/mpeg"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"legacy_icecast"</literal></expr>, <expr><literal type="string">"use legacy SOURCE method, for Icecast &lt; v2.4"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>legacy_icecast</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>cat_header</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>key</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>value</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EMPTY</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icecast_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IcecastContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icecast_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IcecastContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opt_dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>h_url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>auth</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>headers</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>cat_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Ice-Name"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cat_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Ice-Description"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cat_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Ice-URL"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cat_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Ice-Genre"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>genre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cat_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Ice-Public"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>public</name></name></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>legacy_icecast</name></name></expr> ?</condition><then> <expr><literal type="string">"SOURCE"</literal></expr> </then><else>: <expr><literal type="string">"PUT"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"auth_type"</literal></expr></argument>, <argument><expr><literal type="string">"basic"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"chunked_post"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"send_expect_100"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>legacy_icecast</name></name></expr> ?</condition><then> <expr><literal type="string">"-1"</literal></expr> </then><else>: <expr><literal type="string">"1"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EMPTY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"content_type"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"content_type"</literal></expr></argument>, <argument><expr><literal type="string">"audio/mpeg"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOT_EMPTY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><literal type="string">"user_agent"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>auth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Overwriting -password &lt;pass&gt; with URI password!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>user</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>user</name></expr> ?</condition><then> <expr><name>user</name></expr> </then><else>: <expr><name>DEFAULT_ICE_USER</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No mountpoint (path) specified!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>h_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>h_url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icecast_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IcecastContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>send_started</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>send_started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>oggs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x53</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>webm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opus</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oggs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Streaming Ogg but appropriate content type NOT set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Set it with -content_type application/ogg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>opus</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Streaming Opus but appropriate content type NOT set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Set it with -content_type audio/ogg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>webm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>webm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Streaming WebM but appropriate content type NOT set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Set it with -content_type video/webm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"It seems you are streaming an unsupported format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"It might work, but is not officially supported in Icecast!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>icecast_context_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"icecast"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_icecast_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"icecast"</literal></expr>,
<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>icecast_open</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>icecast_write</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>icecast_close</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IcecastContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>icecast_context_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
