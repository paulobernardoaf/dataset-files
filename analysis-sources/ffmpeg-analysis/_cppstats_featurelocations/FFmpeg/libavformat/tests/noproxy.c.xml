<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\tests\noproxy.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/network.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>ff_http_match_no_proxy</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"The pattern \"%s\" %s the hostname %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>pattern</name></expr> ?</condition><then> <expr><name>pattern</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><literal type="string">"matches"</literal></expr> </then><else>: <expr><literal type="string">"does not match"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com other.com"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com,domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com,domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"otherdomain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com, *.domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"sub.domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com, *.domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"example.com, .domain.com"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="string">"domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
