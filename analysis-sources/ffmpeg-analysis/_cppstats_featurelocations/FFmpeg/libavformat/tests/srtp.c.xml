<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\tests\srtp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/rtpdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/srtp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_80_key</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtp_aes128_80</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,

<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x99</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtcp_aes128_80</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x35</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_32_key</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtp_aes128_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,

<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtcp_aes128_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x1b</literal></expr>,
<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x9d</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_80_32_key</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtp_aes128_80_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,

<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xb4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtcp_aes128_80_32</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xf9</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_decrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRTPContext</name></name> <modifier>*</modifier></type><name>srtp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_srtp_decrypt</name><argument_list>(<argument><expr><name>srtp</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_data</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SRTPContext</name></name></type> <name>enc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>RTP_MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>, <argument><expr><name>suite</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>, <argument><expr><name>suite</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ff_srtp_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_srtp_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>in_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decrypted content matches input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decrypted content doesn't match input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decryption failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_80_suite</name> <init>= <expr><literal type="string">"AES_CM_128_HMAC_SHA1_80"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_32_suite</name> <init>= <expr><literal type="string">"AES_CM_128_HMAC_SHA1_32"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aes128_80_32_suite</name> <init>= <expr><literal type="string">"SRTP_AES128_CM_HMAC_SHA1_32"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_key</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz1234567890ABCD"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>RTP_MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SRTPContext</name></name></type> <name>srtp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>aes128_80_suite</name></expr></argument>, <argument><expr><name>aes128_80_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtp_aes128_80</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtp_aes128_80</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_80_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_32_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_80_32_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtcp_aes128_80</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtcp_aes128_80</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_80_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_32_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>aes128_80_32_suite</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>srtp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>aes128_32_suite</name></expr></argument>, <argument><expr><name>aes128_32_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtp_aes128_32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtp_aes128_32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtcp_aes128_32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtcp_aes128_32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>srtp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>aes128_80_32_suite</name></expr></argument>, <argument><expr><name>aes128_80_32_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtp_aes128_80_32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtp_aes128_80_32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>, <argument><expr><name>rtcp_aes128_80_32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rtcp_aes128_80_32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
