<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\hdsenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>Fragment</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name></decl>, <name>duration</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>Fragment</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OutputStream</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctx_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iobuf</name><index>[<expr><literal type="number">32768</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp_filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>frag_start_ts</name></decl>, <name>last_ts</name>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packets_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_fragments</name></decl>, <name>fragments_size</name>, <name>fragment_index</name>;</decl_stmt>
<decl_stmt><decl><type><name>Fragment</name> <modifier>*</modifier><modifier>*</modifier></type><name>fragments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_audio</name></decl>, <name>has_video</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>metadata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>extra_packets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>extra_packet_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_extra_packets</name></decl>;</decl_stmt>
}</block></struct></type> <name>OutputStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HDSContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra_window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_frag_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remove_at_exit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>
}</block></struct></type> <name>HDSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_header</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"FLV"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>buf_size</name> <operator>&gt;=</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>AV_RB24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>type</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packet_sizes</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0x12</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">11</literal> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hds_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_header</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hds_free</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>ctx_inited</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_manifest</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>final</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>last_ts</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/index.f4m"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/index.f4m.tmp"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s for writing\n"</literal></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;manifest xmlns=\"http://ns.adobe.com/f4m/1.0\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;id&gt;%s&lt;/id&gt;\n"</literal></expr></argument>, <argument><expr><call><name>av_basename</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;streamType&gt;%s&lt;/streamType&gt;\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>final</name></expr> ?</condition><then> <expr><literal type="string">"recorded"</literal></expr> </then><else>: <expr><literal type="string">"live"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;deliveryType&gt;streaming&lt;/deliveryType&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>final</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;duration&gt;%f&lt;/duration&gt;\n"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b64_size</name> <init>= <expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base64</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>base64</name></expr></argument>, <argument><expr><name>b64_size</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>metadata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;bootstrapInfo profile=\"named\" url=\"stream%d.abst\" id=\"bootstrap%d\" /&gt;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;media bitrate=\"%d\" url=\"stream%d\" bootstrapInfoId=\"bootstrap%d\"&gt;\n"</literal></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>bitrate</name></name><operator>/</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;metadata&gt;%s&lt;/metadata&gt;\n"</literal></expr></argument>, <argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/media&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;/manifest&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>write_abst</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>final</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>asrt_pos</name></decl>, <decl><type ref="prev"/><name>afrt_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fragments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>first_stream</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_media_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>window_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fragments</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>final</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_media_time</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>last_ts</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_media_time</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/stream%d.abst"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/stream%d.abst.tmp"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s for writing\n"</literal></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>final</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>cur_media_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>asrt_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>final</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0xffffffff</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>asrt_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>afrt_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fragments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>afrt_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_file</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>start_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_extra_packets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>start_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>start_ts</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>extra_packet_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_file</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hds_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>oformat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument> , <argument><expr><literal type="string">"Failed to create directory %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oformat</name> <operator>=</operator> <call><name>av_guess_format</name><argument_list>(<argument><expr><literal type="string">"flv"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oformat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_MUXER_NOT_FOUND</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No bit rate set for stream %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>has_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>has_video</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>has_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>os</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream type in stream %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>first_stream</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>=</operator> <name>oformat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <call><name>avio_alloc_context</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hds_write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sample_aspect_ratio</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name><operator>.</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avformat_write_header</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>ctx_inited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>first_stream</name></name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/stream%d_temp"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>min_frag_duration</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"No video stream in output stream %d and no min frag duration set\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_abst</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_manifest</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hds_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_fragment</name><parameter_list>(<parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Fragment</name> <modifier>*</modifier></type><name>frag</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>&gt;=</operator> <name><name>os</name><operator>-&gt;</operator><name>fragments_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>fragments_size</name></name> <operator>=</operator> <operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>fragments_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>fragments_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>frag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hds_flush</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>final</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>end_ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>target_filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>first_stream</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>packets_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>target_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>target_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/stream%dSeg1-Frag%d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rename</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>, <argument><expr><name>target_filename</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_fragment</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>target_filename</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>frag_start_ts</name></name></expr></argument>, <argument><expr><name>end_ts</name> <operator>-</operator> <name><name>os</name><operator>-&gt;</operator><name>frag_start_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>final</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>end_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_size</name></name> <operator>||</operator> <operator>(</operator><name>final</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>remove_at_exit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remove</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>window_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>extra_window_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>final</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>remove_at_exit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>remove</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>remove</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>remove</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>-=</operator> <name>remove</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name> <operator>+</operator> <name>remove</name></expr></argument>,
<argument><expr><name><name>os</name><operator>-&gt;</operator><name>nb_fragments</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>os</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_abst</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>final</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hds_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OutputStream</name> <modifier>*</modifier></type><name>os</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_dts</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>fragment_index</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>min_frag_duration</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>has_video</name></name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>av_compare_ts</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>first_dts</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,
<argument><expr><name>end_dts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>packets_written</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hds_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>packets_written</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>frag_start_ts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>last_ts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>packets_written</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>ff_write_chained</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>-</operator> <name><name>os</name><operator>-&gt;</operator><name>first_stream</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hds_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HDSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hds_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>write_manifest</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>remove_at_exit</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/index.f4m"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/stream%d.abst"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hds_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HDSContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"number of fragments kept in the manifest"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"extra_window_size"</literal></expr>, <expr><literal type="string">"number of fragments kept outside of the manifest before removing from disk"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>extra_window_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">5</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"min_frag_duration"</literal></expr>, <expr><literal type="string">"minimum fragment duration (in microseconds)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_frag_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">10000000</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove_at_exit"</literal></expr>, <expr><literal type="string">"remove all fragments when finished"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>remove_at_exit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hds_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"HDS muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_hds_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hds"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"HDS Muxer"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HDSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>hds_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>hds_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>hds_write_trailer</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hds_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
