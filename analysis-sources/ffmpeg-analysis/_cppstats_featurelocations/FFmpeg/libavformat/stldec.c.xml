<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\stldec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name>q</name></decl>;</decl_stmt>
}</block></struct></type> <name>STLContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stl_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xEFBBBF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>ff_subtitles_next_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%*d:%*d:%*d:%*d , %*d:%*d:%*d:%*d , %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_pts</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hh1</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>ss1</name></decl>, <decl><type ref="prev"/><name>ms1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh2</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>, <decl><type ref="prev"/><name>ms2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%2d:%2d:%2d:%2d , %2d:%2d:%2d:%2d , %n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hh1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>hh2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>hh1</name><operator>*</operator><literal type="number">3600LL</literal> <operator>+</operator> <name>mm1</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss1</name><operator>)</operator> <operator>*</operator> <literal type="number">100LL</literal> <operator>+</operator> <name>ms1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>hh2</name><operator>*</operator><literal type="number">3600LL</literal> <operator>+</operator> <name>mm2</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss2</name><operator>)</operator> <operator>*</operator> <literal type="number">100LL</literal> <operator>+</operator> <name>ms2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stl_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>STLContext</name> <modifier>*</modifier></type><name>stl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_STL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pts_start</name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pts_start</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stl</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stl</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stl_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>STLContext</name> <modifier>*</modifier></type><name>stl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stl</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stl_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>STLContext</name> <modifier>*</modifier></type><name>stl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stl</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,
<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stl_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>STLContext</name> <modifier>*</modifier></type><name>stl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stl</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_stl_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stl"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Spruce subtitle format"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>stl_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>stl_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>stl_read_packet</name></expr>,
<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>stl_read_seek</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>stl_read_close</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"stl"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
