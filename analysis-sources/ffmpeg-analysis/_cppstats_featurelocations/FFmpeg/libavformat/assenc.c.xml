<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\assenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DialogueLine</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>readorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>DialogueLine</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <modifier>*</modifier><name>next</name>;</decl_stmt>
}</block></struct></type> <name>DialogueLine</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASSContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expected_readorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>dialogue_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>last_added_dialogue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssa_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_readorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>trailer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>trailer_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSContext</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_ASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Exactly one ASS/SSA stream is needed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>trailer</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"\n[Events]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trailer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trailer</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>, <argument><expr><literal type="string">"Format:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>trailer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trailer</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailer</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>header_size</name> <operator>=</operator> <operator>(</operator><name>trailer</name> <operator>-</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>trailer_size</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <name>header_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ass</name><operator>-&gt;</operator><name>trailer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>trailer</name></name> <operator>=</operator> <name>trailer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>header_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>ssa_mode</name></name> <operator>=</operator> <operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"\n[V4+ Styles]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="string">"\n[Events]"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"[Events]\r\nFormat: %s, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ass</name><operator>-&gt;</operator><name>ssa_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"Marked"</literal></expr> </then><else>: <expr><literal type="string">"Layer"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>purge_dialogues</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASSContext</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>dialogue</name> <init>= <expr><name><name>ass</name><operator>-&gt;</operator><name>dialogue_cache</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>dialogue</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name> <operator>==</operator> <name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name> <operator>||</operator> <name>force</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>dialogue</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name> <operator>!=</operator> <name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ReadOrder gap found between %d and %d\n"</literal></expr></argument>,
<argument><expr><name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name></expr></argument>, <argument><expr><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name> <operator>=</operator> <name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_print</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"Dialogue: "</literal></expr></argument>, <argument><expr><name><name>dialogue</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dialogue</name> <operator>==</operator> <name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dialogue</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dialogue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dialogue</name> <operator>=</operator> <name><name>ass</name><operator>-&gt;</operator><name>dialogue_cache</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"wrote %d ASS lines, cached dialogues: %d, waiting for event id %d\n"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ass</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>, <argument><expr><name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_dialogue</name><parameter_list>(<parameter><decl><type><name>ASSContext</name> <modifier>*</modifier></type><name>ass</name></decl></parameter>, <parameter><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>dialogue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>readorder</name></name> <operator>&gt;</operator> <name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ass</name><operator>-&gt;</operator><name>dialogue_cache</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>readorder</name></name> <operator>&gt;</operator> <name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>dialogue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialogue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dialogue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ass</name><operator>-&gt;</operator><name>dialogue_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>dialogue_cache</name></name> <operator>=</operator> <name>dialogue</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>dialogue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dialogue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>cache_size</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ass</name><operator>-&gt;</operator><name>last_added_dialogue</name></name> <operator>=</operator> <name>dialogue</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSContext</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>layer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh1</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>ss1</name></decl>, <decl><type ref="prev"/><name>ms1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hh2</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>, <decl><type ref="prev"/><name>ms2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DialogueLine</name> <modifier>*</modifier></type><name>dialogue</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dialogue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialogue</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name> <operator>&lt;</operator> <name><name>ass</name><operator>-&gt;</operator><name>expected_readorder</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unexpected ReadOrder %d\n"</literal></expr></argument>,
<argument><expr><name><name>dialogue</name><operator>-&gt;</operator><name>readorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ass</name><operator>-&gt;</operator><name>ssa_mode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Marked="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hh1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>start</name> <operator>/</operator> <literal type="number">360000</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>mm1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>start</name> <operator>/</operator> <literal type="number">6000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hh2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>/</operator> <literal type="number">360000</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>mm2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>/</operator> <literal type="number">6000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ss1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>start</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ms1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>start</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ss2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ms2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hh1</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hh1</name> <operator>=</operator> <literal type="number">9</literal></expr><operator>,</operator> <expr><name>mm1</name> <operator>=</operator> <literal type="number">59</literal></expr><operator>,</operator> <expr><name>ss1</name> <operator>=</operator> <literal type="number">59</literal></expr><operator>,</operator> <expr><name>ms1</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hh2</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hh2</name> <operator>=</operator> <literal type="number">9</literal></expr><operator>,</operator> <expr><name>mm2</name> <operator>=</operator> <literal type="number">59</literal></expr><operator>,</operator> <expr><name>ss2</name> <operator>=</operator> <literal type="number">59</literal></expr><operator>,</operator> <expr><name>ms2</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dialogue</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s%ld,%d:%02d:%02d.%02d,%d:%02d:%02d.%02d,%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ass</name><operator>-&gt;</operator><name>ssa_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"Marked="</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>layer</name></expr></argument>, <argument><expr><name>hh1</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>ss1</name></expr></argument>, <argument><expr><name>ms1</name></expr></argument>, <argument><expr><name>hh2</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>ss2</name></expr></argument>, <argument><expr><name>ms2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dialogue</name><operator>-&gt;</operator><name>line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dialogue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>insert_dialogue</name><argument_list>(<argument><expr><name>ass</name></expr></argument>, <argument><expr><name>dialogue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>purge_dialogues</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ass</name><operator>-&gt;</operator><name>ignore_readorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASSContext</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>purge_dialogues</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ass</name><operator>-&gt;</operator><name>trailer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ass</name><operator>-&gt;</operator><name>trailer</name></name></expr></argument>, <argument><expr><name><name>ass</name><operator>-&gt;</operator><name>trailer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ASSContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ignore_readorder"</literal></expr>, <expr><literal type="string">"write events immediately, even if they're out-of-order"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ignore_readorder</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ass_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ass muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_ass_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ass"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SSA (SubStation Alpha) subtitle"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"text/x-ass"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ass,ssa"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_ASS</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>write_trailer</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_NOTIMESTAMPS</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ass_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
