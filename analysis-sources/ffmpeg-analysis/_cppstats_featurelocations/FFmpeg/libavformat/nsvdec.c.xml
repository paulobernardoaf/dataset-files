<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\nsvdec.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSV_MAX_RESYNC</name></cpp:macro> <cpp:value>(500*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSV_MAX_RESYNC_TRIES</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>
















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
struct NSVf_header {
uint32_t chunk_tag; 
uint32_t chunk_size;
uint32_t file_size; 
uint32_t file_length; 
uint32_t info_strings_size; 
uint32_t table_entries;
uint32_t table_entries_used; 
};

struct NSVs_header {
uint32_t chunk_tag; 
uint32_t v4cc; 
uint32_t a4cc; 
uint16_t vwidth; 
uint16_t vheight; 
uint8_t framerate; 
uint16_t unknown;
};

struct nsv_avchunk_header {
uint8_t vchunk_size_lsb;
uint16_t vchunk_size_msb; 
uint16_t achunk_size;
};

struct nsv_pcm_header {
uint8_t bits_per_sample;
uint8_t channel_count;
uint16_t sample_rate;
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NSVF</name></cpp:macro> <cpp:value>MKTAG('N', 'S', 'V', 'f')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NSVS</name></cpp:macro> <cpp:value>MKTAG('N', 'S', 'V', 's')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TOC2</name></cpp:macro> <cpp:value>MKTAG('T', 'O', 'C', '2')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NONE</name></cpp:macro> <cpp:value>MKTAG('N', 'O', 'N', 'E')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SUBT</name></cpp:macro> <cpp:value>MKTAG('S', 'U', 'B', 'T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ASYN</name></cpp:macro> <cpp:value>MKTAG('A', 'S', 'Y', 'N')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_KEYF</name></cpp:macro> <cpp:value>MKTAG('K', 'E', 'Y', 'F')</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TB_NSVF</name></cpp:macro> <cpp:value>MKBETAG('N', 'S', 'V', 'f')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TB_NSVS</name></cpp:macro> <cpp:value>MKBETAG('N', 'S', 'V', 's')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSV_ST_VIDEO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSV_ST_AUDIO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSV_ST_SUBT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<enum>enum <name>NSVStatus</name> <block>{
<decl><name>NSV_UNSYNC</name></decl>,
<decl><name>NSV_FOUND_NSVF</name></decl>,
<decl><name>NSV_HAS_READ_NSVF</name></decl>,
<decl><name>NSV_FOUND_NSVS</name></decl>,
<decl><name>NSV_HAS_READ_NSVS</name></decl>,
<decl><name>NSV_FOUND_BEEF</name></decl>,
<decl><name>NSV_GOT_VIDEO</name></decl>,
<decl><name>NSV_GOT_AUDIO</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>NSVStream</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>frame_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_frame_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cum_len</name></decl>;</decl_stmt> 
}</block></struct></type> <name>NSVStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NSVContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>base_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>NSVf_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nsvs_file_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>NSVStatus</name></name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name><name>ahead</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vtag</name></decl>, <name>atag</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>vwidth</name></decl>, <name>vheight</name>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>avsync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nsvs_timestamps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsvf</name></decl>;</decl_stmt>
}</block></struct></type> <name>NSVContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>nsv_codec_video_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_VP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'3'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'3'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'3'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP5</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'5'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP5</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'5'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP6</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'6'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP6</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'6'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP6</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'6'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP6</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'6'</literal></argument>, <argument><literal type="char">'2'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_VP8</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'8'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,




<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'X'</literal></argument>, <argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'I'</literal></argument>, <argument><literal type="char">'D'</literal></argument>)</argument_list></macro> }</block></expr>, 
<expr><block>{ <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'R'</literal></argument>, <argument><literal type="char">'G'</literal></argument>, <argument><literal type="char">'B'</literal></argument>, <argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>nsv_codec_audio_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_MP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'M'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'3'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'A'</literal></argument>, <argument><literal type="char">'A'</literal></argument>, <argument><literal type="char">'C'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'A'</literal></argument>, <argument><literal type="char">'A'</literal></argument>, <argument><literal type="char">'C'</literal></argument>, <argument><literal type="char">'P'</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'L'</literal></argument>, <argument><literal type="char">'B'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_SPEEX</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'S'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'X'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'C'</literal></argument>, <argument><literal type="char">'M'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill_header</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_resync</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSV_MAX_RESYNC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV resync: [%d] = %02"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x0FF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xefbe</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV resynced on BEEF after %d bytes\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_FOUND_BEEF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>TB_NSVF</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV resynced on NSVf after %d bytes\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_FOUND_NSVF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV resynced on NSVs after %d bytes\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_FOUND_NSVS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV sync lost\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_parse_NSVf_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <name>av_unused</name></type> <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strings_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table_entries_used</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Multiple NSVf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>NSVf_end</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file_size</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVf chunk_size %u\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVf file_size %u\n"</literal></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVf duration %"</literal><name>PRId64</name><literal type="string">" ms\n"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>strings_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_entries</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_entries_used</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVf info-strings size: %d, table entries: %d, bis %d\n"</literal></expr></argument>,
<argument><expr><name>strings_size</name></expr></argument>, <argument><expr><name>table_entries</name></expr></argument>, <argument><expr><name>table_entries_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV got header; filepos %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strings_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strings</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>quote</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>strings</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>strings_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>strings</name> <operator>+</operator> <name>strings_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>, <argument><expr><name>strings_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>endp</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name>p</name> <operator>&gt;=</operator> <name>endp</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name>p</name> <operator>&gt;=</operator> <name>endp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVf INFO: %s='%s'\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV got infos; filepos %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>table_entries_used</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>index_entries</name></name> <operator>=</operator> <name>table_entries_used</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>table_entries_used</name> <operator>&gt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>table_entries_used</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>table_entries_used</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>table_entries</name> <operator>&gt;</operator> <name>table_entries_used</name> <operator>&amp;&amp;</operator>
<call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>table_entries_used</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>table_entries_used</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV got index; filepos %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>base_offset</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_HAS_READ_NSVF</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_parse_NSVs_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vtag</name></decl>, <decl><type ref="prev"/><name>atag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>vwidth</name></decl>, <decl><type ref="prev"/><name>vheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NSVStream</name> <modifier>*</modifier></type><name>nst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vtag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>atag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vwidth</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vheight</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVs framerate code %2x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>t</name><operator>&lt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framerate</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>framerate</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name>t</name><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>framerate</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>framerate</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name><operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name>i</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>avsync</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name>framerate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVs vsize %dx%d\n"</literal></expr></argument>, <argument><expr><name>vwidth</name></expr></argument>, <argument><expr><name>vheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>vtag</name></name> <operator>=</operator> <name>vtag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>atag</name></name> <operator>=</operator> <name>atag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>vwidth</name></name> <operator>=</operator> <name>vwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>vheight</name></name> <operator>=</operator> <name>vwidth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vtag</name> <operator>!=</operator> <name>T_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NSV_ST_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nst</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NSVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nst</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>nst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>vtag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>nsv_codec_video_tags</name></expr></argument>, <argument><expr><name>vtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>vwidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>vheight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>*</operator><name><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>nsv</name><operator>-&gt;</operator><name>index_entries</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name><name>nsv</name><operator>-&gt;</operator><name>duration</name></name><operator>/</operator><name><name>nsv</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>, <argument><expr><name><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>*</operator><name><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>atag</name> <operator>!=</operator> <name>T_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NSV_ST_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nst</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NSVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nst</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>nst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>atag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>nsv_codec_audio_tags</name></expr></argument>, <argument><expr><name>atag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>framerate</name><operator>.</operator><name>num</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>nsv</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <name><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>vtag</name></name> <operator>!=</operator> <name>vtag</name> <operator>||</operator> <name><name>nsv</name><operator>-&gt;</operator><name>atag</name></name> <operator>!=</operator> <name>atag</name> <operator>||</operator> <name><name>nsv</name><operator>-&gt;</operator><name>vwidth</name></name> <operator>!=</operator> <name>vwidth</name> <operator>||</operator> <name><name>nsv</name><operator>-&gt;</operator><name>vheight</name></name> <operator>!=</operator> <name>vwidth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV NSVs header values differ from the first one!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_HAS_READ_NSVS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSV_MAX_RESYNC_TRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_resync</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_FOUND_NSVF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_parse_NSVf_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_FOUND_NSVS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_parse_NSVs_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_read_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nsv_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"parsed header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fill_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name><name>st</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NSVStream</name> <modifier>*</modifier></type><name>nst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>auxcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>asize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>auxsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>||</operator> <name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<label><name>null_chunk_retry</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSV_MAX_RESYNC_TRIES</name> <operator>&amp;&amp;</operator> <name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>NSV_FOUND_NSVS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>err</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_resync</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_FOUND_NSVS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_parse_NSVs_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>NSV_HAS_READ_NSVS</name> <operator>&amp;&amp;</operator> <name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>NSV_FOUND_BEEF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>auxcount</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsize</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asize</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsize</name> <operator>=</operator> <operator>(</operator><name>vsize</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>auxcount</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>auxcount</name> <operator>&amp;=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV CHUNK %d aux, %"</literal><name>PRIu32</name><literal type="string">" bytes video, %d bytes audio\n"</literal></expr></argument>, <argument><expr><name>auxcount</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>auxcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <name>av_unused</name></type> <name>auxtag</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auxsize</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auxtag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>auxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsize</name> <operator>-=</operator> <name>auxsize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> 
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vsize</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>asize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<goto>goto <name>null_chunk_retry</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vsize</name> <operator>&amp;&amp;</operator> <name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nst</name> <operator>=</operator> <name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>nst</name><operator>-&gt;</operator><name>frame_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_HAS_READ_NSVS</name></expr> ?</condition><then> <expr><name>AV_PKT_FLAG_KEY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>vsize</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV video: [%d] = %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>NSVStream</name><operator>*</operator><operator>)</operator><name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name><operator>)</operator><operator>-&gt;</operator><name>frame_offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&amp;&amp;</operator> <name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nst</name> <operator>=</operator> <name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&amp;&amp;</operator> <name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>samplerate</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bps</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name> <operator>||</operator> <operator>!</operator><name>samplerate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>asize</name><operator>-=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV RAWAUDIO: bps %d, nchan %d, srate %d\n"</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fill_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name>need_parsing</name> <operator>=</operator> <name>AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV AUDIO bit/sample != 16 (%d)!!!\n"</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bps</name> <operator>/=</operator> <name>channels</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_U8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>samplerate</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>samplerate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV RAWAUDIO: bps %d, nchan %d, srate %d\n"</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>NSV_ST_AUDIO</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <ternary><condition><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_HAS_READ_NSVS</name></expr> ?</condition><then> <expr><name>AV_PKT_FLAG_KEY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 
<if_stmt><if>if<condition>( <expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>NSV_HAS_READ_NSVS</name> <operator>&amp;&amp;</operator> <name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>NSVStream</name><operator>*</operator><operator>)</operator><name><name>st</name><index>[<expr><name>NSV_ST_VIDEO</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name><operator>)</operator><operator>-&gt;</operator><name>frame_offset</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>*=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1000</literal> <operator>*</operator> <name><name>nsv</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>nsv</name><operator>-&gt;</operator><name>avsync</name></name> <operator>*</operator> <name><name>nsv</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"NSV AUDIO: sync:%d, dts:%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>nsv</name><operator>-&gt;</operator><name>avsync</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nst</name><operator>-&gt;</operator><name>frame_offset</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nsv_read_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NSVStream</name> <modifier>*</modifier></type><name>nst</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nst</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nsv</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>NSV_UNSYNC</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NSVContext</name> <modifier>*</modifier></type><name>nsv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>nsvs_timestamps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nsv</name><operator>-&gt;</operator><name>ahead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsv_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"NSVs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vsize</name> <init>= <expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">19</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asize</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">23</literal> <operator>+</operator> <name>asize</name> <operator>+</operator> <name>vsize</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xBEEF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal><operator>*</operator><name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>score</name> <operator>=</operator> <name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"nsv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>score</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_nsv_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nsv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Nullsoft Streaming Video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NSVContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>nsv_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>nsv_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>nsv_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>nsv_read_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>nsv_read_seek</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
