<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\oggdec.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_OGGDEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFORMAT_OGGDEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metadata.h"</cpp:file></cpp:include>

<struct>struct <name>ogg_codec</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>magicsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>header</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>packet</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>uint64_t</name></type> (<modifier>*</modifier><name>gptopts</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>int</name></type> <name>granule_is_start</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>nb_header</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>ogg_stream</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bufpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>psize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pduration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>granule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_granule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lastpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>lastdts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sync_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>page_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsegs</name></decl>, <decl><type ref="prev"/><name>segp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>segments</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>page_end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>keyframe_seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_header</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>end_trimming</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_metadata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_metadata_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ogg_state</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_state</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nstreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name></type> <name><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ogg</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nstreams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>page_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_state</name></name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OGG_FLAG_CONT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OGG_FLAG_BOS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OGG_FLAG_EOS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OGG_NOGRANULE_VALUE</name></cpp:macro> <cpp:value>(-1ull)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_celt_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_daala_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_dirac_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_flac_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_ogm_audio_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_ogm_old_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_ogm_text_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_ogm_video_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_old_dirac_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_old_flac_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_opus_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_skeleton_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_speex_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_theora_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_vorbis_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_vp8_codec</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_vorbis_comment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_picture</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vorbis_stream_comment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ogg_find_stream</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type> <name>ogg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serial</name> <operator>==</operator> <name>serial</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>ogg_gptopts</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>gp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>gptopts</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>gptopts</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>gp</name></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>gp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid pts %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pts</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
