<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\dvenc.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dv_profile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_AUDIO_FRAME_SIZE</name></cpp:macro> <cpp:value>192000</cpp:value></cpp:define> 

<struct>struct <name>DVMuxContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDVProfile</name><modifier>*</modifier></type> <name>sys</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n_ast</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name><name>ast</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name><name>audio_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_audio</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_video</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>frame_buf</name><index>[<expr><name>DV_MAX_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_aaux_packs_dist</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_audio_frame_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name><modifier>*</modifier></type> <name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">25</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">50</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name> <operator>==</operator> <literal type="number">32000</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1280</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>==</operator> <literal type="number">44100</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1764</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1920</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>sample_rate</name> <operator>==</operator> <literal type="number">48000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>audio_samples_dist</name><index>[<expr><name>frame</name> <operator>%</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_samples_dist</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_samples_dist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_write_pack</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>dv_pack_type</name></name></type> <name>pack_id</name></decl></parameter>, <parameter><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>ct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timecode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>pack_id</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>pack_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>dv_timecode</name></expr>:</case>
<expr_stmt><expr><name>timecode</name> <operator>=</operator> <call><name>av_timecode_get_smpte_from_framenum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timecode</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal> <operator>|</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>timecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>dv_audio_source</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <literal type="number">44100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>audio_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <literal type="number">32000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>audio_type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><call><name>dv_audio_frame_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call> <operator>-</operator>
<name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>audio_min_samples</name><index>[<expr><name>audio_type</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>seq</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dsf</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><ternary><condition><expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x3</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>video_stype</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>audio_type</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>
<case>case <expr><name>dv_audio_control</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: 
<expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>ltc_divisor</name></name> <operator>*</operator> <literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x7f</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>dv_audio_recdate</name></expr>:</case>
<case>case <expr><name>dv_video_recdate</name></expr>:</case> 
<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_brktimegm</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_mday</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_mday</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> 
<operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_mon</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_mon</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>dv_audio_rectime</name></expr>:</case> 
<case>case <expr><name>dv_video_rectime</name></expr>:</case> 
<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>start_time</name></name> <operator>+</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_brktimegm</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x3f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_sec</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_sec</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_min</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_min</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_hour</name></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>tc</name><operator>.</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_inject_audio</name><parameter_list>(<parameter><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>frame_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>of</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>dv_audio_frame_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>channel</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_ptr</name> <operator>+=</operator> <name>channel</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name> <operator>*</operator> <literal type="number">150</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>frame_ptr</name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name><name>dv_aaux_packs_dist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>d</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>audio_shuffle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>audio_stride</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>of</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame_ptr</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><call><name>av_fifo_peek2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>frame_ptr</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><call><name>av_fifo_peek2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><name>of</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name>frame_ptr</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_inject_metadata</name><parameter_list>(<parameter><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name>frame</name></expr>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>frame</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</condition> <incr><expr><name>buf</name> <operator>+=</operator> <literal type="number">150</literal> <operator>*</operator> <literal type="number">80</literal></expr><operator>,</operator> <expr><name>seq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">80</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_timecode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>buf</name><operator>-</operator><name>frame</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name><operator>/</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name><operator>)</operator><operator>)</operator><operator>%</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_recdate</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_rectime</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_recdate</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">38</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_rectime</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">46</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">80</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">80</literal><operator>*</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">80</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_recdate</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">5</literal><operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_rectime</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">5</literal><operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_recdate</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_rectime</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_assemble_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVStream</name><modifier>*</modifier></type> <name>st</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>reqasize</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>frame_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>has_video</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't process DV frame #%d. Insufficient audio data or severe sync problem.\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected frame size, %d != %d\n"</literal></expr></argument>,
<argument><expr><name>data_size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>frame</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_video</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name> <operator>&amp;&amp;</operator> <name>st</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>data_size</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>*</operator><name>MAX_AUDIO_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't process DV frame #%d. Insufficient video data or severe sync problem.\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reqasize</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>dv_audio_frame_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>reqasize</name> <operator>&lt;=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>has_video</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dv_inject_metadata</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dv_inject_audio</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reqasize</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>dv_audio_frame_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>reqasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>reqasize</name> <operator>&lt;=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_video</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DVMuxContext</name><modifier>*</modifier></type> <name>dv_init_mux</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>vst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>vst</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vst</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>bail_out</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vst</name> <operator>||</operator> <name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_PCM_S16LE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">44100</literal> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">32000</literal></expr> )</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>av_dv_codec_profile2</name><argument_list>(<argument><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>vst</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">50</literal><operator>)</operator> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bail_out</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>bail_out</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_audio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_video</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_parse_creation_time_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>av_fifo_alloc_array</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>MAX_AUDIO_FRAME_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>bail_out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>c</name></expr>;</return>

<label><name>bail_out</name>:</label>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>dvc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tcr</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dv_init_mux</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't initialize DV format!\n"</literal>
<literal type="string">"Make sure that you supply exactly two streams:\n"</literal>
<literal type="string">" video: 25fps or 29.97fps, audio: 2ch/48|44|32kHz/PCM\n"</literal>
<literal type="string">" (50Mbps allows an optional second audio stream)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>dvc</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>ltc_divisor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcr</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tcr</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tcr</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tcr</name> <operator>&amp;&amp;</operator> <call><name>av_timecode_init_from_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dvc</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><name><name>tcr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>av_timecode_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dvc</name><operator>-&gt;</operator><name>tc</name></name></expr></argument>, <argument><expr><name>rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_write_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>dv_assemble_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVMuxContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_ast</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_dv_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DV (Digital Video)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dv"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>dv_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>dv_write_packet</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>dv_deinit</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
