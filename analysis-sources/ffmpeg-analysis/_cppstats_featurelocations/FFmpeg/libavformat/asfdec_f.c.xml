<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\asfdec_f.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avlanguage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asfcrypt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ASFPayload</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFPayload</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFStream</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frag_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_obj_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_to_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkt_clean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ds_span</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ds_packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ds_chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>stream_language_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palette_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_ext_ct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFPayload</name></type> <name><name>payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>asfid2avid</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ASFStream</name></type> <name><name>streams</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>stream_bitrates</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name><name>dar</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stream_languages</name><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>packet_size_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_object_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_object_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>index_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASFMainHeader</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_property</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_segsizetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_replic_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_key_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_padsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>packet_frag_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>packet_frag_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_frag_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ts_is_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_multi_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_time_delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_time_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>no_resync_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>export_xmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uses_std_ecc</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"no_resync_search"</literal></expr>, <expr><literal type="string">"Don't try to resynchronize by looking for a certain optional start code"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ASFContext</name></expr></argument>, <argument><expr><name>no_resync_search</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"export_xmp"</literal></expr>, <expr><literal type="string">"Export full XMP metadata"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ASFContext</name></expr></argument>, <argument><expr><name>export_xmp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>asf_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"asf demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_MAX_STREAMS</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_HEADER_SIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>stream_bitrate_guid</name> <init>= <expr><block>{ 
<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xb2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_IF_GUID</name><parameter_list>(<parameter><type><name>g</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!ff_guidcmp(g, &amp;cmp)) av_log(NULL, AV_LOG_TRACE, "(GUID: %s) ", #cmp)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>print_guid</name><parameter_list>(<parameter><decl><type><name>ff_asf_guid</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_file_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_stream_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_audio_conceal_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_video_conceal_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_comment_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_codec_comment_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_codec_comment1_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_data_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_simple_index_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_head1_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_head2_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_my_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_ext_stream_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_extended_content_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_ext_stream_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_metadata_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_metadata_library_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_marker_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>stream_bitrate_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>PRINT_IF_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_asf_language_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"(GUID: unknown) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" 0x%02x,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>g</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRINT_IF_GUID</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_guid</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type2_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>type2_size</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<return>return <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<return>return <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>INT_MIN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_picture</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodecMime</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><name>ff_id3v2_mime_tags</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name> <init>= <expr><name>AV_CODEC_ID_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mimetype</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>picsize</name></decl>, <decl><type ref="prev"/><name>desc_len</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid attached picture size: %d.\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_id3v2_picture_types</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown attached picture type: %d.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>picsize</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>mime</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mime</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mime</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown attached picture mimetype: %s.\n"</literal></expr></argument>,
<argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picsize</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid attached picture data size: %d &gt;= %d.\n"</literal></expr></argument>,
<argument><expr><name>picsize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>desc_len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>picsize</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>picsize</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>picsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name><name>ff_id3v2_picture_types</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_id3_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier></type><name>id3v2_extra_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_id3v2_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id3v2_extra_meta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_id3v2_parse_apic</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_id3v2_parse_chapters</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_id3v2_free_extra_meta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type2_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>off</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <name>LEN</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>export_xmp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"xmp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ASF_UNICODE</name></expr>:</case>
<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>len</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASF_BYTE_ARRAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/Picture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>asf_read_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ID3"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>get_id3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Unsupported byte array in tag %s.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>finish</name>;</goto>
<case>case <expr><name>ASF_BOOL</name></expr>:</case>
<case>case <expr><name>ASF_DWORD</name></expr>:</case>
<case>case <expr><name>ASF_QWORD</name></expr>:</case>
<case>case <expr><name>ASF_WORD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>type2_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>ASF_GUID</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unsupported GUID value in tag %s.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported value type %d in tag %s.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_file_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>file_size</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>create_time</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>play_time</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>send_time</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ignore</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>min_pktsize</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>max_pktsize</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>min_pktsize</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>max_bitrate</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>max_pktsize</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_stream_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type_specific_size</name></decl>, <decl><type ref="prev"/><name>sizeX</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos1</name></decl>, <decl><type ref="prev"/><name>pos2</name></decl>, <decl><type ref="prev"/><name>start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_for_ext_stream_audio</name></decl>, <decl><type ref="prev"/><name>is_dvr_ms_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <name>ASF_MAX_STREAMS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>fsize</name> <init>= <expr><call><name>avio_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>file_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<literal type="number">20</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>fsize</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>file_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>fsize</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>file_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>play_time</name></name> <operator>/</operator>
<operator>(</operator><literal type="number">10000000</literal> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>test_for_ext_stream_audio</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_jfif_media</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_for_ext_stream_audio</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>type_specific_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_for_ext_stream_audio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_ext_stream_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_dvr_ms_audio</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_get_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>type_specific_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_dvr_ms_audio</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <operator>(</operator><name>pos2</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>pos1</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name> <operator>||</operator>
<operator>(</operator><name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name> <operator>/</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name> <operator>%</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>
<name>size</name> <operator>-</operator> <operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos1</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">51</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>sizeX</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tag1</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sizeX</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <call><name>ffio_limit</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sizeX</name> <operator>-</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>palette_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><name>tag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag1</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL_ONCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL_ONCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <operator>(</operator><name>pos2</name> <operator>-</operator> <name>pos1</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_ext_stream_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_len</name></decl>, <decl><type ref="prev"/><name>payload_ext_ct</name></decl>, <decl><type ref="prev"/><name>stream_ct</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>leak_rate</name></decl>, <decl><type ref="prev"/><name>stream_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stream_languageid_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>leak_rate</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>stream_num</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>stream_languageid_index</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>stream_num</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>=</operator> <name>stream_languageid_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>stream_ct</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>payload_ext_ct</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>stream_num</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_bitrates</name><index>[<expr><name>stream_num</name></expr>]</index></name> <operator>=</operator> <name>leak_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>payload_ext_ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stream_ct</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ext_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payload_ext_ct</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ext_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ext_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_num</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>payload</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ASFPayload</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Payload extension %x %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>payload_ext_ct</name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_content_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>, <decl><type ref="prev"/><name>len3</name></decl>, <decl><type ref="prev"/><name>len4</name></decl>, <decl><type ref="prev"/><name>len5</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len3</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len4</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len5</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len3</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len4</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_ext_content_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc_count</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>desc_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>name_len</name></decl>, <decl><type ref="prev"/><name>value_type</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>name_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>name_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value_type</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_type</name> <operator>&amp;&amp;</operator> <name>value_len</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>den</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_language_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_count</name> <init>= <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>lang</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lang_len</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>lang_len</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>lang_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>lang_len</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_languages</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>asf</name><operator>-&gt;</operator><name>stream_languages</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>stream_num</name></decl>, <decl><type ref="prev"/><name>name_len_utf16</name></decl>, <decl><type ref="prev"/><name>name_len_utf8</name></decl>, <decl><type ref="prev"/><name>value_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>stream_num</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_len_utf16</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value_type</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>value_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>value_len</name></expr></argument> &gt;</argument_list></name> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_len_utf8</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>name_len_utf16</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>name_len_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len_utf16</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len_utf8</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>name_len_utf16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len_utf16</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"%d stream %d name_len %2d type %d len %4d &lt;%s&gt;\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>stream_num</name></expr></argument>, <argument><expr><name>name_len_utf16</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aspect_x</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>stream_num</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>aspect_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aspect_y</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>stream_num</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>stream_num</name></expr>]</index></name><operator>.</operator><name>den</name> <operator>=</operator> <name>aspect_y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_marker</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>name_len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pres_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>pres_time</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>pres_time</name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>name_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>avpriv_new_chapter</name><argument_list>(<argument>s</argument>, <argument>i</argument>, <argument>(AVRational) { <literal type="number">1</literal></argument>, <argument><literal type="number">10000000</literal> }</argument>, <argument>pres_time</argument>,
<argument>AV_NOPTS_VALUE</argument>, <argument>name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>gpos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gsize</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_guid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_data_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_object_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>gsize</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_object_size</name></name> <operator>=</operator> <name>gsize</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_object_size</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gsize</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_file_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_read_file_properties</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_read_stream_properties</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_comment_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_content_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_language_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_language_list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_extended_content_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_ext_content_desc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_metadata_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_metadata_library_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_ext_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_ext_stream_properties</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_head1_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_marker_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_marker</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keylen</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_content_encryption</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"DRM protected stream detected, decoding will likely fail!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Secret data:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_hex_dump_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ASF_Protection_Type"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ASF_Key_ID"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ASF_License_URL"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_ext_content_encryption</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Ext DRM protected stream detected, decoding will likely fail!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encryption"</literal></expr></argument>, <argument><expr><literal type="string">"ASF Extended Content Encryption"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_digital_signature</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Digital signature detected!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>gpos</name> <operator>+</operator> <name>gsize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"gpos mismatch our pos=%"</literal><name>PRIu64</name><literal type="string">", end=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>gpos</name></expr></argument>, <argument><expr><name>gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gpos</name> <operator>+</operator> <name>gsize</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stream_num</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_num</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>stream_bitrates</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>den</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>den</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"i=%d, st-&gt;codecpar-&gt;codec_type:%d, asf-&gt;dar %d:%d sar=%d:%d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>dar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rfc1766</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>stream_languages</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rfc1766</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rfc1766</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>primary_tag</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>rfc1766</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>rfc1766</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iso6392</name> <init>= <expr><call><name>ff_convert_lang_to</name><argument_list>(<argument><expr><name>primary_tag</name></expr></argument>,
<argument><expr><name>AV_LANG_ISO639_2_BIBL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iso6392</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>iso6392</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_metadata_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ff_asf_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_2BITS</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>defval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (bits &amp; 3) { case 3: var = avio_rl32(pb); rsize += 4; break; case 2: var = avio_rl16(pb); rsize += 2; break; case 1: var = avio_r8(pb); rsize++; break; default: var = defval; break; }</cpp:value></cpp:define>
























<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_get_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packet_length</name></decl>, <decl><type ref="prev"/><name>padsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rsize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>uses_std_ecc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>no_resync_search</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>e</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>off</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x82</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>d</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0x82</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"ff asf bad header %x at:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x8f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x82</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>||</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ff asf bad non zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rsize</name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x60</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name> <operator>+=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0x82</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Invalid ECC byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>uses_std_ecc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>uses_std_ecc</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0x82</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>d</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>e</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>uses_std_ecc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>packet_length</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>padsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>padsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet_length</name> <operator>||</operator> <name>packet_length</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid packet_length %"</literal><name>PRIu32</name><literal type="string">" at:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>packet_length</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>padsize</name> <operator>&gt;=</operator> <name>packet_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid padsize %"</literal><name>PRIu32</name><literal type="string">" at:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>padsize</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segsizetype</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_segsizetype</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segsizetype</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <name>packet_length</name> <operator>-</operator> <name>padsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"invalid packet header length %d for pktlen %"</literal><name>PRIu32</name><literal type="string">"-%"</literal><name>PRIu32</name><literal type="string">" at %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>rsize</name></expr></argument>, <argument><expr><name>packet_length</name></expr></argument>, <argument><expr><name>padsize</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>=</operator> <name>packet_length</name> <operator>-</operator> <name>padsize</name> <operator>-</operator> <name>rsize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packet_length</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>min_pktsize</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padsize</name> <operator>+=</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>min_pktsize</name></name> <operator>-</operator> <name>packet_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name> <operator>=</operator> <name>padsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"packet: size=%d padsize=%d left=%d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_frame_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asfst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rsize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts0</name></decl>, <decl><type ref="prev"/><name>ts1</name> <name>av_unused</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name><index>[<expr><name>num</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>asfst</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>num</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_seq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>asf</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"key:%d stream:%d seq:%d offset:%d replic_size:%d num:%X packet_property %X\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_seq</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rsize</name><operator>+</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet_replic_size %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>aspect</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>asfst</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asfst</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>||</operator> <name><name>asfst</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet_obj_size %d invalid\n"</literal></expr></argument>, <argument><expr><name><name>asfst</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asfst</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asfst</name><operator>-&gt;</operator><name>payload_ext_ct</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ASFPayload</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>asfst</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>payend</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>payend</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>payend</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too long payload\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x50</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="number">0x54</literal></expr>:</case>
<expr_stmt><expr><name><name>aspect</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aspect</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>aspect</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>aspect</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>sample_aspect_ratio</name> <operator>=</operator> <name>aspect</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x2A</literal></expr>:</case>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts0</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts0</name><operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <name>ts0</name><operator>/</operator><literal type="number">10000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>ts_is_pts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x5B</literal></expr>:</case>
<case>case <expr><literal type="number">0xB7</literal></expr>:</case>
<case>case <expr><literal type="number">0xCC</literal></expr>:</case>
<case>case <expr><literal type="number">0xC0</literal></expr>:</case>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>payend</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name> <operator>+=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_delta</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rsize</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected packet_replic_size of %d\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO_2BITS</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segsizetype</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet_replic_size is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-</operator> <name>rsize</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-</operator> <name>rsize</name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet_frag_size is invalid (%d&gt;%d-%d+%d)\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>-</operator> <operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-</operator> <name>rsize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-</operator> <name>rsize</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <name>rsize</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_parse_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&lt;</operator> <name>FRAME_HEADER_SIZE</name> <operator>||</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&lt;</operator> <name>FRAME_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Skip due to FRAME_HEADER_SIZE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>data_object_size</name></name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_pos</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_object_offset</name></name> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_object_size</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asf_read_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>||</operator> <name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name><operator>.</operator><name>skip_to_key</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ff asf skip %d (unknown stream)\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><operator>-&gt;</operator><name>skip_to_key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>asf_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"skipping asf data pkt with fragment offset for "</literal>
<literal type="string">"stream:%d, expected:%d but got %d from pkt)\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>+=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_time_delta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name> <operator>&lt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name> <operator>-=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>||</operator>

<name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>&gt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"freeing incomplete packet size %d, new %d\n"</literal></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_seq</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>ts_is_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_pos</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt_clean</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>palette_changed</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pal</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pal</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>,
<argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot append palette to packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pal</name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>palette_changed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>asf</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"new packet: stream:%d key:%d packet_key:%d audio:%d size:%d\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>asf</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"READ PACKET s:%d os:%d o:%d,%d l:%d DATA:%p\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>&gt;=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>||</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>&gt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"packet fragment position invalid %u,%u not in %u\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>!=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt_clean</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt_clean</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>+</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_shrink_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>+</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_asfcrypt_dec</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name></expr></argument>,
<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>==</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator>
<name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"discarding ms fart\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name> <operator>*</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"pkt.size != ds_packet_size * ds_span (%d %d %d)\n"</literal></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>newdata</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newdata</name> <operator>+</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>offset</name> <operator>/</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>off</name> <operator>/</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>off</name> <operator>%</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_span</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>row</name> <operator>+</operator> <name>col</name> <operator>*</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_packet_size</name></name> <operator>/</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name> <operator>&lt;=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>/</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newdata</name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr></argument>,
<argument><expr><name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>ds_chunk_size</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>side_data_elems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>side_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_parse_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_get_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&lt;</operator> <name>FRAME_HEADER_SIZE</name> <operator>||</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>asf_reset_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_property</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segsizetype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_segments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_replic_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_padsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_frag_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_multi_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_time_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>packet_obj_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>frag_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_to_key</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asfid2avid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name> <init>= <expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>skip_to_key</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>asf_read_pts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><name>pkt1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><operator>*</operator><name>ppos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>start_pos</name><index>[<expr><name>ASF_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>start_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name><operator>)</operator> <operator>/</operator>
<name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_read_frame_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_read_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"asf_read_pts failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>pos</name> <operator>-</operator> <name><name>start_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>packet_pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><name>pts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_build_simple_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>current_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>data_object_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_object_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>



<while>while <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_simple_index_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gsize</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>gsize</name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>||</operator> <call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>gsize</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>itime</name></decl>, <decl><type ref="prev"/><name>last_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pct</name></decl>, <decl><type ref="prev"/><name>ict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <name>av_unused</name></type> <name>gsize</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>itime</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pct</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ict</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"itime:0x%"</literal><name>PRIx64</name><literal type="string">", pct:%d, ict:%d\n"</literal></expr></argument>, <argument><expr><name>itime</name></expr></argument>, <argument><expr><name>pct</name></expr></argument>, <argument><expr><name>ict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ict</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pktnum</name> <init>= <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pktct</name> <init>= <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>pktnum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>index_pts</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>itime</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>preroll</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>last_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pktnum:%d, pktct:%d pts: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>pktnum</name></expr></argument>, <argument><expr><name>pktct</name></expr></argument>, <argument><expr><name>index_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>index_pts</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_read</name></name> <operator>=</operator> <name>ict</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>
<label><name>end</name>:</label>



<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>current_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>avio_seek_time</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>index_read</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_build_simple_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_read</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>index_read</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>index_entries</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"SEEKTO: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_to_key</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_seek_frame_binary</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>asf_reset_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_to_key</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_asf_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asf"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ASF (Advanced / Active Streaming Format)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>asf_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>asf_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>asf_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>asf_read_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>asf_read_seek</name></expr>,
<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>asf_read_pts</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOBINSEARCH</name> <operator>|</operator> <name>AVFMT_NOGENSEARCH</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asf_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
