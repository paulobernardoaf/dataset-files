<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\asfdec_o.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avlanguage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asfcrypt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_BOOL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_WORD</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_GUID</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_DWORD</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_QWORD</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_UNICODE</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_FLAG_BROADCAST</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_BYTE_ARRAY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_TYPE_AUDIO</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_TYPE_VIDEO</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_STREAM_NUM</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_MAX_STREAMS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMP_HEADER_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_NUM_OF_PAYLOADS</name></cpp:macro> <cpp:value>0x3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_ERROR_CORRECTION_LENGTH_TYPE</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PACKET_ERROR_CORRECTION_DATA_SIZE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GUIDParseTable</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_object</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>GUIDParseTable</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>is_subobject</name></decl>;</decl_stmt>
}</block></struct></type> <name>GUIDParseTable</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFPacket</name> <block>{
<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFPacket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFStream</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indexed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>span</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>virtual_pkt_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>virtual_chunk_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>lang_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFStreamData</name><block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>langs</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>asf_met</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>aspect_ratio</name></decl>;</decl_stmt>
}</block></struct></type> <name>ASFStreamData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>data_reached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_simple_index</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>preroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_packets</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>send_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prop_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>unknown_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>data_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_packet_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>unknown_offset</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name><name>asf_st</name><index>[<expr><name>ASF_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStreamData</name></type> <name><name>asf_sd</name><index>[<expr><name>ASF_MAX_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint64_t</name></type> <name>sub_header_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>sub_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dts_delta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packet_size_internal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pad_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rep_data_len</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>sub_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_sub</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>mult_sub_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_mult_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>return_subpayload</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>PARSE_PACKET_HEADER</name></decl>,
<decl><name>READ_SINGLE</name></decl>,
<decl><name>READ_MULTI</name></decl>,
<decl><name>READ_MULTI_SUB</name></decl>
}</block> <decl><name>state</name></decl>;</enum>
}</block></struct></type> <name>ASFContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>detect_unknown_subobject</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>find_guid</name><parameter_list>(<parameter><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">2</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_guid</name><parameter_list>(<parameter><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned char</argument>, <argument>guid[<literal type="number">0</literal>]</argument>, <argument>guid[<literal type="number">3</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned char</argument>, <argument>guid[<literal type="number">1</literal>]</argument>, <argument>guid[<literal type="number">2</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned char</argument>, <argument>guid[<literal type="number">4</literal>]</argument>, <argument>guid[<literal type="number">5</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>FFSWAP</name><argument_list>(<argument>unsigned char</argument>, <argument>guid[<literal type="number">6</literal>]</argument>, <argument>guid[<literal type="number">7</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>align_position</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>INT64_MAX</name> <operator>-</operator> <name>offset</name> <operator>&amp;&amp;</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>offset</name> <operator>+</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_unknown</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>is_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>unknown_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>is_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>is_subobject</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Header Extension"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>detect_unknown_subobject</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>unknown_offset</name></name></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>unknown_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too small size %"</literal><name>PRIu64</name><literal type="string">" (&lt; 24).\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_asf_string</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch</name></decl>;</decl_stmt>
<macro><name>GET_UTF16</name><argument_list>(<argument>ch</argument>, <argument>(ret += <literal type="number">2</literal>) &lt;= maxlen ? avio_rl16(pb) : <literal type="number">0</literal></argument>, <argument>break;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PUT_UTF8</name><argument_list>(<argument>ch</argument>, <argument>tmp</argument>, <argument>if (q - buf &lt; buflen - <literal type="number">1</literal>) *q++ = tmp;</argument>)</argument_list></macro>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_marker</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_markers</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>nb_markers</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_markers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>avpriv_new_chapter</name><argument_list>(<argument>s</argument>, <argument>i</argument>, <argument>(AVRational) { <literal type="number">1</literal></argument>, <argument><literal type="number">10000000</literal> }</argument>, <argument>pts</argument>,
<argument>AV_NOPTS_VALUE</argument>, <argument>name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_value</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>val_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>met</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>val_len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ASF_UNICODE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_asf_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>met</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>val_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>val_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>met</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_generic_value</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ASF_BOOL</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASF_DWORD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASF_QWORD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASF_WORD</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_set_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>met</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_read_generic_value</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>met</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_picture</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodecMime</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><name>ff_id3v2_mime_tags</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name> <init>= <expr><name>AV_CODEC_ID_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mimetype</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>picsize</name></decl>, <decl><type ref="prev"/><name>desc_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid attached picture size: %d.\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_id3v2_picture_types</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown attached picture type: %d.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>picsize</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>mime</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mime</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mime</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown attached picture mimetype: %s.\n"</literal></expr></argument>,
<argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picsize</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid attached picture data size: %d &gt;= %d.\n"</literal></expr></argument>,
<argument><expr><name>picsize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>desc_len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>picsize</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>avio_get_str16le</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>picsize</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>picsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>asf_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asf_st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name><name>ff_id3v2_picture_types</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_id3_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID3v2ExtraMeta</name> <modifier>*</modifier></type><name>id3v2_extra_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_id3v2_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id3v2_extra_meta</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_id3v2_parse_apic</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_id3v2_parse_chapters</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_id3v2_free_extra_meta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>val_len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>met</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val_len</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ASF_UNICODE</name></expr>:</case>
<expr_stmt><expr><call><name>asf_read_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>met</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASF_BYTE_ARRAY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"WM/Picture"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>asf_read_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ID3"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>get_id3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asf_read_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>met</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ASF_GUID</name></expr>:</case>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_set_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>met</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_ext_content</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nb_desc</name> <init>= <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>name_len</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>val_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ASF_BOOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ASF_DWORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>process_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>find_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>st_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name> <operator>==</operator> <name>st_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_store_aspect_ratio</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>st_num</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_read_generic_value</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>st_num</name> <operator>&lt;</operator> <name>ASF_MAX_STREAMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>st_num</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>st_num</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_metadata_obj</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nb_recs</name> <init>= <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_recs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>name_len</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>val_len</name></decl>, <decl><type ref="prev"/><name>st_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>st_num</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_store_aspect_ratio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st_num</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>st_num</name> <operator>&lt;</operator> <name>ASF_MAX_STREAMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>process_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>st_num</name></expr>]</index></name><operator>.</operator><name>asf_met</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_content_desc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>titles</name><index>[]</index></name> <init>=
<expr><block>{ <expr><literal type="string">"Title"</literal></expr>, <expr><literal type="string">"Author"</literal></expr>, <expr><literal type="string">"Copyright"</literal></expr>, <expr><literal type="string">"Description"</literal></expr>, <expr><literal type="string">"Rate"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>len</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buflen</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buflen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>buflen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>asf_read_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>titles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>buflen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>creation_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>creation_time</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>ASF_FLAG_BROADCAST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>creation_time</name> <operator>/=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>creation_time</name> <operator>-=</operator> <literal type="number">11644473600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>creation_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"creation_time"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">10000</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>duration</name></name> <operator>-=</operator> <name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_video_info</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size_asf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size_bmp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>size_asf</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_get_bmp_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_bmp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size_asf</name></expr></argument>, <argument><expr><name>size_bmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_bmp</name> <operator>&gt;</operator> <name>BMP_HEADER_SIZE</name> <operator>&amp;&amp;</operator>
<name>size_bmp</name> <operator>&lt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>size_bmp</name> <operator>-</operator> <name>BMP_HEADER_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_stream_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>err_data_len</name></decl>, <decl><type ref="prev"/><name>ts_data_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;=</operator> <name>ASF_MAX_STREAMS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_jfif_media</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ts_data_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_data_len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>ASF_STREAM_NUM</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Duplicate stream found, this stream will be ignored.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>asf_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>asf_st</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>indexed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>ASF_STREAM_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>ts_data_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_video_info</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ts_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err_data_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>span</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>span</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>span</name></name> <operator>=</operator> <name>span</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>virtual_pkt_len</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_st</name><operator>-&gt;</operator><name>virtual_chunk_len</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>virtual_chunk_len</name></name> <operator>||</operator> <operator>!</operator><name><name>asf_st</name><operator>-&gt;</operator><name>virtual_pkt_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>err_data_len</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>err_data_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>err_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_language</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rfc1766</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>met</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rfc1766</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rfc1766</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>primary_tag</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>rfc1766</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>rfc1766</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iso6392</name> <init>= <expr><call><name>ff_convert_lang_to</name><argument_list>(<argument><expr><name>primary_tag</name></expr></argument>,
<argument><expr><name>AV_LANG_ISO639_2_BIBL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>iso6392</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>met</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>iso6392</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"av_dict_set failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_ext_stream_properties</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nb_st_name</name></decl>, <decl><type ref="prev"/><name>nb_pay_exts</name></decl>, <decl><type ref="prev"/><name>st_num</name></decl>, <decl><type ref="prev"/><name>lang_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_time</name></decl>, <decl><type ref="prev"/><name>end_time</name></decl>, <decl><type ref="prev"/><name>time_per_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start_time</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_time</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>st_num</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st_num</name> <operator>&amp;=</operator> <name>ASF_STREAM_NUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lang_idx</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>st_num</name> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lang_idx</name> <operator>=</operator> <name>lang_idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>time_per_frame</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>end_time</name> <operator>-</operator> <name>start_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>bitrate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name>time_per_frame</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_st_name</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_pay_exts</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_st_name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_pay_exts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>find_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Stream Properties"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>g</name><operator>-&gt;</operator><name>read_object</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_language_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nb_langs</name> <init>= <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_langs</name> <operator>&lt;</operator> <name>ASF_MAX_STREAMS</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_langs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_asf_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>langs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>langs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>ASF_FLAG_BROADCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Number of Packets from File Properties Object is not equal to Total"</literal>
<literal type="string">"Datapackets value! num of packets %"</literal><name>PRIu64</name><literal type="string">" total num %"</literal><name>PRIu64</name><literal type="string">".\n"</literal></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>ASF_FLAG_BROADCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_simple_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interval</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pkt_num</name></decl>, <decl><type ref="prev"/><name>nb_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>prev_pkt_num</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>indexed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>indexed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>interval</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_entries</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pkt_num</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Skipping failed in asf_read_simple_index.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_pkt_num</name> <operator>!=</operator> <name>pkt_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator>
<name>pkt_num</name></expr></argument>, <argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>interval</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_pkt_num</name> <operator>=</operator> <name>pkt_num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>is_simple_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUIDParseTable</name></type> <name><name>gdef</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Data"</literal></expr>, <expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x6C</literal></expr> }</block></expr>, <expr><name>asf_read_data</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Simple Index"</literal></expr>, <expr><block>{ <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xCB</literal></expr> }</block></expr>, <expr><name>asf_read_simple_index</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Content Description"</literal></expr>, <expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x66</literal></expr> ,<expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x6C</literal></expr> }</block></expr>, <expr><name>asf_read_content_desc</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Extended Content Description"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x50</literal></expr> }</block></expr>, <expr><name>asf_read_ext_content</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Stream Bitrate Properties"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"File Properties"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>, <expr><name>asf_read_properties</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Header Extension"</literal></expr>, <expr><block>{ <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Stream Properties"</literal></expr>, <expr><block>{ <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>, <expr><name>asf_read_stream_properties</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Codec List"</literal></expr>, <expr><block>{ <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xF6</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Marker"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>, <expr><name>asf_read_marker</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Script Command"</literal></expr>, <expr><block>{ <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xF6</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Language List"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr>, <expr><name>asf_read_language_list</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"Padding"</literal></expr>, <expr><block>{ <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE8</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DRMv1 Header"</literal></expr>, <expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6E</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"DRMv2 Header"</literal></expr>, <expr><block>{ <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x9c</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Index"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Media Object Index"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Timecode Index"</literal></expr>, <expr><block>{ <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x0C</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bitrate_Mutual_Exclusion"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Error Correction"</literal></expr>, <expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x6C</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Content Branding"</literal></expr>, <expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6E</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Content Encryption"</literal></expr>, <expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6E</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Extended Content Encryption"</literal></expr>, <expr><block>{ <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x9C</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Digital Signature"</literal></expr>, <expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6E</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Extended Stream Properties"</literal></expr>, <expr><block>{ <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x5A</literal></expr> }</block></expr>, <expr><name>asf_read_ext_stream_properties</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Advanced Mutual Exclusion"</literal></expr>, <expr><block>{ <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Group Mutual Exclusion"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x49</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"Stream Prioritization"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x24</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bandwidth Sharing Object"</literal></expr>, <expr><block>{ <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE9</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Metadata"</literal></expr>, <expr><block>{ <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xCA</literal></expr> }</block></expr>, <expr><name>asf_read_metadata_obj</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Metadata Library"</literal></expr>, <expr><block>{ <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr>, <expr><name>asf_read_metadata_obj</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Audio Spread"</literal></expr>, <expr><block>{ <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Index Parameters"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Content Encryption System Windows Media DRM Network Devices"</literal></expr>,
<expr><block>{ <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0XA4</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Mutex Language"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Mutex Bitrate"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Mutex Unknown"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bandwidth Sharing Exclusive"</literal></expr>, <expr><block>{ <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE9</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Bandwidth Sharing Partial"</literal></expr>, <expr><block>{ <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE9</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Timecode"</literal></expr>, <expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x1E</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System File Name"</literal></expr>, <expr><block>{ <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x9B</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Content Type"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Pixel Aspect Ratio"</literal></expr>, <expr><block>{ <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB8</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Sample Duration"</literal></expr>, <expr><block>{ <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Encryption Sample ID"</literal></expr>, <expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x4D</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"Payload Extension System Degradable JPEG"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xFB</literal></expr> }</block></expr>, <expr><name>asf_read_unknown</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LEN</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((flag) == name ##IS_BYTE) len = avio_r8(pb); else if ((flag) == name ##IS_WORD) len = avio_rl16(pb); else if ((flag) == name ##IS_DWORD) len = avio_rl32(pb); else len = 0; } while(0)</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_subpayload</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sub_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>mult_sub_len</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_header_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sub_len</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>sub_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sub_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_sub</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>sub_dts</name></name> <operator>+</operator> <operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>nb_sub</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>asf</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>sub_header_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>mult_sub_len</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Position %"</literal><name>PRId64</name><literal type="string">" wrong, should be %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_packet</name><parameter_list>(<parameter><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_replicated_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_multiple_payload</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pay_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>READ_MULTI_SUB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_subpayload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_replicated_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>asf_pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pay_len</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>pay_len</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error: invalid data packet size, pay_len %"</literal><name>PRIu16</name><literal type="string">", "</literal>
<literal type="string">"asf-&gt;packet_size %"</literal><name>PRIu32</name><literal type="string">", offset %"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>,
<argument><expr><name>pay_len</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pay_len</name> <operator>&gt;</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error: invalid buffer size, pay_len %d, data size left %d.\n"</literal></expr></argument>,
<argument><expr><name>pay_len</name></expr></argument>, <argument><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>pay_len</name> <operator>-</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pay_len</name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pay_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_asfcrypt_dec</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>-=</operator> <name>pay_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_single_payload</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error: invalid data packet size, offset %"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>,
<argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>||</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>keylen</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_asfcrypt_dec</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_payload</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>off_len</name></decl>, <decl><type ref="prev"/><name>media_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stream_num</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_num</name> <operator>&amp;</operator> <name>ASF_STREAM_NUM</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asf_pkt</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asf_pkt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet size 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Skipping the stream with the invalid stream index %d.\n"</literal></expr></argument>,
<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_num</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>prop_flags</name></name> <operator>&amp;</operator> <name>ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_</name></expr></argument>, <argument><expr><name>media_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>prop_flags</name></name> <operator>&amp;</operator> <name>ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>prop_flags</name></name> <operator>&amp;</operator> <name>ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name>media_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unfinished frame will be ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_packet</name><argument_list>(<argument><expr><name>asf_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name>media_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_dts</name></name> <operator>=</operator> <name>off_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_multiple_payload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>asf_pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>READ_SINGLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_subpayload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_single_payload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>asf_pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asf_pkt</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pkt</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asf_pkt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_subpayload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_packet_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <name>av_unused</name></type> <name>seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>error_flags</name></decl>, <decl><type ref="prev"/><name>len_flags</name></decl>, <decl><type ref="prev"/><name>pay_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error_flags</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>error_flags</name> <operator>&amp;</operator> <name>ASF_PACKET_FLAG_ERROR_CORRECTION_PRESENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>error_flags</name> <operator>&amp;</operator> <name>ASF_ERROR_CORRECTION_LENGTH_TYPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>error_flags</name> <operator>&amp;</operator> <name>ASF_PACKET_ERROR_CORRECTION_DATA_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len_flags</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len_flags</name> <operator>=</operator> <name>error_flags</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>prop_flags</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name>len_flags</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PPI_FLAG_PACKET_LENGTH_FIELD_</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name>len_flags</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_SEQUENCE_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PPI_FLAG_SEQUENCE_FIELD_</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>READ_LEN</name><argument_list>(<argument><expr><name>len_flags</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE</name></expr></argument>,
<argument><expr><name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>send_time</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>len_flags</name> <operator>&amp;</operator> <name>ASF_PPI_FLAG_MULTIPLE_PAYLOADS_PRESENT</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>pay_flags</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name> <operator>=</operator> <operator>(</operator><name>pay_flags</name> <operator>&amp;</operator> <name>ASF_NUM_OF_PAYLOADS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_deinterleave</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>asf_st</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>st_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pkt_len</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>st_num</name></expr>]</index></name><operator>-&gt;</operator><name>virtual_pkt_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>chunk_len</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>st_num</name></expr>]</index></name><operator>-&gt;</operator><name>virtual_chunk_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchunks</name> <init>= <expr><name>pkt_len</name> <operator>/</operator> <name>chunk_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&gt;=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>span</name></name> <operator>*</operator> <name>pkt_len</name> <operator>+</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>pkt_len</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>span</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>+</operator> <name>chunk_len</name><operator>)</operator> <operator>&gt;=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>pos</name></expr></argument>,
<argument><expr><name>p</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>nchunks</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>*</operator> <name>chunk_len</name></expr></argument>,
<argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>chunk_len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>asf_st</name><operator>-&gt;</operator><name>span</name></name> <operator>*</operator> <name>pkt_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_size</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>ASF_FLAG_BROADCAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>PARSE_PACKET_HEADER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asf_read_packet_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>READ_SINGLE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>READ_MULTI</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>asf_read_payload</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>READ_SINGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>READ_MULTI_SUB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&gt;</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>READ_MULTI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>READ_MULTI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&gt;</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>asf_pkt</name> <init>= <expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pkt</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>asf_pkt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>&amp;&amp;</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>span</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_deinterleave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>asf_pkt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>asf_pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>asf_pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf_pkt</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ASF_MAX_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>asf_met</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pkt</name><operator>.</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_packet_state</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PARSE_PACKET_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>return_subpayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_header_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>pad_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>rep_data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>mult_sub_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_mult_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_sub</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>prop_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>sub_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ASFPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pkt</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>asf_read_timestamp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_pos</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>, <decl><type ref="prev"/><name>pkt_offset</name></decl>, <decl><type ref="prev"/><name>dts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>, <decl><type ref="prev"/><name>data_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data_end</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>pkt_pos</name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>
<name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>data_end</name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name><operator>)</operator> <operator>/</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_pos</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pkt_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_offset</name> <operator>=</operator> <name>pkt_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_packet_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>data_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>st_found</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkt_offset</name> <operator>&gt;=</operator> <operator>(</operator><name>pkt_pos</name> <operator>+</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pkt_pos</name> <operator>+=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dts</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pkt_pos</name></expr></argument>,
<argument><expr><name>dts</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>st_found</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>pkt_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>nb_index_entries</name> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>is_simple_index</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>nb_index_entries</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>index_entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_seek_frame_binary</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>reset_packet_state</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>find_guid</name><parameter_list>(<parameter><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>swap_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>gdef</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>gdef</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>guid</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>g</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>detect_unknown_subobject</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>offset</name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>find_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>g</name><operator>-&gt;</operator><name>read_object</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>GUIDParseTable</name></type> <name>g2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g2</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g2</name><operator>.</operator><name>is_subobject</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asf_read_unknown</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUIDParseTable</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>preroll</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>is_simple_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>find_guid</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>unknown_offset</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>is_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>g</name><operator>-&gt;</operator><name>read_object</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>align_position</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>ASF_FLAG_BROADCAST</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>data_reached</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Data Object was not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>first_packet_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rfc1766</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lang_idx</name></expr>]</index></name><operator>.</operator><name>langs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_st</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_language</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rfc1766</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ASF_MAX_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>find_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>asf_met</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>asf_sd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>asf_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_asf_o_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asf_o"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ASF (Advanced / Active Streaming Format)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>asf_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>asf_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>asf_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>asf_read_close</name></expr>,
<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>asf_read_timestamp</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>asf_read_seek</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOBINSEARCH</name> <operator>|</operator> <name>AVFMT_NOGENSEARCH</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
