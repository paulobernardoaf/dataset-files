<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\h263dec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h263_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>code</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>valid_psc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>invalid_psc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res_change</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_fmt</name></decl>, <decl><type ref="prev"/><name>last_src_fmt</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_gn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tr</name></decl>, <decl><type ref="prev"/><name>last_tr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>code</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xfffffc000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tr</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src_fmt</name><operator>=</operator> <operator>(</operator><name>code</name><operator>&gt;&gt;</operator><literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>src_fmt</name> <operator>!=</operator> <name>last_src_fmt</name>
<operator>&amp;&amp;</operator> <name>last_src_fmt</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last_src_fmt</name><operator>&lt;</operator><literal type="number">6</literal>
<operator>&amp;&amp;</operator> <name>src_fmt</name><operator>&lt;</operator><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res_change</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tr</name> <operator>==</operator> <name>last_tr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>invalid_psc</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_fmt</name> <operator>!=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>code</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>invalid_psc</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>code</name><operator>&amp;</operator><literal type="number">0x30000</literal><operator>)</operator><operator>==</operator><literal type="number">0x20000</literal> <operator>&amp;&amp;</operator> <name>src_fmt</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>valid_psc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>last_gn</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>invalid_psc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>last_src_fmt</name><operator>=</operator> <name>src_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_tr</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffff80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>gn</name><init>= <expr><operator>(</operator><name>code</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">31</literal><operator>-</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>gn</name><operator>&lt;</operator><name>last_gn</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>invalid_psc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>last_gn</name><operator>=</operator> <name>gn</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>valid_psc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>invalid_psc</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>res_change</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>valid_psc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>invalid_psc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>FF_DEF_RAWVIDEO_DEMUXER</name><argument_list>(<argument>h263</argument>, <argument><literal type="string">"raw H.263"</literal></argument>, <argument>h263_probe</argument>, <argument>NULL</argument>, <argument>AV_CODEC_ID_H263</argument>)</argument_list></macro>
</unit>
