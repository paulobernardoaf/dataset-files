<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\psxstr.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIFF_TAG</name></cpp:macro> <cpp:value>MKTAG('R', 'I', 'F', 'F')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDXA_TAG</name></cpp:macro> <cpp:value>MKTAG('C', 'D', 'X', 'A')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_CD_SECTOR_SIZE</name></cpp:macro> <cpp:value>2352</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAW_CD_SECTOR_DATA_SIZE</name></cpp:macro> <cpp:value>2304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_DATA_CHUNK_SIZE</name></cpp:macro> <cpp:value>0x7E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_DATA_HEADER_SIZE</name></cpp:macro> <cpp:value>0x38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIFF_HEADER_SIZE</name></cpp:macro> <cpp:value>0x2C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDXA_TYPE_MASK</name></cpp:macro> <cpp:value>0x0E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDXA_TYPE_DATA</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDXA_TYPE_AUDIO</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDXA_TYPE_VIDEO</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_MAGIC</name></cpp:macro> <cpp:value>(0x80010160)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>StrChannel</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>video_stream_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>tmp_pkt</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>audio_stream_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>StrChannel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>StrDemuxContext</name> <block>{


<decl_stmt><decl><type><name>StrChannel</name></type> <name><name>channels</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>StrDemuxContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sync_header</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sector</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name><init>= <expr><name>sector</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aud</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vid</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <name>RAW_CD_SECTOR_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RIFF_TAG</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CDXA_TAG</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>sector</name> <operator>+=</operator> <name>RIFF_HEADER_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>sector</name> <operator>&gt;=</operator> <name>RAW_CD_SECTOR_SIZE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>sector</name></expr></argument>,<argument><expr><name>sync_header</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sector</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>sector</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>&amp;</operator> <name>CDXA_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CDXA_TYPE_DATA</name></expr>:</case>
<case>case <expr><name>CDXA_TYPE_VIDEO</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>current_sector</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sector_count</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator> <name>frame_size</name><operator>&gt;=</operator><literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>current_sector</name> <operator>&lt;</operator> <name>sector_count</name>
<operator>&amp;&amp;</operator> <name>sector_count</name><operator>*</operator><name>VIDEO_DATA_CHUNK_SIZE</name> <operator>&gt;=</operator><name>frame_size</name><operator>)</operator></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vid</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>
<break>break;</break>
<case>case <expr><name>CDXA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>sector</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x2A</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>aud</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>(<expr><name><name>sector</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>&amp;</operator> <name>CDXA_TYPE_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>sector</name> <operator>+=</operator> <name>RAW_CD_SECTOR_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>vid</name><operator>+</operator><name>aud</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>vid</name><operator>+</operator><name>aud</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StrDemuxContext</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sector</name><index>[<expr><name>RAW_CD_SECTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>RIFF_HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RIFF_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RIFF_TAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>RIFF_HEADER_SIZE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>video_stream_index</name><operator>=</operator>
<name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>audio_stream_index</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>ret_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StrDemuxContext</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sector</name><index>[<expr><name>RAW_CD_SECTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sector</name></expr></argument>, <argument><expr><name>RAW_CD_SECTOR_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RAW_CD_SECTOR_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>sector</name><index>[<expr><literal type="number">0x11</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>sector</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name> <operator>&amp;</operator> <name>CDXA_TYPE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CDXA_TYPE_DATA</name></expr>:</case>
<case>case <expr><name>CDXA_TYPE_VIDEO</name></expr>:</case>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>current_sector</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x1C</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sector_count</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x1E</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator> <name>frame_size</name><operator>&gt;=</operator><literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>current_sector</name> <operator>&lt;</operator> <name>sector_count</name>
<operator>&amp;&amp;</operator> <name>sector_count</name><operator>*</operator><name>VIDEO_DATA_CHUNK_SIZE</name> <operator>&gt;=</operator><name>frame_size</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameters %d %d %d\n"</literal></expr></argument>, <argument><expr><name>current_sector</name></expr></argument>, <argument><expr><name>sector_count</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>video_stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>video_stream_index</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MDEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sector</name><index>[<expr><literal type="number">0x2A</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>pkt</name> <operator>=</operator> <operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>tmp_pkt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>sector_count</name><operator>*</operator><name>VIDEO_DATA_CHUNK_SIZE</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mismatching sector_count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>sector_count</name> <operator>*</operator> <name>VIDEO_DATA_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sector_count</name><operator>*</operator><name>VIDEO_DATA_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name><operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RAW_CD_SECTOR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator>
<name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>video_stream_index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>current_sector</name><operator>*</operator><name>VIDEO_DATA_CHUNK_SIZE</name></expr></argument>,
<argument><expr><name>sector</name> <operator>+</operator> <name>VIDEO_DATA_HEADER_SIZE</name></expr></argument>,
<argument><expr><name>VIDEO_DATA_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_sector</name> <operator>==</operator> <name>sector_count</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name><operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_pkt</name> <operator>=</operator> <operator>*</operator><name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block>
<break>break;</break>

<case>case <expr><name>CDXA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>audio_stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><name><name>sector</name><index>[<expr><literal type="number">0x13</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>audio_stream_index</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_XA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fmt</name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">18900</literal></expr></then><else>:<expr><literal type="number">37800</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">18</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>ret_pkt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">2304</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,<argument><expr><name>sector</name><operator>+</operator><literal type="number">24</literal></expr></argument>,<argument><expr><literal type="number">2304</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator>
<name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>channel</name></expr>]</index></name><operator>.</operator><name>audio_stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown sector type %02X\n"</literal></expr></argument>, <argument><expr><name><name>sector</name><index>[<expr><literal type="number">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StrDemuxContext</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmp_pkt</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tmp_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_str_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"psxstr"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Sony Playstation STR"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StrDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>str_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>str_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>str_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>str_read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NO_BYTE_SEEK</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
