<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\dashdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dash.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_BUFFER_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<struct>struct <name>fragment</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>url_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>timeline</name> <block>{












<decl_stmt><decl><type><name>int64_t</name></type> <name>starttime</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int64_t</name></type> <name>repeat</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>representation</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url_template</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rep_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rep_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>assoc_stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_fragments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>fragments</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_timelines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeline</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>timelines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>first_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>fragment_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>fragment_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>presentation_timeoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_seq_no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_seg_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_seg_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>cur_seg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>init_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>init_sec_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_sec_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_sec_data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>init_sec_buf_read_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_restart_needed</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>DASHContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_videos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>videos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_audios</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>audios</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_subtitles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>subtitles</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>media_presentation_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>suggested_presentation_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>availability_start_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>availability_end_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>publish_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>minimum_update_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>time_shift_buffer_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>min_buffer_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>period_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>period_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_live</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOInterruptCB</name> <modifier>*</modifier></type><name>interrupt_callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>allowed_extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>avio_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_url_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_init_section_common_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_init_section_common_audio</name></decl>;</decl_stmt>

}</block></struct></type> <name>DASHContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ishttp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto_name</name> <init>= <expr><call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aligned</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>val</name> <operator>+</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_current_time_in_sec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_utc_date_time_insec</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datetime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>second</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>datetime</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>, <argument><expr><literal type="string">"%d-%d-%dT%d:%d:%fZ"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>year</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>day</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hour</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"get_utc_date_time_insec get a wrong time format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name>minute</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeinfo</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>second</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_duration_insec</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>days</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hours</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>secs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>duration</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%f%c%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"get_duration_insec get a wrong time format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>days</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>hours</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><name>mins</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><operator>(</operator><name>days</name> <operator>*</operator> <literal type="number">24</literal> <operator>+</operator> <name>hours</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>mins</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>secs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_segment_start_time_based_on_timeline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>cur_seq_no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>cur_seq_no</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_time</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>*</operator> <name>cur_seq_no</name></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>cur_seq_no</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start_time</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
<return>return <expr><name>start_time</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calc_next_seg_no_from_timelines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>cur_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_time</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>&gt;</operator> <name>cur_time</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_time</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>&gt;</operator> <name>cur_time</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start_time</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<label><name>finish</name>:</label>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>seg</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>seg</name><operator>)</operator><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_fragment_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>free_fragment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_timelines_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>timelines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_representation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_fragment_list</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_timelines_list</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_fragment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>cur_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_fragment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_video_list</name><parameter_list>(<parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_representation</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_audio_list</name><parameter_list>(<parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_representation</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_subtitle_list</name><parameter_list>(<parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_representation</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_url</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_http</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>opts2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"crypto"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>url</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>url</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_name</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>allowed_extensions</name></name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_ext</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>allowed_extensions</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Filename extension of \'%s\' is not a common multimedia extension, blocked for security reasons.\n"</literal>
<literal type="string">"If you wish to override this adjust allowed_extensions, you can set it to \'ALL\' to allow all\n"</literal></expr></argument>,
<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"crypto"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><name>url</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>url</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"file,"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_cookies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_CUSTOM_IO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cookies"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>new_cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_cookies</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"cookies"</literal></expr></argument>, <argument><expr><name>new_cookies</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_http</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>is_http</name> <operator>=</operator> <call><name>av_strstart</name><argument_list>(<argument><expr><name>proto_name</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_content_url</name><parameter_list>(<parameter><decl><type><name>xmlNodePtr</name> <modifier>*</modifier></type><name>baseurl_nodes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n_baseurl_nodes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_url_size</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_id_val</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_bandwidth_val</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_str</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_str_2</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_str</name> <operator>||</operator> <operator>!</operator><name>tmp_str_2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_baseurl_nodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>children</name> <operator>&amp;&amp;</operator>
<name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>XML_TEXT_NODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp_str_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str_2</name></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>, <argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>tmp_str_2</name></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>, <argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rep_id_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>av_strireplace</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="string">"$RepresentationID$"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>rep_id_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rep_bandwidth_val</name> <operator>&amp;&amp;</operator> <name><name>tmp_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>av_strireplace</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="string">"$Bandwidth$"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>rep_bandwidth_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_str_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>url</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_val_from_nodes_tab</name><parameter_list>(<parameter><decl><type><name>xmlNodePtr</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_nodes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attrname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_nodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>attrname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xmlNodePtr</name></type> <name>find_child_node_by_name</name><parameter_list>(<parameter><decl><type><name>xmlNodePtr</name></type> <name>rootnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>node</name> <init>= <expr><name>rootnode</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVMediaType</name></name></type> <name>get_content_type</name><parameter_list>(<parameter><decl><type><name>xmlNodePtr</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">"mimeType"</literal></expr> </then><else>: <expr><literal type="string">"contentType"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type> <name>get_Fragment</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type> <name>seg</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_end_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_offset</name> <init>= <expr><call><name>av_strtok</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_end_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>str_offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>str_end_offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>seg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_manifest_segmenturlnode</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>fragmenturl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name> <modifier>*</modifier></type><name>baseurl_nodes</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_id_val</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_bandwidth_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>initialization_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>media_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>range_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_url_size</name> <init>= <expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></then><else>: <expr><name>MAX_URL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>fragmenturl_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Initialization"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>initialization_val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>fragmenturl_node</name></expr></argument>, <argument><expr><literal type="string">"sourceURL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range_val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>fragmenturl_node</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>initialization_val</name> <operator>||</operator> <name>range_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name> <operator>=</operator> <call><name>get_Fragment</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>get_content_url</name><argument_list>(<argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>max_url_size</name></expr></argument>,
<argument><expr><name>rep_id_val</name></expr></argument>,
<argument><expr><name>rep_bandwidth_val</name></expr></argument>,
<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>fragmenturl_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SegmentURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>media_val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>fragmenturl_node</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range_val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>fragmenturl_node</name></expr></argument>, <argument><expr><literal type="string">"mediaRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>media_val</name> <operator>||</operator> <name>range_val</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>get_Fragment</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>get_content_url</name><argument_list>(<argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name>max_url_size</name></expr></argument>,
<argument><expr><name>rep_id_val</name></expr></argument>,
<argument><expr><name>rep_bandwidth_val</name></expr></argument>,
<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>n_fragments</name></name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>range_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_manifest_segmenttimeline</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>fragment_timeline_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xmlAttrPtr</name></type> <name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>fragment_timeline_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeline</name></name> <modifier>*</modifier></type><name>tml</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeline</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tml</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>fragment_timeline_node</name><operator>-&gt;</operator><name>properties</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>fragment_timeline_node</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"parse_manifest_segmenttimeline attr-&gt;name = %s val is NULL\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tml</name><operator>-&gt;</operator><name>starttime</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>strtoll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tml</name><operator>-&gt;</operator><name>repeat</name></name> <operator>=</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tml</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>strtoll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>timelines</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>n_timelines</name></name></expr></argument>, <argument><expr><name>tml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resolve_content_path</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_url_size</name></decl></parameter>, <parameter><decl><type><name>xmlNodePtr</name> <modifier>*</modifier></type><name>baseurl_nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_baseurl_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mpdName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>baseurl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>root_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isRootHttp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>token</name> <init>=<expr><literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rootId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>updated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_max_url_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n_baseurl_nodes</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp_max_url_size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ishttp</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp_max_url_size</name> <operator>=</operator> <call><name>aligned</name><argument_list>(<argument><expr><name>tmp_max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>tmp_max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>updated</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>mpdName</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mpdName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>tmp_max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_str</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>tmp_max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_str</name> <operator>||</operator> <operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>updated</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rootId</name> <operator>=</operator> <name>n_baseurl_nodes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rootId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rootId</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>node</name> <operator>=</operator> <name><name>baseurl_nodes</name><index>[<expr><name>rootId</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ishttp</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>baseurl_nodes</name><index>[<expr><name>rootId</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>baseurl</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root_url</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>baseurl</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>baseurl</name></expr> </then><else>: <expr><name>path</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlNodeSetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>updated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>isRootHttp</name> <operator>=</operator> <call><name>ishttp</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root_url</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>token</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_baseurl_nodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>rootId</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_strstart</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ishttp</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>isRootHttp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>token</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&amp;&amp;</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tmp_str</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><literal type="string">"https://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>tmp_max_url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlNodeSetContent</name><argument_list>(<argument><expr><name><name>baseurl_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>updated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tmp_max_url_size</name> <operator>&gt;</operator> <operator>*</operator><name>max_url_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>max_url_size</name> <operator>=</operator> <name>tmp_max_url_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>baseurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>updated</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_manifest_representation</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>mpd_baseurl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_baseurl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_segmenttemplate_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_segmentlist_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>fragment_template_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>content_component_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_baseurl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_segmentlist_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_supplementalproperty_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>subtitle_rep_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>audio_rep_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>video_rep_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>representation_segmenttemplate_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>representation_baseurl_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>representation_segmentlist_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name><name>segmentlists_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>fragment_timeline_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name><name>fragment_templates_tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>duration_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>presentation_timeoffset_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startnumber_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>timescale_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>initialization_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>media_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name><name>baseurl_nodes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>representation_node</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_id_val</name> <init>= <expr><call><name>xmlGetProp</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_bandwidth_val</name> <init>= <expr><call><name>xmlGetProp</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"bandwidth"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep_framerate_val</name> <init>= <expr><call><name>xmlGetProp</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"frameRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><name>AVMEDIA_TYPE_UNKNOWN</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_content_type</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_content_type</name><argument_list>(<argument><expr><name>content_component_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get_content_type</name><argument_list>(<argument><expr><name>adaptionset_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Parsing '%s' - skipp not supported representation type\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rep</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>representation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>representation_segmenttemplate_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTemplate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>representation_baseurl_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"BaseURL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>representation_segmentlist_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>representation_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>baseurl_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mpd_baseurl_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baseurl_nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>period_baseurl_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baseurl_nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>adaptionset_baseurl_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baseurl_nodes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>representation_baseurl_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>resolve_content_path</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name> <operator>=</operator> <call><name>aligned</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>rep_id_val</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep_id_val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>rep_bandwidth_val</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep_bandwidth_val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>representation_segmenttemplate_node</name> <operator>||</operator> <name>fragment_template_node</name> <operator>||</operator> <name>period_segmenttemplate_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fragment_templates_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>representation_segmenttemplate_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fragment_templates_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>adaptionset_segmentlist_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fragment_templates_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>fragment_template_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fragment_templates_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>period_segmenttemplate_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fragment_templates_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>period_segmentlist_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>presentation_timeoffset_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"presentationTimeOffset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>duration_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startnumber_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"startNumber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timescale_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"timescale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialization_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>fragment_templates_tab</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initialization_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name> <operator>=</operator> <call><name>aligned</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>get_content_url</name><argument_list>(<argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name>rep_id_val</name></expr></argument>, <argument><expr><name>rep_bandwidth_val</name></expr></argument>, <argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>initialization_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>media_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name> <operator>=</operator> <call><name>aligned</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>url_template</name></name> <operator>=</operator> <call><name>get_content_url</name><argument_list>(<argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name>rep_id_val</name></expr></argument>, <argument><expr><name>rep_bandwidth_val</name></expr></argument>, <argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>media_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>presentation_timeoffset_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>presentation_timeoffset</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>presentation_timeoffset_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;presentation_timeoffset = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>presentation_timeoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>presentation_timeoffset_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>duration_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>duration_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;fragment_duration = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>duration_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timescale_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>timescale_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;fragment_timescale = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>timescale_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>startnumber_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>start_number</name></name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>startnumber_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;first_seq_no = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>startnumber_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>adaptionset_supplementalproperty_node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><call><name>xmlGetProp</name><argument_list>(<argument><expr><name>adaptionset_supplementalproperty_node</name></expr></argument>,<argument><expr><literal type="string">"schemeIdUri"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http://dashif.org/guidelines/last-segment-number"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>adaptionset_supplementalproperty_node</name></expr></argument>,<argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing value attribute in adaptionset_supplementalproperty_node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>=</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>representation_segmenttemplate_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>fragment_template_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>adaptionset_segmentlist_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>period_segmentlist_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fragment_timeline_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>fragment_timeline_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_manifest_segmenttimeline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>representation_baseurl_node</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>representation_segmentlist_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>get_content_url</name><argument_list>(<argument><expr><name>baseurl_nodes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name>rep_id_val</name></expr></argument>, <argument><expr><name>rep_bandwidth_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>n_fragments</name></name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>representation_segmentlist_node</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>fragmenturl_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>segmentlists_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>representation_segmentlist_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segmentlists_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>adaptionset_segmentlist_node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segmentlists_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>period_segmentlist_node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>duration_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>segmentlists_tab</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timescale_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>segmentlists_tab</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"timescale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startnumber_val</name> <operator>=</operator> <call><name>get_val_from_nodes_tab</name><argument_list>(<argument><expr><name>segmentlists_tab</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"startNumber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>duration_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>duration_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;fragment_duration = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>duration_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>timescale_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>timescale_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;fragment_timescale = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>timescale_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>startnumber_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>start_number</name></name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>startnumber_val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"rep-&gt;first_seq_no = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>startnumber_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fragmenturl_node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>representation_segmentlist_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>fragmenturl_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_manifest_segmenturlnode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>fragmenturl_node</name></expr></argument>,
<argument><expr><name>baseurl_nodes</name></expr></argument>,
<argument><expr><name>rep_id_val</name></expr></argument>,
<argument><expr><name>rep_bandwidth_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragmenturl_node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>fragmenturl_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>representation_segmenttemplate_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>fragment_template_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>adaptionset_segmentlist_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment_timeline_node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>period_segmentlist_node</name></expr></argument>, <argument><expr><literal type="string">"SegmentTimeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fragment_timeline_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>fragment_timeline_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_manifest_segmenttimeline</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fragment_timeline_node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>fragment_timeline_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>free_representation</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown format of Representation node id[%s] \n"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>rep_id_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rep</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <ternary><condition><expr><name>rep_bandwidth_val</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>rep_bandwidth_val</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rep_id_val</name></expr> ?</condition><then> <expr><name>rep_id_val</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>rep_framerate_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>, <argument><expr><name>rep_framerate_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Ignoring invalid frame rate '%s'\n"</literal></expr></argument>, <argument><expr><name>rep_framerate_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>rep_idx</name></name> <operator>=</operator> <name>video_rep_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>rep_idx</name></name> <operator>=</operator> <name>audio_rep_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>rep_idx</name></name> <operator>=</operator> <name>subtitle_rep_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported the stream type %d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>video_rep_idx</name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_rep_idx</name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subtitle_rep_idx</name> <operator>+=</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>rep_id_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>rep_id_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rep_bandwidth_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>rep_bandwidth_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rep_framerate_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>rep_framerate_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_manifest_adaptationset</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>mpd_baseurl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_baseurl_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_segmenttemplate_node</name></decl></parameter>,
<parameter><decl><type><name>xmlNodePtr</name></type> <name>period_segmentlist_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>fragment_template_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>content_component_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_baseurl_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_segmentlist_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_supplementalproperty_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>adaptionset_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SegmentTemplate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fragment_template_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"ContentComponent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>content_component_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"BaseURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>adaptionset_baseurl_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SegmentList"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>adaptionset_segmentlist_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SupplementalProperty"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>adaptionset_supplementalproperty_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Representation"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_manifest_representation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>node</name></expr></argument>,
<argument><expr><name>adaptionset_node</name></expr></argument>,
<argument><expr><name>mpd_baseurl_node</name></expr></argument>,
<argument><expr><name>period_baseurl_node</name></expr></argument>,
<argument><expr><name>period_segmenttemplate_node</name></expr></argument>,
<argument><expr><name>period_segmentlist_node</name></expr></argument>,
<argument><expr><name>fragment_template_node</name></expr></argument>,
<argument><expr><name>content_component_node</name></expr></argument>,
<argument><expr><name>adaptionset_baseurl_node</name></expr></argument>,
<argument><expr><name>adaptionset_segmentlist_node</name></expr></argument>,
<argument><expr><name>adaptionset_supplementalproperty_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_programinformation</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>xmlNodePtr</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"Title"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Source"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"Source"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Copyright"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"Copyright"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_manifest</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>close_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlDoc</name> <modifier>*</modifier></type><name>doc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>root_element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>period_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>tmp_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>mpd_baseurl_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>period_baseurl_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>period_segmenttemplate_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>period_segmentlist_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlNodePtr</name></type> <name>adaptionset_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlAttrPtr</name></type> <name>attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>period_duration_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>period_start_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>close_in</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_url</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>filesize</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filesize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filesize</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filesize</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filesize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to read to offset '%s'\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>LIBXML_TEST_VERSION</name></type>

<name>doc</name> <init>= <expr><call><name>xmlReadMemory</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>root_element</name> <operator>=</operator> <call><name>xmlDocGetRootElement</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>root_element</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s' - missing root node\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>XML_ELEMENT_NODE</name> <operator>||</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"MPD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s' - wrong root node name[%s] type[%d]\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s' - missing type attrib\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"dynamic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>properties</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"availabilityStartTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name> <operator>=</operator> <call><name>get_utc_date_time_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;availability_start_time = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"availabilityEndTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>availability_end_time</name></name> <operator>=</operator> <call><name>get_utc_date_time_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;availability_end_time = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>availability_end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"publishTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>publish_time</name></name> <operator>=</operator> <call><name>get_utc_date_time_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;publish_time = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>publish_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"minimumUpdatePeriod"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>minimum_update_period</name></name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;minimum_update_period = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>minimum_update_period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"timeShiftBufferDepth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>time_shift_buffer_depth</name></name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;time_shift_buffer_depth = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_shift_buffer_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"minBufferTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>min_buffer_time</name></name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;min_buffer_time = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>min_buffer_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"suggestedPresentationDelay"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>suggested_presentation_delay</name></name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;suggested_presentation_delay = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>suggested_presentation_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"mediaPresentationDuration"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>media_presentation_duration</name></name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"c-&gt;media_presentation_duration = [%"</literal><name>PRId64</name><literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>media_presentation_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>tmp_node</name> <operator>=</operator> <call><name>find_child_node_by_name</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"BaseURL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mpd_baseurl_node</name> <operator>=</operator> <call><name>xmlCopyNode</name><argument_list>(<argument><expr><name>tmp_node</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mpd_baseurl_node</name> <operator>=</operator> <call><name>xmlNewNode</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"BaseURL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"Period"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_duration_sec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period_start_sec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>properties</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>xmlGetProp</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"duration"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_duration_sec</name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_start_sec</name> <operator>=</operator> <call><name>get_duration_insec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>period_duration_sec</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>period_duration</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>period_duration</name></name> <operator>=</operator> <name>period_duration_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>period_start</name></name> <operator>=</operator> <name>period_start_sec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>period_start</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>media_presentation_duration</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>period_duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"ProgramInformation"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_programinformation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>period_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s' - missing Period node\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>adaptionset_node</name> <operator>=</operator> <call><name>xmlFirstElementChild</name><argument_list>(<argument><expr><name>period_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>adaptionset_node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>adaptionset_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"BaseURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_baseurl_node</name> <operator>=</operator> <name>adaptionset_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>adaptionset_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SegmentTemplate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_segmenttemplate_node</name> <operator>=</operator> <name>adaptionset_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>adaptionset_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"SegmentList"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period_segmentlist_node</name> <operator>=</operator> <name>adaptionset_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>adaptionset_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"AdaptationSet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_manifest_adaptationset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>adaptionset_node</name></expr></argument>, <argument><expr><name>mpd_baseurl_node</name></expr></argument>, <argument><expr><name>period_baseurl_node</name></expr></argument>, <argument><expr><name>period_segmenttemplate_node</name></expr></argument>, <argument><expr><name>period_segmentlist_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adaptionset_node</name> <operator>=</operator> <call><name>xmlNextElementSibling</name><argument_list>(<argument><expr><name>adaptionset_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlCleanupParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFreeNode</name><argument_list>(<argument><expr><name>mpd_baseurl_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>close_in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calc_cur_seg_no</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"in n_fragments mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"in n_timelines mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_time_offset</name> <operator>=</operator> <call><name>get_segment_start_time_based_on_timeline</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">60</literal> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>calc_next_seg_no_from_timelines</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>start_time_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"in fragment_duration mode fragment_timescale = %"</literal><name>PRId64</name><literal type="string">", presentation_timeoffset = %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>presentation_timeoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>presentation_timeoffset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>get_current_time_in_sec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator><operator>-</operator><name><name>pls</name><operator>-&gt;</operator><name>presentation_timeoffset</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>min_buffer_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>publish_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>min_buffer_time</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>publish_time</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>suggested_presentation_delay</name></name><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>min_buffer_time</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>publish_time</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>time_shift_buffer_depth</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>suggested_presentation_delay</name></name><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>get_current_time_in_sec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>suggested_presentation_delay</name></name><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calc_min_seg_no</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"in live mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>get_current_time_in_sec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name><operator>)</operator> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>time_shift_buffer_depth</name></name><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calc_max_seg_no</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length_of_each_segment</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>period_duration</name></name> <operator>/</operator> <name>length_of_each_segment</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>get_current_time_in_sec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>availability_start_time</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>media_presentation_duration</name></name> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>move_timelines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_dest</name></decl></parameter>, <parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rep_dest</name> <operator>&amp;&amp;</operator> <name>rep_src</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_timelines_list</name><argument_list>(<argument><expr><name>rep_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>timelines</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>timelines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>n_timelines</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>=</operator> <call><name>calc_max_seg_no</name><argument_list>(<argument><expr><name>rep_dest</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_src</name><operator>-&gt;</operator><name>timelines</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_src</name><operator>-&gt;</operator><name>n_timelines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>move_segments</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_dest</name></decl></parameter>, <parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rep_dest</name> <operator>&amp;&amp;</operator> <name>rep_src</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_fragment_list</name><argument_list>(<argument><expr><name>rep_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep_src</name><operator>-&gt;</operator><name>start_number</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>rep_dest</name><operator>-&gt;</operator><name>start_number</name></name> <operator>+</operator> <name><name>rep_dest</name><operator>-&gt;</operator><name>n_fragments</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>+=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>start_number</name></name> <operator>-</operator> <name><name>rep_dest</name><operator>-&gt;</operator><name>start_number</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>fragments</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>fragments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>=</operator> <call><name>calc_max_seg_no</name><argument_list>(<argument><expr><name>rep_dest</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_src</name><operator>-&gt;</operator><name>fragments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_src</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>refresh_manifest</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_videos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>videos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_audios</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>audios</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_subtitles</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>subtitles</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_url</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_manifest</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name> <operator>!=</operator> <name>n_videos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"new manifest has mismatched no. of video representations, %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>n_videos</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name> <operator>!=</operator> <name>n_audios</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"new manifest has mismatched no. of audio representations, %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>n_audios</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name> <operator>!=</operator> <name>n_subtitles</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"new manifest has mismatched no. of subtitles representations, %d -&gt; %d\n"</literal></expr></argument>,
<argument><expr><name>n_subtitles</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_videos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>cur_video</name> <init>= <expr><name><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>ccur_video</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_video</name><operator>-&gt;</operator><name>timelines</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>currentTime</name> <init>= <expr><call><name>get_segment_start_time_based_on_timeline</name><argument_list>(<argument><expr><name>cur_video</name></expr></argument>, <argument><expr><name><name>cur_video</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>cur_video</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ccur_video</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>calc_next_seg_no_from_timelines</name><argument_list>(<argument><expr><name>ccur_video</name></expr></argument>, <argument><expr><name>currentTime</name> <operator>*</operator> <name><name>cur_video</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccur_video</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_timelines</name><argument_list>(<argument><expr><name>ccur_video</name></expr></argument>, <argument><expr><name>cur_video</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_video</name><operator>-&gt;</operator><name>fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_segments</name><argument_list>(<argument><expr><name>ccur_video</name></expr></argument>, <argument><expr><name>cur_video</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_audios</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>cur_audio</name> <init>= <expr><name><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>ccur_audio</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_audio</name><operator>-&gt;</operator><name>timelines</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>currentTime</name> <init>= <expr><call><name>get_segment_start_time_based_on_timeline</name><argument_list>(<argument><expr><name>cur_audio</name></expr></argument>, <argument><expr><name><name>cur_audio</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>cur_audio</name><operator>-&gt;</operator><name>fragment_timescale</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ccur_audio</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>calc_next_seg_no_from_timelines</name><argument_list>(<argument><expr><name>ccur_audio</name></expr></argument>, <argument><expr><name>currentTime</name> <operator>*</operator> <name><name>cur_audio</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ccur_audio</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_timelines</name><argument_list>(<argument><expr><name>ccur_audio</name></expr></argument>, <argument><expr><name>cur_audio</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur_audio</name><operator>-&gt;</operator><name>fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_segments</name><argument_list>(<argument><expr><name>ccur_audio</name></expr></argument>, <argument><expr><name>cur_audio</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>finish</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>base_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name> <operator>=</operator> <name>base_url</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_subtitle_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_audio_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_video_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name> <operator>=</operator> <name>n_subtitles</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name> <operator>=</operator> <name>subtitles</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name> <operator>=</operator> <name>n_audios</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name> <operator>=</operator> <name>audios</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name> <operator>=</operator> <name>n_videos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name> <operator>=</operator> <name>videos</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>get_current_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>min_seq_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_seq_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator> <operator>!</operator><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seg_ptr</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragments</name><index>[<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>seg_ptr</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>seg_ptr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>=</operator> <name><name>seg_ptr</name><operator>-&gt;</operator><name>url_offset</name></name></expr>;</expr_stmt>
<return>return <expr><name>seg</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>refresh_manifest</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_seq_no</name> <operator>=</operator> <call><name>calc_min_seg_no</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_seq_no</name> <operator>=</operator> <call><name>calc_max_seg_no</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name></name> <operator>||</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>refresh_manifest</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;=</operator> <name>min_seq_no</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"old fragment: cur[%"</literal><name>PRId64</name><literal type="string">"] min[%"</literal><name>PRId64</name><literal type="string">"] max[%"</literal><name>PRId64</name><literal type="string">"], playlist %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>, <argument><expr><name>min_seq_no</name></expr></argument>, <argument><expr><name>max_seq_no</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>calc_cur_seg_no</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&gt;</operator> <name>max_seq_no</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"new fragment: min[%"</literal><name>PRId64</name><literal type="string">"] max[%"</literal><name>PRId64</name><literal type="string">"], playlist %d\n"</literal></expr></argument>, <argument><expr><name>min_seq_no</name></expr></argument>, <argument><expr><name>max_seq_no</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;=</operator> <name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seg</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>seg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpfilename</name><init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpfilename</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dash_fill_tmpl_params</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_segment_start_time_based_on_timeline</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strireplace</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>, <argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to resolve template url '%s', try to use origin template\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot resolve template url '%s'\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>url_template</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>seg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_from_url</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_size</name></name> <operator>-</operator> <name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_input</name><parameter_list>(<parameter><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"end_offset"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>max_url_size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"DASH request for url '%s', offset %"</literal><name>PRId64</name><literal type="string">", playlist %d\n"</literal></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>url_offset</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_url</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_size</name></name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_init_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>max_init_section_size</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>urlsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>init_section</name></name> <operator>||</operator> <name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Failed to open an initialization section in playlist %d\n"</literal></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>init_section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>urlsize</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name>urlsize</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <name>max_init_section_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Downloading an initialization section of size %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>sec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sec_size</name></expr></argument>, <argument><expr><name>max_init_section_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr></argument>, <argument><expr><name>sec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_section</name></name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>,
<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_data_len</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>seek_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>init_sec_data_len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<label><name>restart</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_fragment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name> <operator>=</operator> <call><name>get_current_fragment</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_init_section</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_input</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open fragment of playlist %d\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>restart</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>init_sec_data_len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_size</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_data_len</name></name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>copy_size</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name> <operator>=</operator> <call><name>get_current_fragment</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_from_url</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seg</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>is_restart_needed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cur_seq_no</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>is_restart_needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>save_avio_options</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"headers"</literal></expr>, <expr><literal type="string">"user_agent"</literal></expr>, <expr><literal type="string">"cookies"</literal></expr>, <expr><literal type="string">"http_proxy"</literal></expr>, <expr><literal type="string">"referer"</literal></expr>, <expr><literal type="string">"rw_timeout"</literal></expr>, <expr><literal type="string">"icy"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>opt</name> <init>= <expr><name>opts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>opt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><operator>*</operator><name>opt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nested_io_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"A DASH playlist item '%s' referred to an external file '%s'. "</literal>
<literal type="string">"Opening this file was forbidden for security reasons\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_demux_for_component</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVIOContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reopen_demux_for_component</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>in_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>in_fmt_opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>avio_ctx_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_demux_for_component</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avio_ctx_buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>INITIAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avio_ctx_buffer</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>avio_ctx_buffer</name></expr></argument> , <argument><expr><name>INITIAL_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>avio_ctx_buffer</name></expr></argument> , <argument><expr><name>INITIAL_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pls</name></expr></argument>, <argument><expr><name>read_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>seek_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>seekable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_copy_whiteblacklists</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AVFMT_FLAG_CUSTOM_IO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>probesize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>probesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>probesize</name></name></expr> </then><else>: <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>max_analyze_duration</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_analyze_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_analyze_duration</name></name></expr> </then><else>: <expr><literal type="number">4</literal> <operator>*</operator> <name>AV_TIME_BASE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_probe_input_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_fmt</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error when loading first fragment, playlist %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>io_open</name></name> <operator>=</operator> <name>nested_io_open</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_fmt_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_fmt_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_R_FRAME_RATE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>r_frame_rate</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_demux_for_component</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>calc_cur_seg_no</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name> <operator>=</operator> <call><name>calc_max_seg_no</name><argument_list>(<argument><expr><name>pls</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reopen_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ist</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_common_init_section_exist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_pls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>first_init_section</name> <init>= <expr><name><name>pls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>init_section</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>url_offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_init_section</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n_pls</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>first_init_section</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>url_offset</name> <operator>=</operator> <name><name>first_init_section</name><operator>-&gt;</operator><name>url_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>init_section</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n_pls</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>pls</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>init_section</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pls</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>init_section</name><operator>-&gt;</operator><name>url_offset</name></name> <operator>!=</operator> <name>url_offset</name> <operator>||</operator> <name><name>pls</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>init_section</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_init_section</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>init_sec_buf</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>rep_src</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep_dest</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot alloc memory for init_sec_buf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><name><name>rep_src</name><operator>-&gt;</operator><name>init_sec_buf</name></name></expr></argument>, <argument><expr><name><name>rep_src</name><operator>-&gt;</operator><name>init_sec_data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>init_sec_buf_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>init_sec_data_len</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>init_sec_data_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep_dest</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <name><name>rep_src</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>save_avio_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_manifest</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>media_presentation_duration</name></name> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>, <argument><expr><literal type="string">"seekable"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_video</name></name> <operator>=</operator> <call><name>is_common_init_section_exist</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_init_section</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>stream_index</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_audio</name></name> <operator>=</operator> <call><name>is_common_init_section_exist</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_init_section</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>stream_index</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_audio</name></name> <operator>=</operator> <call><name>is_common_init_section_exist</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>is_init_section_common_audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_init_section</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>open_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>stream_index</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_index</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>
<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>av_new_program</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>program</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"variant_bitrate"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"variant_bitrate"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>bandwidth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rep</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rep</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rep</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>rep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recheck_discard_flags</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needed</name> <init>= <expr><operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>assoc_stream</name></name> <operator>||</operator> <name><name>pls</name><operator>-&gt;</operator><name>assoc_stream</name><operator>-&gt;</operator><name>discard</name></name> <operator>&lt;</operator> <name>AVDISCARD_ALL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>cur_seq_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>reopen_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Now receiving stream_index %d\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>needed</name> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_demux_for_component</name><argument_list>(<argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"No longer receiving stream_index %d\n"</literal></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mints</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>rep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>recheck_discard_flags</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recheck_discard_flags</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>recheck_discard_flags</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>&lt;</operator> <name>mints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>rep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mints</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>&lt;</operator> <name>mints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>rep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mints</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rep</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>&lt;</operator> <name>mints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>rep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mints</name> <operator>=</operator> <name><name>rep</name><operator>-&gt;</operator><name>cur_timestamp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">90000</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>is_restart_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reopen_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>is_restart_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free_audio_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_video_list</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>avio_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>representation</name></name> <modifier>*</modifier></type><name>pls</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>seek_pos_msec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dry_run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"DASH seek pos[%"</literal><name>PRId64</name><literal type="string">"ms], playlist %d%s\n"</literal></expr></argument>,
<argument><expr><name>seek_pos_msec</name></expr></argument>, <argument><expr><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dry_run</name></expr> ?</condition><then> <expr><literal type="string">" (dry)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_fragments</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dry_run</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_read_frame_flush</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>av_seek_frame</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seek_pos_msec</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pls</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"dash_seek with SegmentTimeline start n_timelines[%d] "</literal>
<literal type="string">"last_seq_no[%"</literal><name>PRId64</name><literal type="string">"], playlist %d.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>n_timelines</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>starttime</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seek_pos_msec</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>duration</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>set_seq_num</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>repeat</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>pls</name><operator>-&gt;</operator><name>timelines</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seek_pos_msec</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>duration</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>set_seq_num</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>set_seq_num</name>:</label>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <ternary><condition><expr><name>num</name> <operator>&gt;</operator> <name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr> ?</condition><then> <expr><name><name>pls</name><operator>-&gt;</operator><name>last_seq_no</name></name></expr> </then><else>: <expr><name>num</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"dash_seek with SegmentTimeline end cur_seq_no[%"</literal><name>PRId64</name><literal type="string">"], playlist %d.\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pls</name><operator>-&gt;</operator><name>rep_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>seek_pos_msec</name> <operator>*</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_timescale</name></name><operator>)</operator> <operator>/</operator> <name><name>pls</name><operator>-&gt;</operator><name>fragment_duration</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pls</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dash_seek missing timeline or fragment_duration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seq_no</name></name> <operator>=</operator> <name><name>pls</name><operator>-&gt;</operator><name>first_seq_no</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>cur_seg_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pls</name><operator>-&gt;</operator><name>init_sec_buf_read_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>dry_run</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>reopen_demux_for_component</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pls</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos_msec</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr> ?</condition><then>
<expr><name>AV_ROUND_DOWN</name></expr> </then><else>: <expr><name>AV_ROUND_UP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BYTE</name><operator>)</operator> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_videos</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dash_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>seek_pos_msec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>videos</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_audios</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dash_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>seek_pos_msec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>audios</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n_subtitles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dash_seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>seek_pos_msec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>subtitles</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dash_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;MPD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"dash:profile:isoff-on-demand:2011"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"dash:profile:isoff-live:2011"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"dash:profile:isoff-live:2012"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"dash:profile:isoff-main:2011"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"3GPP:PSS:profile:DASH1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"dash:profile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DASHContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>dash_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"allowed_extensions"</literal></expr>, <expr><literal type="string">"List of file extensions that dash is allowed to access"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>allowed_extensions</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>,
<expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"aac,m4a,m4s,m4v,mov,mp4,webm,ts"</literal></expr>}</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dash_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"dash"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>dash_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dash_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dash"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Dynamic Adaptive Streaming over HTTP"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dash_class</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DASHContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>dash_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>dash_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>dash_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>dash_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>dash_read_seek</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NO_BYTE_SEEK</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
