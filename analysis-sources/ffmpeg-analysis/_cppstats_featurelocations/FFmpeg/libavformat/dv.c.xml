<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\dv.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dv_profile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<struct>struct <name>DVDemuxContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDVProfile</name><modifier>*</modifier></type> <name>sys</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>fctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name><modifier>*</modifier></type> <name>vst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name><modifier>*</modifier></type> <name><name>ast</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name><name>audio_pkt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>audio_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ach</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>abytes</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>dv_audio_12to16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sample</name> <operator>&lt;</operator> <literal type="number">0x800</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sample</name></expr> </then><else>: <expr><name>sample</name> <operator>|</operator> <literal type="number">0xf000</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shift</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x2</literal> <operator>||</operator> <name>shift</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xd</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>-</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0xe</literal> <operator>-</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sample</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dv_extract_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dv_pack_type</name></name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>dv_audio_source</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>dv_audio_control</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">80</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>dv_video_control</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">48</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">12000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>dv_timecode</name></expr>:</case>
<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>(</operator><literal type="number">80</literal><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><index>[<expr><name>offs</name></expr>]</index></name> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name><name>frame</name><index>[<expr><name>offs</name></expr>]</index></name> <operator>==</operator> <name>t</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>frame</name><index>[<expr><name>offs</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_audio_frequency</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_extract_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppcm</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>chan</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>of</name></decl>, <decl><type ref="prev"/><name>smpls</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>, <decl><type ref="prev"/><name>quant</name></decl>, <decl><type ref="prev"/><name>half_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>lc</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>as_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl>, <decl><type ref="prev"/><name>ipcm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>as_pack</name> <operator>=</operator> <call><name>dv_extract_pack</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dv_audio_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>as_pack</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>smpls</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>quant</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dv_audio_frequency</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>audio_min_samples</name><index>[<expr><name>freq</name></expr>]</index></name> <operator>+</operator> <name>smpls</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>half_ch</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>ipcm</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ipcm</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>quant</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many dv pcm frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name></expr>;</condition> <incr><expr><name>chan</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ipcm</name><operator>&lt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm</name> <operator>=</operator> <name><name>ppcm</name><index>[<expr><name>ipcm</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pcm</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>frame</name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>quant</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>half_ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ipcm</name><operator>&lt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcm</name> <operator>=</operator> <name><name>ppcm</name><index>[<expr><name>ipcm</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pcm</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quant</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_shuffle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_stride</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>lc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>frame</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>frame</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>frame</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>frame</name><index>[<expr><name>d</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>lc</name> <operator>==</operator> <literal type="number">0x800</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dv_audio_12to16</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0x800</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dv_audio_12to16</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_shuffle</name><index>[<expr><name>i</name> <operator>%</operator> <name>half_ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_stride</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>lc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_shuffle</name><index>[<expr><name>i</name> <operator>%</operator> <name>half_ch</name> <operator>+</operator> <name>half_ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_stride</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcm</name><index>[<expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>frame</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_extract_audio_info</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>as_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>, <decl><type ref="prev"/><name>stype</name></decl>, <decl><type ref="prev"/><name>smpls</name></decl>, <decl><type ref="prev"/><name>quant</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ach</name></decl>;</decl_stmt>

<expr_stmt><expr><name>as_pack</name> <operator>=</operator> <call><name>dv_extract_pack</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dv_audio_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>as_pack</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ach</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>smpls</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>stype</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>as_pack</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dv_audio_frequency</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unrecognized audio sample rate index (%d)\n"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stype</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"stype %d is invalid\n"</literal></expr></argument>, <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ach</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ach</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block><operator>)</operator><index>[<expr><name>stype</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ach</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>quant</name> <operator>&amp;&amp;</operator> <name>freq</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ach</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ach</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_index</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>dv_audio_frequency</name><index>[<expr><name>freq</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dv_audio_frequency</name><index>[<expr><name>freq</name></expr>]</index></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ach</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>audio_min_samples</name><index>[<expr><name>freq</name></expr>]</index></name> <operator>+</operator> <name>smpls</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_extract_video_info</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsc_pack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apt</name></decl>, <decl><type ref="prev"/><name>is16_9</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vsc_pack</name> <operator>=</operator> <call><name>dv_extract_pack</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dv_video_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apt</name> <operator>=</operator> <name><name>frame</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is16_9</name> <operator>=</operator> <operator>(</operator><name>vsc_pack</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>apt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vsc_pack</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>sar</name><index>[<expr><name>is16_9</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>c-&gt;sys-&gt;frame_size</argument>,
<argument>(AVRational) { <literal type="number">8</literal></argument>, <argument><literal type="number">1</literal> }</argument>,
<argument>c-&gt;sys-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_extract_timecode</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tc_pack</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>prevent_df</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>ltc_divisor</name></name> <operator>==</operator> <literal type="number">25</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>ltc_divisor</name></name> <operator>==</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tc_pack</name> <operator>=</operator> <call><name>dv_extract_pack</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>dv_timecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tc_pack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_timecode_make_smpte_tc_string</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>tc_pack</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prevent_df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>avpriv_dv_init_demux</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVDemuxContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name></name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>vst</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fctx</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">25000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_dv_get_packet</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ach</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_dv_produce_packet</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ppcm</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>DV_PROFILE_BYTES</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>av_dv_frame_profile</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<name>buf_size</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dv_extract_audio_info</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ach</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>abytes</name></name> <operator>*</operator> <literal type="number">30000</literal> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator>
<name><name>c</name><operator>-&gt;</operator><name>ast</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppcm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ach</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dv_extract_audio</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ppcm</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0C</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abytes</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abytes</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dv_extract_video_info</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vst</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>dv_frame_offset</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame_size</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>frame_size</name><operator>)</operator> <operator>*</operator> <name>frame_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>frame_size</name> <operator>*</operator> <name>timestamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <name>max_offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>max_offset</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dv_offset_reset</name><parameter_list>(<parameter><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>frame_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>frame_offset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ach</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abytes</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>c-&gt;frames</argument>, <argument>c-&gt;sys-&gt;time_base</argument>,
<argument>(AVRational) { <literal type="number">8</literal></argument>, <argument>c-&gt;ast[<literal type="number">0</literal>]-&gt;codecpar-&gt;bit_rate }</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>fctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot adjust audio bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>audio_pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<typedef>typedef <type><struct>struct <name>RawDVContext</name> <block>{
<decl_stmt><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>dv_demux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>DV_MAX_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RawDVContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_read_timecode</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>timecode</name><index>[<expr><name>AV_TIMECODE_STR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>partial_frame_size</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>partial_frame</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>partial_frame</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name>partial_frame_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RawDVContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>partial_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>partial_frame</name></expr></argument>, <argument><expr><name>partial_frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>partial_frame_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dv_extract_timecode</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>, <argument><expr><name>partial_frame</name></expr></argument>, <argument><expr><name>timecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>timecode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Detected timecode is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>partial_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>marker_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RawDVContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name> <operator>=</operator> <call><name>avpriv_dv_init_demux</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0xffffff7f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x1f07003f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot find DV header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0x003f0700</literal> <operator>||</operator> <name>state</name> <operator>==</operator> <literal type="number">0xff3f0700</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>marker_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0xff3f0701</literal> <operator>&amp;&amp;</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>marker_pos</name> <operator>==</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">163</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DV_PROFILE_BYTES</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DV_PROFILE_BYTES</name> <operator>-</operator> <literal type="number">4</literal> <operator>||</operator>
<call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>DV_PROFILE_BYTES</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>av_dv_frame_profile</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><name>DV_PROFILE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Can't determine profile of DV input stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>c-&gt;dv_demux-&gt;sys-&gt;frame_size</argument>,
<argument>(AVRational) { <literal type="number">8</literal></argument>, <argument><literal type="number">1</literal> }</argument>,
<argument>c-&gt;dv_demux-&gt;sys-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dv_read_timecode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RawDVContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avpriv_dv_get_packet</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dv_demux</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avpriv_dv_produce_packet</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RawDVContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><call><name>dv_frame_offset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dv_offset_reset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>offset</name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RawDVContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dv_demux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>marker_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstmatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secondary_matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name><operator>-</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0x0007f840</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00070000</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0xff07ff7f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1f07003f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>secondary_matches</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <literal type="number">0xffffff7f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x1f07003f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstmatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0x003f0700</literal> <operator>||</operator> <name>state</name> <operator>==</operator> <literal type="number">0xff3f0700</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>marker_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0xff3f0701</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>-</operator> <name>marker_pos</name> <operator>==</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <name>matches</name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>firstmatch</name> <operator>||</operator>
<operator>(</operator><name>secondary_matches</name> <operator>&gt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <name>secondary_matches</name> <operator>&lt;</operator> <literal type="number">24000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AVPROBE_SCORE_MAX</name> <operator>/</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dv_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DV (Digital Video)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RawDVContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>dv_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>dv_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>dv_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>dv_read_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>dv_read_seek</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dv,dif"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
