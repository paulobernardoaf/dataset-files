<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\oggparsecelt.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oggdec.h"</cpp:file></cpp:include>

<struct>struct <name>oggcelt_private</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>extra_headers_left</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>celt_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oggcelt_private</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>==</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ff_celt_codec</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>ff_celt_codec</name><operator>.</operator><name>magicsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>sample_rate</name></decl>, <decl><type ref="prev"/><name>nb_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>overlap</name></decl>, <decl><type ref="prev"/><name>extra_headers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oggcelt_private</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>overlap</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_headers</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_CELT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>nb_channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>private</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>priv</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>private</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>private</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>extra_headers_left</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>extra_headers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>priv</name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>extra_headers_left</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ff_vorbis_stream_comment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>extra_headers_left</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name></type> <name>ff_celt_codec</name> <init>= <expr><block>{
<expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="string">"CELT "</literal></expr>,
<expr><operator>.</operator><name>magicsize</name> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><operator>.</operator><name>header</name> <operator>=</operator> <name>celt_header</name></expr>,
<expr><operator>.</operator><name>nb_header</name> <operator>=</operator> <literal type="number">2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
