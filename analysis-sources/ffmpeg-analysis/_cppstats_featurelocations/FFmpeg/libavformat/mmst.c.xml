<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mmst.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_ADDRESS</name></cpp:macro> <cpp:value>0xc0a80081</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_PORT</name></cpp:macro> <cpp:value>1037</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <block>{
<decl><name>CS_PKT_INITIAL</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>CS_PKT_PROTOCOL_SELECT</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>CS_PKT_MEDIA_FILE_REQUEST</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>CS_PKT_START_FROM_PKT_ID</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>CS_PKT_STREAM_PAUSE</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,
<decl><name>CS_PKT_STREAM_CLOSE</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,
<decl><name>CS_PKT_MEDIA_HEADER_REQUEST</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,
<decl><name>CS_PKT_TIMING_DATA_REQUEST</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,
<decl><name>CS_PKT_USER_PASSWORD</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>CS_PKT_KEEPALIVE</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,
<decl><name>CS_PKT_STREAM_ID_REQUEST</name> <init>= <expr><literal type="number">0x33</literal></expr></init></decl>,
}</block></enum></type> <name>MMSCSPacketType</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{


<decl><name>SC_PKT_CLIENT_ACCEPTED</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>SC_PKT_PROTOCOL_ACCEPTED</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>SC_PKT_PROTOCOL_FAILED</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,
<decl><name>SC_PKT_MEDIA_PKT_FOLLOWS</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,
<decl><name>SC_PKT_MEDIA_FILE_DETAILS</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,
<decl><name>SC_PKT_HEADER_REQUEST_ACCEPTED</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,
<decl><name>SC_PKT_TIMING_TEST_REPLY</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,
<decl><name>SC_PKT_PASSWORD_REQUIRED</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,
<decl><name>SC_PKT_KEEPALIVE</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,
<decl><name>SC_PKT_STREAM_STOPPED</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,
<decl><name>SC_PKT_STREAM_CHANGING</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>SC_PKT_STREAM_ID_ACCEPTED</name> <init>= <expr><literal type="number">0x21</literal></expr></init></decl>,




<decl><name>SC_PKT_CANCEL</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>SC_PKT_NO_DATA</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,




<decl><name>SC_PKT_ASF_HEADER</name> <init>= <expr><literal type="number">0x010000</literal></expr></init></decl>,
<decl><name>SC_PKT_ASF_MEDIA</name> <init>= <expr><literal type="number">0x010001</literal></expr></init></decl>,

}</block></enum></type> <name>MMSSCPacketType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MMSTContext</name> <block>{
<decl_stmt><decl><type><name>MMSContext</name></type> <name>mms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outgoing_packet_seq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>incoming_packet_seq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>incoming_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>packet_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>header_packet_id</name></decl>;</decl_stmt> 
}</block></struct></type> <name>MMSTContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>start_command_packet</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>, <parameter><decl><type><name>MMSCSPacketType</name></type> <name>packet_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xb00bface</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>outgoing_packet_seq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name>packet_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_command_prefixes</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>prefix1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prefix2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name>prefix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name>prefix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>send_command_packet</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>= <expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name> <operator>-</operator> <name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exact_length</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_length</name><init>= <expr><name>exact_length</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len8</name><init>= <expr><name>first_length</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_result</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>first_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>len8</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>exact_length</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>write_result</name><operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>, <argument><expr><name>exact_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>write_result</name> <operator>!=</operator> <name>exact_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to write data of length %d: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>exact_length</name></expr></argument>, <argument><expr><name>write_result</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>write_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>write_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="string">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_put_utf16</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>bic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name> <operator>-</operator> <name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bic</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_put_str16le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bic</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_time_test_data</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_TIMING_DATA_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></argument>, <argument><expr><literal type="number">0x00f0f0f0</literal></expr></argument>, <argument><expr><literal type="number">0x0004000b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_protocol_select</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data_string</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_PROTOCOL_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0x00989680</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>data_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\%d.%d.%d.%d\\%s\\%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LOCAL_ADDRESS</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LOCAL_ADDRESS</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name>LOCAL_ADDRESS</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,
<argument><expr><name>LOCAL_ADDRESS</name><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,
<argument><expr><literal type="string">"TCP"</literal></expr></argument>, 
<argument><expr><name>LOCAL_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mms_put_utf16</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>data_string</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_media_file_request</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_MEDIA_FILE_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mms_put_utf16</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_packet_stream_changing_type</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Stream changing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>header_packet_id</name></name><operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <literal type="number">40</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Changed header prefix to 0x%x"</literal></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>header_packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_keepalive_packet</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_KEEPALIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x100FFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>pad_media_packet</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name><operator>&lt;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>padding_size</name> <init>= <expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>-</operator> <name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>+=</operator> <name>padding_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>MMSSCPacketType</name></type> <name>get_tcp_server_response</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>read_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSSCPacketType</name></type> <name>packet_type</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>read_result</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_result</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error reading packet header: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>read_result</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>read_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>SC_PKT_CANCEL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The server closed the connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>SC_PKT_NO_DATA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>packet_type</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0xb00bface</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length_remaining</name></decl>, <decl><type ref="prev"/><name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>incoming_flags</name></name><operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_result</name><operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>read_result</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Reading command packet length failed: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>read_result</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>read_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="string">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>read_result</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length_remaining</name><operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Length remaining is %d\n"</literal></expr></argument>, <argument><expr><name>length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length_remaining</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal>
<operator>||</operator> <name>length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Incoming packet length %d exceeds bufsize %"</literal><name>SIZE_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>length_remaining</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>read_result</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>,
<argument><expr><name>length_remaining</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_result</name> <operator>!=</operator> <name>length_remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Reading pkt data (length=%d) failed: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>length_remaining</name></expr></argument>, <argument><expr><name>read_result</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>read_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="string">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>read_result</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>packet_type</name><operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name><operator>+</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_result</name> <operator>&gt;=</operator> <literal type="number">44</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>hr</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Server sent a message with packet type 0x%x and error status code 0x%08x\n"</literal></expr></argument>, <argument><expr><name>packet_type</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length_remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_id_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>



<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length_remaining</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>incoming_packet_seq</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_id_type</name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>incoming_flags</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length_remaining</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal>
<operator>||</operator> <name>length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Data length %d is invalid or too large (max=%"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name>length_remaining</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>=</operator> <name>length_remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_result</name><operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>read_result</name> <operator>!=</operator> <name>length_remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to read packet data of size %d: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>length_remaining</name></expr></argument>, <argument><expr><name>read_result</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>read_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><literal type="string">"The server closed the connection"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>read_result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>read_result</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>packet_id_type</name> <operator>==</operator> <name><name>mmst</name><operator>-&gt;</operator><name>header_packet_id</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>SC_PKT_ASF_HEADER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>,
<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>+</operator>
<name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr></argument>,
<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>+=</operator> <name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mmst</name><operator>-&gt;</operator><name>incoming_flags</name></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>packet_id_type</name> <operator>==</operator> <name><name>mmst</name><operator>-&gt;</operator><name>packet_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_type</name> <operator>=</operator> <name>SC_PKT_ASF_MEDIA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"packet id type %d is old."</literal></expr></argument>, <argument><expr><name>packet_id_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>packet_type</name> <operator>==</operator> <name>SC_PKT_KEEPALIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>send_keepalive_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>packet_type</name> <operator>==</operator> <name>SC_PKT_STREAM_CHANGING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_packet_stream_changing_type</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>packet_type</name> <operator>==</operator> <name>SC_PKT_ASF_MEDIA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pad_media_packet</name><argument_list>(<argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>packet_type</name></expr>;</return>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_safe_send_recv</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>send_fun</name>)<parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MMSSCPacketType</name></type> <name>expect_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSSCPacketType</name></type> <name>type</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>send_fun</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>send_fun</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Send Packet error before expecting recv packet %d\n"</literal></expr></argument>, <argument><expr><name>expect_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>get_tcp_server_response</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>expect_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Corrupt stream (unexpected packet type 0x%x, expected 0x%x)\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>expect_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_media_header_request</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_MEDIA_HEADER_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0x40AC2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>send_startup_packet</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>data_string</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>data_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"NSPlayer/7.0.0.1956; {%s}; Host: %s"</literal></expr></argument>,
<argument><expr><literal type="string">"7E667F5D-A661-495E-A512-F55686DDA178"</literal></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0004000b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0x0003001c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mms_put_utf16</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>data_string</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>send_stream_selection_request</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_STREAM_ID_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_close_packet</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_STREAM_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name> <init>= <expr><operator>(</operator><name>MMSTContext</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>send_close_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_media_packet_request</name><parameter_list>(<parameter><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>start_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>CS_PKT_START_FROM_PKT_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_command_prefixes</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x0001FFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>packet_id</name></name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>write_out_ptr</name></name></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>packet_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>send_command_packet</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_stream_buffers</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcpname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mms</name> <operator>=</operator> <operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>port</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">1755</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>tcpname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mmst</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>tcpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>packet_id</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mmst</name><operator>-&gt;</operator><name>header_packet_id</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_startup_packet</name></expr></argument>, <argument><expr><name>SC_PKT_CLIENT_ACCEPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_time_test_data</name></expr></argument>, <argument><expr><name>SC_PKT_TIMING_TEST_REPLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_protocol_select</name></expr></argument>, <argument><expr><name>SC_PKT_PROTOCOL_ACCEPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_media_file_request</name></expr></argument>, <argument><expr><name>SC_PKT_MEDIA_FILE_DETAILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_media_header_request</name></expr></argument>, <argument><expr><name>SC_PKT_HEADER_REQUEST_ACCEPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_PKT_ASF_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>mmst</name><operator>-&gt;</operator><name>incoming_flags</name></name> <operator>!=</operator> <literal type="number">0X08</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mmst</name><operator>-&gt;</operator><name>incoming_flags</name></name> <operator>!=</operator> <literal type="number">0X0C</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The server does not support MMST (try MMSH or RTSP)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_mms_asf_header_parser</name><argument_list>(<argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"asf header parsed failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>||</operator> <operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_stream_buffers</name><argument_list>(<argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_stream_selection_request</name></expr></argument>, <argument><expr><name>SC_PKT_STREAM_ID_ACCEPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>send_media_packet_request</name></expr></argument>, <argument><expr><name>SC_PKT_MEDIA_PKT_FOLLOWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Leaving open (success)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>mms_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Leaving open (failure: %d)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mms_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>MMSTContext</name> <modifier>*</modifier></type><name>mmst</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmst</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name> <operator>&lt;</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_mms_read_header</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_mms_read_data</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mms_safe_send_recv</name><argument_list>(<argument><expr><name>mmst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SC_PKT_ASF_MEDIA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name><operator>&gt;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Incoming pktlen %d is larger than ASF pktsize %d\n"</literal></expr></argument>,
<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name><operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_mms_read_data</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Read ASF media packet size is zero!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"read packet error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>;</do> 
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_mmst_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mmst"</literal></expr>,
<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>mms_open</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>mms_read</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>mms_close</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MMSTContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
