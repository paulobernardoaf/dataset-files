<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\omaenc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawenc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>oma_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srate_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isjointstereo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>srate_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>srate_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_oma_srate_tab</name><index>[<expr><name>srate_index</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample rate %d not supported in OpenMG audio\n"</literal></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_oma_srate_tab</name><index>[<expr><name>srate_index</name></expr>]</index></name> <operator>*</operator> <literal type="number">100</literal> <operator>==</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>ff_id3v2_write_simple</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ID3v2_EA3_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"EA3\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>EA3_HEADER_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>EA3_HEADER_SIZE</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OMA_CODECID_ATRAC3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ATRAC3 in OMA is only supported with 2 channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>isjointstereo</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>isjointstereo</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x12</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ATRAC3: Unsupported extradata size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>OMA_CODECID_ATRAC3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>isjointstereo</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>srate_index</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OMA_CODECID_ATRAC3P</name></expr>:</case>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>OMA_CODECID_ATRAC3P</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>srate_index</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name><operator>/</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported codec tag %s for write\n"</literal></expr></argument>,
<argument><expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>EA3_HEADER_SIZE</name> <operator>-</operator> <literal type="number">36</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_oma_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"oma"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Sony OpenMG audio"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"audio/x-oma"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"oma"</literal></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC3</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>oma_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>ff_raw_write_packet</name></expr>,
<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{<expr><name>ff_oma_codec_tags</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
