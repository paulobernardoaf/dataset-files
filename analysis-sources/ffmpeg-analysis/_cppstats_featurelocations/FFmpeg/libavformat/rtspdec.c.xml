<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\rtspdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpproto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>RTSPStatusMessage</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>RTSPStatusCode</name></name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
}</block> <decl><name><name>status_messages</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>RTSP_STATUS_OK</name></expr>, <expr><literal type="string">"OK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_METHOD</name></expr>, <expr><literal type="string">"Method Not Allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_BANDWIDTH</name></expr>, <expr><literal type="string">"Not Enough Bandwidth"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_SESSION</name></expr>, <expr><literal type="string">"Session Not Found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_STATE</name></expr>, <expr><literal type="string">"Method Not Valid in This State"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_AGGREGATE</name></expr>, <expr><literal type="string">"Aggregate operation not allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_ONLY_AGGREGATE</name></expr>, <expr><literal type="string">"Only aggregate operation allowed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_TRANSPORT</name></expr>, <expr><literal type="string">"Unsupported transport"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_INTERNAL</name></expr>, <expr><literal type="string">"Internal Server Error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_SERVICE</name></expr>, <expr><literal type="string">"Service Unavailable"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>RTSP_STATUS_VERSION</name></expr>, <expr><literal type="string">"RTSP Version not supported"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"NULL"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_LISTEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd_async</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TEARDOWN"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_rtsp_close_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_close_connections</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>read_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>rbufsize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rbuflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>rbuflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>rbuf</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rbuflen</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>rbufsize</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Message too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_send_reply</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RTSPStatusCode</name></name></type> <name>code</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extracontent</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>status_messages</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>code</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>status_messages</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RTSP/1.0 %d %s\r\n"</literal></expr></argument>,
<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>status_messages</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>status_messages</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CSeq: %d\r\n"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Server: %s\r\n"</literal></expr></argument>, <argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extracontent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>extracontent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Sending response:\n%s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>check_sessionid</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>session_id</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"There is no session-id at the moment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>session_id</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected session-id %s\n"</literal></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_SESSION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_STREAM_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rtsp_read_request</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rbuflen</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rbuflen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Parsing[%d]: %s\n"</literal></expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_parse_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>rbuflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>seq</name></name> <operator>!=</operator> <name><name>rt</name><operator>-&gt;</operator><name>seq</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected Sequence number %d\n"</literal></expr></argument>,
<argument><expr><name><name>request</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_sessionid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_announce</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sdp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"ANNOUNCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>content_type</name></name></expr></argument>, <argument><expr><literal type="string">"application/sdp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected content type %s\n"</literal></expr></argument>,
<argument><expr><name><name>request</name><operator>.</operator><name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_SERVICE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>content_length</name></name> <operator>&amp;&amp;</operator> <name><name>request</name><operator>.</operator><name>content_length</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>content_length</name></name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <name><name>request</name><operator>.</operator><name>content_length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unable to get complete SDP Description in ANNOUNCE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_INTERNAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sdp</name><index>[<expr><name><name>request</name><operator>.</operator><name>content_length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"SDP: %s\n"</literal></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_sdp_parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Content-Length header value exceeds sdp allocated buffer (4KB)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_INTERNAL</name></expr></argument>,
<argument><expr><literal type="string">"Content-Length exceeds buffer size"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_options</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>,
<argument><expr><literal type="string">"Public: ANNOUNCE, PAUSE, SETUP, TEARDOWN, RECORD\r\n"</literal></expr></argument>,
<argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_setup</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>controlurl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>responseheaders</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>localport</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transportidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>streamid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"SETUP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>nb_transports</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No transport defined in SETUP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>transportidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>transportidx</name> <operator>&lt;</operator> <name><name>request</name><operator>.</operator><name>nb_transports</name></name></expr>;</condition>
<incr><expr><name>transportidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><name>transportidx</name></expr>]</index></name><operator>.</operator><name>mode_record</name> <operator>||</operator>
<operator>(</operator><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><name>transportidx</name></expr>]</index></name><operator>.</operator><name>lower_transport</name> <operator>!=</operator>
<name>RTSP_LOWER_TRANSPORT_UDP</name> <operator>&amp;&amp;</operator>
<name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><name>transportidx</name></expr>]</index></name><operator>.</operator><name>lower_transport</name> <operator>!=</operator>
<name>RTSP_LOWER_TRANSPORT_TCP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mode=record/receive not set or transport"</literal>
<literal type="string">" protocol not supported (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>nb_transports</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"More than one transport not supported, "</literal>
<literal type="string">"using first of all\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>streamid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>streamid</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>streamid</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>streamid</name></expr>]</index></name><operator>-&gt;</operator><name>control_url</name></expr></argument>,
<argument><expr><name>controlurl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>streamid</name> <operator>==</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find requested track\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_STREAM_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>streamid</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>localport</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_min</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lower_transport</name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_open_transport_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_TRANSPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_min</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_max</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_max</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>responseheaders</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Transport: "</literal>
<literal type="string">"RTP/AVP/TCP;unicast;mode=receive;interleaved=%d-%d"</literal>
<literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_min</name></expr></argument>,
<argument><expr><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>localport</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Opening: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>localport</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>||</operator> <name>localport</name> <operator>&gt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>localport</name> <operator>&gt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_TRANSPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Listening on: %d"</literal></expr></argument>,
<argument><expr><call><name>ff_rtp_get_local_rtp_port</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_open_transport_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_TRANSPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>localport</name> <operator>=</operator> <call><name>ff_rtp_get_local_rtp_port</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>responseheaders</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Transport: "</literal>
<literal type="string">"RTP/AVP/UDP;unicast;mode=receive;source=%s;"</literal>
<literal type="string">"client_port=%d-%d;server_port=%d-%d\r\n"</literal></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client_port_min</name></expr></argument>,
<argument><expr><name><name>request</name><operator>.</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client_port_max</name></expr></argument>, <argument><expr><name>localport</name></expr></argument>,
<argument><expr><name>localport</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<while>while <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>responseheaders</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Session: %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>, <argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_PAUSED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_record</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>responseheaders</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"RECORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_sessionid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>responseheaders</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Session: %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>, <argument><expr><name>responseheaders</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_STREAMING</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>parse_command_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linelen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>urisize</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>methodsize</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>RTSPMethod</name></name> <modifier>*</modifier></type><name>methodcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linept</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>searchlinept</name></decl>;</decl_stmt>
<expr_stmt><expr><name>linept</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linept</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing method string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linept</name> <operator>-</operator> <name>line</name> <operator>&gt;</operator> <name>methodsize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Method string too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>linept</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>method</name><index>[<expr><name>linept</name> <operator>-</operator> <name>line</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>linept</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"ANNOUNCE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>ANNOUNCE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>OPTIONS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"RECORD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>RECORD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"SETUP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>SETUP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"PAUSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>PAUSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"TEARDOWN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>TEARDOWN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>methodcode</name> <operator>=</operator> <name>UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_IDLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>ANNOUNCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>OPTIONS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected command in Idle State %s\n"</literal></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_PAUSED</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>OPTIONS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>RECORD</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>SETUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected command in Paused State %s\n"</literal></expr></argument>,
<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>PAUSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>OPTIONS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>TEARDOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected command in Streaming State"</literal>
<literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected State [%d]\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>searchlinept</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>linept</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>searchlinept</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing message URI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>searchlinept</name> <operator>-</operator> <name>linept</name> <operator>&gt;</operator> <name>urisize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"uri string length exceeded buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>linept</name></expr></argument>, <argument><expr><name>searchlinept</name> <operator>-</operator> <name>linept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uri</name><index>[<expr><name>searchlinept</name> <operator>-</operator> <name>linept</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>auth</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ctl_host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ctl_path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ctl_auth</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctl_port</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctl_auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl_auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ctl_host</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl_host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl_port</name></expr></argument>, <argument><expr><name>ctl_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl_path</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>ctl_host</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Host %s differs from expected %s\n"</literal></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>ctl_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>ctl_path</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>methodcode</name> <operator>!=</operator> <name>SETUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"WARNING: Path %s differs from expected"</literal>
<literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ctl_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>methodcode</name> <operator>==</operator> <name>ANNOUNCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"Updating control URI to %s\n"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>linept</name> <operator>=</operator> <name>searchlinept</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strstart</name><argument_list>(<argument><expr><name>linept</name></expr></argument>, <argument><expr><literal type="string">"RTSP/1.0"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing protocol or version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PROTOCOL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_parse_streaming_commands</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rbuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>method</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rbuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>request</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>RTSPMethod</name></name></type> <name>methodcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_command_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>method</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>methodcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RTSP: Unexpected Command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>PAUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_PAUSED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>OPTIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>,
<argument><expr><literal type="string">"Public: ANNOUNCE, PAUSE, SETUP, TEARDOWN, "</literal>
<literal type="string">"RECORD\r\n"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>TEARDOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_send_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>RTSP_STATUS_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name><name>request</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_play</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"hello state=%d\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>nb_byes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtp_send_punch_packets</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtpctx</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtp_reset_packet_queue</name><argument_list>(<argument><expr><name>rtpctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>base_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>unwrapped_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_PAUSED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Range: npt=%"</literal><name>PRId64</name><literal type="string">".%03"</literal><name>PRId64</name><literal type="string">"-\r\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>/</operator> <name>AV_TIME_BASE</name></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>/</operator> <operator>(</operator><name>AV_TIME_BASE</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"PLAY"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name> <operator>&amp;&amp;</operator>
<name><name>reply</name><operator>-&gt;</operator><name>range_start</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtpctx</name> <operator>||</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>range_start_offset</name></name> <operator>=</operator>
<call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>range_start</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_STREAMING</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_pause</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"PAUSE"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_PAUSED</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_setup_input_streams</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Accept: application/sdp\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,
<argument><expr><literal type="string">"Require: com.real.retain-entity-for-setup\r\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"DESCRIBE"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"SDP:\n%s\n"</literal></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_sdp_parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_listen</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>proto</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>auth</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uri</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_port</name> <init>= <expr><name>RTSP_DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcpname</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lower_proto</name> <init>= <expr><literal type="string">"tcp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rbuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>method</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rbuflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>RTSPMethod</name></name></type> <name>methodcode</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"rtsps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lower_proto</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>default_port</name> <operator>=</operator> <name>RTSPS_DEFAULT_PORT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>default_port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>tcpname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lower_proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><literal type="string">"?listen&amp;listen_timeout=%d"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>initial_timeout</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>tcpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open RTSP for listening\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_command_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>rbuflen</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>method</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>methodcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RTSP: Unexpected Command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>ANNOUNCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_announce</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_PAUSED</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>OPTIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>RECORD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_record</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>methodcode</name> <operator>==</operator> <name>SETUP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_read_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TLS_PROTOCOL</name></expr></cpp:if>
<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"rtsps:"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>av_strstart</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"rtsp:"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>initial_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>|=</operator> <name>RTSP_FLAG_LISTEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_LISTEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rtsp_listen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
<expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>initial_pause</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rtsp_read_play</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_close_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_close_connections</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_tcp_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>prtsp_st</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"tcp_read_packet:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>redo</name>:</label>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_read_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"id=%d len=%d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buf_size</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name> <operator>&amp;&amp;</operator>
<call><name>ff_rdt_parse_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_min</name></name> <operator>&amp;&amp;</operator>
<name>id</name> <operator>&lt;=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<goto>goto <name>redo</name>;</goto>
<label><name>found</name>:</label>
<expr_stmt><expr><operator>*</operator><name>prtsp_st</name> <operator>=</operator> <name>rtsp_st</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resetup_tcp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_undo_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_rtsp_make_setup_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>RTSP_LOWER_TRANSPORT_TCP</name></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<label><name>retry</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVDiscard</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unsubscribe: %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SET_PARAMETER"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>,
<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>rule_nr</name></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup_cache</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_setup</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVDiscard</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Subscribe: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rule_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>r</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>r</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>!=</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rdt_subscribe_rule</name><argument_list>(
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rule_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rule_nr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_subscription</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SET_PARAMETER"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>,
<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtsp_read_play</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_fetch_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>packets</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name> <operator>&amp;&amp;</operator>
<name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"UDP timeout, retrying with TCP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtsp_read_pause</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TEARDOWN"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>resetup_tcp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rtsp_read_play</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>packets</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_LISTEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>last_cmd_time</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal> <operator>&gt;=</operator> <name><name>rt</name><operator>-&gt;</operator><name>timeout</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>rt</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>stale</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>||</operator>
<operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>!=</operator> <name>RTSP_SERVER_REAL</name> <operator>&amp;&amp;</operator>
<name><name>rt</name><operator>-&gt;</operator><name>get_parameter_supported</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd_async</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"GET_PARAMETER"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd_async</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>stale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>,
<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>RTSP_STATE_IDLE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>RTSP_STATE_STREAMING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rtsp_read_pause</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_SEEKING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rtsp_read_play</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RTSP_STATE_PAUSED</name></expr>:</case>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>rtsp_demuxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"RTSP demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_rtsp_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_rtsp_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtsp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RTSP input"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RTSPState</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>rtsp_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>rtsp_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>rtsp_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>rtsp_read_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>rtsp_read_seek</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>read_play</name> <operator>=</operator> <name>rtsp_read_play</name></expr>,
<expr><operator>.</operator><name>read_pause</name> <operator>=</operator> <name>rtsp_read_pause</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rtsp_demuxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
