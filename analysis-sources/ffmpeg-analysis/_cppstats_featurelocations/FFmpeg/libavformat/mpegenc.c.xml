<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mpegenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>PacketDesc</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unwritten_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PacketDesc</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>PacketDesc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>StreamInfo</name> <block>{
<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_buffer_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buffer_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>predecode_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>premux_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier><modifier>*</modifier></type><name>next_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lpcm_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lpcm_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytes_to_iframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>align_iframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>vobu_start_pts</name></decl>;</decl_stmt>
}</block></struct></type> <name>StreamInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MpegMuxContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>packet_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pack_header_freq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>system_header_freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>system_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>user_mux_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mux_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>audio_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_mpeg2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_vcd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_svcd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dvd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_scr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>vcd_padding_bitrate_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>vcd_padding_bytes_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preload</name></decl>;</decl_stmt>
}</block></struct></type> <name>MpegMuxContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mpeg1vcd_muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mpeg2dvd_muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mpeg2svcd_muxer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>AVOutputFormat</name></type> <name>ff_mpeg2vob_muxer</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_pack_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>PACK_START_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>timestamp</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_system_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>only_for_stream_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>private_stream_coded</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>SYSTEM_HEADER_START_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>&amp;&amp;</operator> <name>only_for_stream_id</name> <operator>==</operator> <name>VIDEO_ID</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>audio_bound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>only_for_stream_id</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>video_bound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 






<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>P_STD_max_video</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>P_STD_max_mpeg_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>P_STD_max_mpeg_PS1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0xbd</literal> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>&gt;</operator> <name>P_STD_max_mpeg_PS1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>P_STD_max_mpeg_PS1</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;=</operator> <literal type="number">0xc7</literal> <operator>&amp;&amp;</operator>
<name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>&gt;</operator> <name>P_STD_max_mpeg_audio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>P_STD_max_mpeg_audio</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator>
<name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>&gt;</operator> <name>P_STD_max_video</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>P_STD_max_video</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xb9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>P_STD_max_video</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>P_STD_max_mpeg_audio</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>P_STD_max_mpeg_audio</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xb8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>P_STD_max_mpeg_audio</name> <operator>/</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xbd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>P_STD_max_mpeg_PS1</name> <operator>/</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xbf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>private_stream_coded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>only_for_stream_id</name> <operator>||</operator>
<name>only_for_stream_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>private_stream_coded</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>private_stream_coded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>/</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_system_header_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buf_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>private_stream_coded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">18</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buf_index</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>private_stream_coded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>private_stream_coded</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>private_stream_coded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_index</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>buf_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mpeg_mux_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mpa_id</name></decl>, <decl><type ref="prev"/><name>mpv_id</name></decl>, <decl><type ref="prev"/><name>h264_id</name></decl>, <decl><type ref="prev"/><name>mps_id</name></decl>, <decl><type ref="prev"/><name>ac3_id</name></decl>, <decl><type ref="prev"/><name>dts_id</name></decl>, <decl><type ref="prev"/><name>lpcm_id</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_bitrate</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>=</operator> <operator>(</operator><name>CONFIG_MPEG1VCD_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg1vcd_muxer</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_svcd</name></name> <operator>=</operator> <operator>(</operator><name>CONFIG_MPEG2SVCD_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg2svcd_muxer</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>CONFIG_MPEG2VOB_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg2vob_muxer</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>CONFIG_MPEG2DVD_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg2dvd_muxer</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>CONFIG_MPEG2SVCD_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg2svcd_muxer</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name> <operator>=</operator> <operator>(</operator><name>CONFIG_MPEG2DVD_MUXER</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpeg2dvd_muxer</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet size %d\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>=</operator> <name>AV_TIME_BASE</name><operator>*</operator><literal type="number">7</literal><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bytes_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bitrate_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>audio_bound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>video_bound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mpa_id</name> <operator>=</operator> <name>AUDIO_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ac3_id</name> <operator>=</operator> <name>AC3_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dts_id</name> <operator>=</operator> <name>DTS_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mpv_id</name> <operator>=</operator> <name>VIDEO_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h264_id</name> <operator>=</operator> <name>H264_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mps_id</name> <operator>=</operator> <name>SUB_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpcm_id</name> <operator>=</operator> <name>LPCM_ID</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StreamInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DTS</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S16BE</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_DVD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%s in MPEG-1 system streams is not widely supported, "</literal>
<literal type="string">"consider using the vob or the dvd muxer "</literal>
<literal type="string">"to force a MPEG-2 program stream.\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>ac3_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DTS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>dts_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S16BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>lpcm_id</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>lpcm_freq_tab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sampling rate for PCM stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Allowed sampling rates:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sr</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>lpcm_freq_tab</name><index>[<expr><name>sr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"At most 8 channels allowed for LPCM streams.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0c</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_align</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_DVD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">48000</literal></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">96000</literal></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">44100</literal></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">32000</literal></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample rate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0c</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>freq</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>lpcm_id</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_align</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Support for muxing audio codec %s not implemented.\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MP1</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MP2</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported audio codec. Must be one of mp1, mp2, mp3, 16-bit pcm_dvd, pcm_s16be, ac3 or dts.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>mpa_id</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>audio_bound</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>h264_id</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>mpv_id</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <operator>(</operator><name>AVCPBProperties</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>props</name> <operator>&amp;&amp;</operator> <name><name>props</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>+</operator> <name><name>props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"VBV buffer size not set, using default size of 230KB\n"</literal>
<literal type="string">"If you want the mpeg file to be compliant to some specification\n"</literal>
<literal type="string">"Like DVD, VCD or others, make sure you set the correct buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>=</operator> <literal type="number">230</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8191</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"buffer size %d, too large\n"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">8191</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>video_bound</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>mps_id</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid media type %s for output stream #%d\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_bitrate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>video_bitrate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_rate</name></decl>;</decl_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>(</operator><name>StreamInfo</name> <operator>*</operator><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <operator>(</operator><name>AVCPBProperties</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>props</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_rate</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>max_bitrate</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_rate</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>codec_rate</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>+=</operator> <name>codec_rate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>audio_bitrate</name> <operator>+=</operator> <name>codec_rate</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>video_bitrate</name> <operator>+=</operator> <name>codec_rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_mux_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>user_mux_rate</name></name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>bitrate</name> <operator>+=</operator> <name>bitrate</name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitrate</name> <operator>+=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>=</operator> <operator>(</operator><name>bitrate</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"mux rate %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>overhead_rate</name></decl>;</decl_stmt>



















<expr_stmt><expr><name>overhead_rate</name> <operator>=</operator> <name>audio_bitrate</name> <operator>*</operator> <literal type="number">2294LL</literal> <operator>*</operator> <operator>(</operator><literal type="number">2324</literal> <operator>-</operator> <literal type="number">2279</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>overhead_rate</name> <operator>+=</operator> <name>video_bitrate</name> <operator>*</operator> <literal type="number">2279LL</literal> <operator>*</operator> <operator>(</operator><literal type="number">2324</literal> <operator>-</operator> <literal type="number">2294</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bitrate_num</name></name> <operator>=</operator> <operator>(</operator><literal type="number">2324LL</literal> <operator>*</operator> <literal type="number">75</literal> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>bitrate</name><operator>)</operator> <operator>*</operator> <literal type="number">2279</literal> <operator>*</operator> <literal type="number">2294</literal> <operator>-</operator> <name>overhead_rate</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCD_PADDING_BITRATE_DEN</name></cpp:macro> <cpp:value>(2279 * 2294)</cpp:value></cpp:define>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>bitrate</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system_header_freq</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>*</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system_header_freq</name></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system_header_freq</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>system_header_size</name></name> <operator>=</operator> <call><name>get_system_header_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_timestamp</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>id</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>timestamp</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>get_vcd_padding_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bitrate_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>full_pad_bytes</name></decl>;</decl_stmt>


<expr_stmt><expr><name>full_pad_bytes</name> <operator>=</operator>
<call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bitrate_num</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument>, <argument><expr><literal type="number">90000LL</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>VCD_PADDING_BITRATE_DEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_bytes</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>full_pad_bytes</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bytes_written</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pad_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>pad_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pad_bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>put_padding_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>packet_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>PADDING_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>packet_bytes</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_bytes</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>packet_bytes</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>packet_bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_nb_frames</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>pkt_desc</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt_desc</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>unwritten_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_frames</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>unwritten_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pkt_desc</name> <operator>=</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>nb_frames</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>flush_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>scr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trailer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>payload_size</name></decl>, <decl><type ref="prev"/><name>startcode</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>stuffing_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>header_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zero_trail_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_packet_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pes_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>general_pack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"packet ID=%2x PTS=%0.3f\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>pts</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>pack_header_freq</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>!=</operator> <name>scr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_pack_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>=</operator> <name>scr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_system_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>align_iframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>PES_bytes_to_fill</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>size</name> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>pts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>PES_bytes_to_fill</name> <operator>-=</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>PES_bytes_to_fill</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_to_iframe</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_system_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>buf_ptr</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x03d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">979</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x03fa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1017</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>align_iframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <literal type="number">90000LL</literal> <operator>/</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>*</operator> <literal type="number">50LL</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_pack_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>=</operator> <name>scr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_to_iframe</name></name> <operator>&lt;</operator> <name>PES_bytes_to_fill</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad_packet_bytes</name> <operator>=</operator> <name>PES_bytes_to_fill</name> <operator>-</operator>
<name><name>stream</name><operator>-&gt;</operator><name>bytes_to_iframe</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>system_header_freq</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_system_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>buf_ptr</name> <operator>-</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>id</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>zero_trail_bytes</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_svcd</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_svcd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>general_pack</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pad_packet_bytes</name> <operator>=</operator> <name>packet_size</name> <operator>-</operator> <name>zero_trail_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>packet_size</name> <operator>-=</operator> <name>pad_packet_bytes</name> <operator>+</operator> <name>zero_trail_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packet_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packet_size</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>header_len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>header_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>header_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>pts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_len</name> <operator>+=</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>header_len</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>header_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>payload_size</name> <operator>=</operator> <name>packet_size</name> <operator>-</operator> <name>header_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startcode</name> <operator>=</operator> <name>PRIVATE_STREAM_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>payload_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>payload_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>startcode</name> <operator>=</operator> <literal type="number">0x100</literal> <operator>+</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>stuffing_size</name> <operator>=</operator> <name>payload_size</name> <operator>-</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>payload_size</name> <operator>&lt;=</operator> <name>trailer_size</name> <operator>&amp;&amp;</operator> <name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>timestamp_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>pts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp_len</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>timestamp_len</name> <operator>+=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator>
<name>dts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>header_len</name> <operator>-=</operator> <name>timestamp_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>align_iframe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad_packet_bytes</name> <operator>+=</operator> <name>timestamp_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_size</name> <operator>-=</operator> <name>timestamp_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <name>timestamp_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>stuffing_size</name> <operator>+=</operator> <name>timestamp_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>payload_size</name> <operator>&gt;</operator> <name>trailer_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stuffing_size</name> <operator>+=</operator> <name>payload_size</name> <operator>-</operator> <name>trailer_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pad_packet_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pad_packet_bytes</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_size</name> <operator>+=</operator> <name>pad_packet_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <name>pad_packet_bytes</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>stuffing_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stuffing_size</name> <operator>=</operator> <name>pad_packet_bytes</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stuffing_size</name> <operator>+=</operator> <name>pad_packet_bytes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>pad_packet_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stuffing_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stuffing_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_1</name> <operator>&amp;&amp;</operator> <name>id</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>payload_size</name> <operator>&lt;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stuffing_size</name> <operator>+=</operator> <name>payload_size</name> <operator>%</operator> <name><name>stream</name><operator>-&gt;</operator><name>lpcm_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stuffing_size</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>pad_packet_bytes</name> <operator>+=</operator> <name>stuffing_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_size</name> <operator>-=</operator> <name>stuffing_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_size</name> <operator>-=</operator> <name>stuffing_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stuffing_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>get_nb_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>payload_size</name> <operator>-</operator> <name>stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stuffing_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pes_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pes_flags</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>pts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pes_flags</name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pes_flags</name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pes_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>header_len</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pes_flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>put_timestamp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>pes_flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x03</literal></expr> </then><else>: <expr><literal type="number">0x02</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pes_flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>put_timestamp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pes_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x4000</literal> <operator>|</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>/</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x6000</literal> <operator>|</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>pts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_timestamp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_timestamp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_timestamp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_mpeg2</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stuffing_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>lpcm_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>trailer_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>payload_size</name> <operator>-</operator> <name>stuffing_size</name> <operator>&lt;=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,
<argument><expr><name>payload_size</name> <operator>-</operator> <name>stuffing_size</name></expr></argument>,
<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><name>avio_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_to_iframe</name></name> <operator>-=</operator> <name>payload_size</name> <operator>-</operator> <name>stuffing_size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>payload_size</name> <operator>=</operator>
<name>stuffing_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pad_packet_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_padding_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pad_packet_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>zero_trail_bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name><operator>++</operator></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>general_pack</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>packet_number</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>payload_size</name> <operator>-</operator> <name>stuffing_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_vcd_padding_sector</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vcd_padding_bytes_written</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_decoded_packets</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>scr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>pkt_desc</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pkt_desc</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>scr</name> <operator>&gt;</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>dts</name></name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>&lt;</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator>
<name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"buffer underflow st=%d bufi=%d size=%d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name></expr></argument>, <argument><expr><name><name>pkt_desc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-=</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name> <operator>=</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>output_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>avail_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>es_size</name></decl>, <decl><type ref="prev"/><name>trailer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_constraints</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>timestamp_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>max_delay</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_delay</name></name></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>avail_data</name> <init>= <expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>space</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rel_space</name> <init>= <expr><literal type="number">1024LL</literal> <operator>*</operator> <name>space</name> <operator>/</operator> <name><name>stream</name><operator>-&gt;</operator><name>max_buffer_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>next_pkt</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&gt;</operator> <name>avail_data</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>flush</name>
<operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>avail_data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>avail_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>space</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_constraints</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_pkt</name> <operator>&amp;&amp;</operator> <name><name>next_pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name>scr</name> <operator>&gt;</operator> <name>max_delay</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_delay</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name>
<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rel_space</name> <operator>+=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rel_space</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>rel_space</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avail_space</name> <operator>=</operator> <name>space</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>best_dts</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_premux</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>pkt_desc</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt_desc</name> <operator>&amp;&amp;</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>dts</name></name> <operator>&lt;</operator> <name>best_dts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_dts</name> <operator>=</operator> <name><name>pkt_desc</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>has_premux</name> <operator>|=</operator> <operator>!</operator><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_dts</name> <operator>&lt;</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"bumping scr, scr:%f, dts:%f\n"</literal></expr></argument>,
<argument><expr><name>scr</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>, <argument><expr><name>best_dts</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scr</name> <operator>&gt;=</operator> <name>best_dts</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_constraints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"packet too large, ignoring buffer limits to mux it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_constraints</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>best_dts</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>remove_decoded_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_premux</name> <operator>&amp;&amp;</operator> <name>flush</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"delay too large, ignoring ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_constraints</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>best_i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>best_i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>avail_space</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>||</operator> <name>ignore_constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp_packet</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>timestamp_packet</name><operator>-&gt;</operator><name>unwritten_size</name></name> <operator>==</operator> <name><name>timestamp_packet</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trailer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>trailer_size</name> <operator>=</operator> <name><name>timestamp_packet</name><operator>-&gt;</operator><name>unwritten_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>timestamp_packet</name> <operator>=</operator> <name><name>timestamp_packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp_packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"dts:%f pts:%f scr:%f stream:%d\n"</literal></expr></argument>,
<argument><expr><name><name>timestamp_packet</name><operator>-&gt;</operator><name>dts</name></name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>,
<argument><expr><name><name>timestamp_packet</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>,
<argument><expr><name>scr</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>, <argument><expr><name>best_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>es_size</name> <operator>=</operator> <call><name>flush_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>best_i</name></expr></argument>, <argument><expr><name><name>timestamp_packet</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>timestamp_packet</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>scr</name></expr></argument>, <argument><expr><name>trailer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>trailer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>es_size</name> <operator>=</operator> <call><name>flush_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>best_i</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>scr</name></expr></argument>,
<argument><expr><name>trailer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_vcd</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>vcd_pad_bytes</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>vcd_pad_bytes</name> <operator>=</operator> <call><name>get_vcd_padding_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_vcd_padding_sector</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <literal type="number">90000LL</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>*</operator> <literal type="number">50LL</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>+=</operator> <name>es_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <literal type="number">90000LL</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mux_rate</name></name> <operator>*</operator> <literal type="number">50LL</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name> <operator>&amp;&amp;</operator>
<name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name><operator>-&gt;</operator><name>unwritten_size</name></name> <operator>&lt;=</operator> <name>es_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>es_size</name> <operator>-=</operator> <name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name><operator>-&gt;</operator><name>unwritten_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>es_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name><operator>-&gt;</operator><name>unwritten_size</name></name> <operator>-=</operator> <name>es_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>remove_decoded_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpeg_mux_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegMuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PacketDesc</name> <modifier>*</modifier></type><name>pkt_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>preload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_iframe</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>preload</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>preload</name></name></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <operator>(</operator><name>dts</name> <operator>&lt;</operator> <name>preload</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preload</name></name> <operator>+=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><operator>-</operator><name>dts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name> <operator>=</operator> <name>dts</name> <operator>-</operator> <name>preload</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>preload</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>preload</name></name></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"First SCR: %"</literal><name>PRId64</name><literal type="string">" First DTS: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_scr</name></name></expr></argument>, <argument><expr><name>dts</name> <operator>+</operator> <name>preload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dts</name> <operator>+=</operator> <name>preload</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pts</name> <operator>+=</operator> <name>preload</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"dts:%f pts:%f flags:%d stream:%d nopts:%d\n"</literal></expr></argument>,
<argument><expr><name>dts</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>, <argument><expr><name>pts</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>next_packet</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>premux_packet</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>stream</name><operator>-&gt;</operator><name>next_packet</name></name> <operator>=</operator>
<name>pkt_desc</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PacketDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt_desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt_desc</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt_desc</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_DVD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet size %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt_desc</name><operator>-&gt;</operator><name>unwritten_size</name></name> <operator>=</operator>
<name><name>pkt_desc</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>predecode_packet</name></name> <operator>=</operator> <name>pkt_desc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>next_packet</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pkt_desc</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_dvd</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_iframe</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_number</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>pts</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>vobu_start_pts</name></name> <operator>&gt;=</operator> <literal type="number">36000</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_to_iframe</name></name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>align_iframe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>vobu_start_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>output_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpeg_mux_end</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>output_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>






<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpeg_mux_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StreamInfo</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MpegMuxContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"muxrate"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_mux_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <literal type="number">50</literal><operator>)</operator></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"preload"</literal></expr>, <expr><literal type="string">"Initial demux-decode delay in microseconds."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>preload</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">500000</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEGENC_CLASS</name><parameter_list>(<parameter><type><name>flavor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass flavor ##_class = { .class_name = #flavor " muxer", .item_name = av_default_item_name, .version = LIBAVUTIL_VERSION_INT, .option = options, };</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1SYSTEM_MUXER</name></expr></cpp:if>
<macro><name>MPEGENC_CLASS</name><argument_list>(<argument>mpeg</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mpeg1system_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-1 Systems / MPEG program stream"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mpeg"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mpg,mpeg"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mpeg_mux_init</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mpeg_mux_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mpeg_mux_end</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mpeg_mux_deinit</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mpeg_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG1VCD_MUXER</name></expr></cpp:if>
<macro><name>MPEGENC_CLASS</name><argument_list>(<argument>vcd</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mpeg1vcd_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vcd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-1 Systems / MPEG program stream (VCD)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mpeg"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mpeg_mux_init</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mpeg_mux_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mpeg_mux_end</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mpeg_mux_deinit</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vcd_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2VOB_MUXER</name></expr></cpp:if>
<macro><name>MPEGENC_CLASS</name><argument_list>(<argument>vob</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mpeg2vob_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vob"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-2 PS (VOB)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mpeg"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"vob"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mpeg_mux_init</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mpeg_mux_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mpeg_mux_end</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mpeg_mux_deinit</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vob_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2SVCD_MUXER</name></expr></cpp:if>
<macro><name>MPEGENC_CLASS</name><argument_list>(<argument>svcd</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mpeg2svcd_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"svcd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-2 PS (SVCD)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mpeg"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"vob"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mpeg_mux_init</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mpeg_mux_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mpeg_mux_end</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mpeg_mux_deinit</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>svcd_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG2DVD_MUXER</name></expr></cpp:if>
<macro><name>MPEGENC_CLASS</name><argument_list>(<argument>dvd</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mpeg2dvd_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-2 PS (DVD VOB)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mpeg"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dvd"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mpeg_mux_init</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mpeg_mux_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mpeg_mux_end</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mpeg_mux_deinit</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dvd_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
