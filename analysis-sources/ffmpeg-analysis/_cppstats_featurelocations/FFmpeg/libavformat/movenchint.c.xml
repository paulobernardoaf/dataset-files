<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\movenchint.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"movenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpenc_chain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_mov_init_hinting</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>src_track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>src_st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name> <operator>=</operator> <name>src_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtp_chain_mux_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>rtp_ctx</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>src_st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RTP_MAX_PACKET_SIZE</name></expr></argument>, <argument><expr><name>src_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>rtp_ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>src_track</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unable to initialize hinting of stream %d\n"</literal></expr></argument>, <argument><expr><name>src_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <literal type="number">90000</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>sample_queue_pop</name><parameter_list>(<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>own_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HintSample</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>sample_queue_free</name><parameter_list>(<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>own_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>sample_queue_push</name><parameter_list>(<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name> <operator>||</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>queue</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HintSample</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HintSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samples</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name><operator>.</operator><name>sample_number</name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name><operator>.</operator><name>own_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>sample_queue_retain</name><parameter_list>(<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HintSample</name> <modifier>*</modifier></type><name>sample</name> <init>= <expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sample</name><operator>-&gt;</operator><name>own_data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name><name>sample</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>samples</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HintSample</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sample</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>own_data</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type> <name>match_segments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_h_offset_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_n_offset_ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_len_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h_pos</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h_pos</name> <operator>&lt;</operator> <name>h_len</name></expr>;</condition> <incr><expr><name>h_pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_h_pos</name></decl>, <decl><type ref="prev"/><name>match_n_pos</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>h_pos</name> <operator>+</operator> <name>match_len</name> <operator>&lt;</operator> <name>h_len</name> <operator>&amp;&amp;</operator> <name>n_pos</name> <operator>+</operator> <name>match_len</name> <operator>&lt;</operator> <name>n_len</name> <operator>&amp;&amp;</operator>
<name><name>needle</name><index>[<expr><name>n_pos</name> <operator>+</operator> <name>match_len</name></expr>]</index></name> <operator>==</operator> <name><name>haystack</name><index>[<expr><name>h_pos</name> <operator>+</operator> <name>match_len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>match_len</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>



<expr_stmt><expr><name>match_h_pos</name> <operator>=</operator> <name>h_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match_n_pos</name> <operator>=</operator> <name>n_pos</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>match_n_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>match_h_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>needle</name><index>[<expr><name>match_n_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>haystack</name><index>[<expr><name>match_h_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match_n_pos</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>match_h_pos</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>match_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>match_len</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>match_h_offset_ptr</name> <operator>=</operator> <name>match_h_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>match_n_offset_ptr</name> <operator>=</operator> <name>match_n_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>match_len_ptr</name> <operator>=</operator> <name>match_len</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>int</name></type> <name>find_sample_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_sample</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>match_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HintSample</name> <modifier>*</modifier></type><name>sample</name> <init>= <expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sample</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_segments</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>sample</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
<argument><expr><name><name>sample</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>match_offset</name></expr></argument>, <argument><expr><name>match_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match_sample</name> <operator>=</operator> <name><name>sample</name><operator>-&gt;</operator><name>sample_number</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>*</operator><name>match_offset</name> <operator>+</operator> <operator>*</operator><name>match_len</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;=</operator> <name><name>sample</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sample_queue_pop</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>sample</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>sample</name><operator>-&gt;</operator><name>size</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>sample_queue_pop</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_immediate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>entries</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_match</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_sample</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>match_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>match_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>match_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>match_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>entries</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>describe_payload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>,
<parameter><decl><type><name>HintSampleQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>match_sample</name></decl>, <decl><type ref="prev"/><name>match_offset</name></decl>, <decl><type ref="prev"/><name>match_len</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>find_sample_match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_sample</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>match_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>output_immediate</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_match</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>match_sample</name></expr></argument>, <argument><expr><name>match_offset</name></expr></argument>, <argument><expr><name>match_len</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>match_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>match_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>output_immediate</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>write_hint_packets</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>curpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>count_pos</name></decl>, <decl><type ref="prev"/><name>entries_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>entries</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>packet_len</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ts_diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <name>size</name> <operator>||</operator> <name>packet_len</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>packet_len</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>&gt;</operator> <name><name>trk</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>prev_rtp_ts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>prev_rtp_ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ts_diff</name> <operator>=</operator> <name>ts</name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>prev_rtp_ts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts_diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cur_rtp_ts_unwrapped</name></name> <operator>+=</operator> <name>ts_diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>prev_rtp_ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ts_diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cur_rtp_ts_unwrapped</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ts_diff</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>entries_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>ts_diff</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"rtpo"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ts_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>describe_payload</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entries</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>sample_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>packet_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>packet_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>entries_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>count_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mov_add_hinted_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>track_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sample_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>track_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>rtp_ctx</name> <init>= <expr><name><name>trk</name><operator>-&gt;</operator><name>rtp_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>hintbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>hint_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtp_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sample_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>sample_queue</name></name></expr></argument>, <argument><expr><name>sample_data</name></expr></argument>, <argument><expr><name>sample_size</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sample_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>sample_queue</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>ff_write_chained</name><argument_list>(<argument><expr><name>rtp_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>rtp_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_dyn_packet_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,
<argument><expr><name>RTP_MAX_PACKET_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hintbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hint_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>write_hint_packets</name><argument_list>(<argument><expr><name>hintbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>trk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hint_pkt</name><operator>.</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hint_pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>hintbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint_pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint_pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>hint_pkt</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hint_pkt</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name>track_index</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hint_pkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_mov_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sample_queue_retain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>sample_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mov_close_hinting</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>rtp_ctx</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>rtp_ctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sample_queue_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>sample_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtp_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtp_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name>rtp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name>rtp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
