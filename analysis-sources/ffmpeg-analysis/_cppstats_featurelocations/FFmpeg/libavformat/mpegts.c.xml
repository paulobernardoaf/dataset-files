<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mpegts.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/opus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isom.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RESYNC_SIZE</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PES_PAYLOAD</name></cpp:macro> <cpp:value>200 * 1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MP4_DESCR_COUNT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_UNLIKELY</name><parameter_list>(<parameter><type><name>modulus</name></type></parameter>, <parameter><type><name>dividend</name></type></parameter>, <parameter><type><name>divisor</name></type></parameter>, <parameter><type><name>prev_dividend</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((prev_dividend) == 0 || (dividend) - (prev_dividend) != (divisor)) (modulus) = (dividend) % (divisor); (prev_dividend) = (dividend); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_PACKET_MAX_BUF</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_PACKET_MARGIN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<enum>enum <name>MpegTSFilterType</name> <block>{
<decl><name>MPEGTS_PES</name></decl>,
<decl><name>MPEGTS_SECTION</name></decl>,
<decl><name>MPEGTS_PCR</name></decl>,
}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>MpegTSFilter</name></name></type> <name>MpegTSFilter</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> <name>PESCallback</name> <parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>MpegTSPESFilter</name> <block>{
<decl_stmt><decl><type><name>PESCallback</name> <modifier>*</modifier></type><name>pes_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>MpegTSPESFilter</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>SectionCallback</name> <parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>SetServiceCallback</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>MpegTSSectionFilter</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>section_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>section_h_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>last_crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>section_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>check_crc</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>end_of_section_reached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionCallback</name> <modifier>*</modifier></type><name>section_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>MpegTSSectionFilter</name>;</typedef>

<struct>struct <name>MpegTSFilter</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>es_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_cc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pcr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>MpegTSFilterType</name></name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>MpegTSPESFilter</name></type> <name>pes_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name></type> <name>section_filter</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PIDS_PER_PROGRAM</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<struct>struct <name>Program</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_pids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>pids</name><index>[<expr><name>MAX_PIDS_PER_PROGRAM</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pmt_found</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>MpegTSContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raw_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>size_stat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_stat_count</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_STAT_THRESHOLD</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos47_full</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>auto_guess</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mpeg2ts_compute_pcr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>fix_teletext_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pcr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pcr_incr</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int</name></type> <name>stop_parse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_unknown_pmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scan_all_pmts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>resync_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merge_pmt_versions</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_prg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type><name>prg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>crc_validity</name><index>[<expr><name>NB_PID_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name><name>pids</name><index>[<expr><name>NB_PID_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>epg_stream</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPEGTS_OPTIONS</name></cpp:macro> <cpp:value>{ "resync_size", "set size limit for looking up a new synchronization", offsetof(MpegTSContext, resync_size), AV_OPT_TYPE_INT, { .i64 = MAX_RESYNC_SIZE}, 0, INT_MAX, AV_OPT_FLAG_DECODING_PARAM }</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MPEGTS_OPTIONS</name></expr>,
<expr><block>{<expr><literal type="string">"fix_teletext_pts"</literal></expr>, <expr><literal type="string">"try to fix pts values of dvb teletext streams"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>fix_teletext_pts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"ts_packetsize"</literal></expr>, <expr><literal type="string">"output option carrying the raw packet size"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>raw_packet_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_EXPORT</name> <operator>|</operator> <name>AV_OPT_FLAG_READONLY</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"scan_all_pmts"</literal></expr>, <expr><literal type="string">"scan and combine all PMTs"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>scan_all_pmts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"skip_unknown_pmt"</literal></expr>, <expr><literal type="string">"skip PMTs for programs not advertised in the PAT"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>skip_unknown_pmt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"merge_pmt_versions"</literal></expr>, <expr><literal type="string">"re-use streams when PMT's version/pids change"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>merge_pmt_versions</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"skip_changes"</literal></expr>, <expr><literal type="string">"skip changing / adding streams / programs"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>skip_changes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"skip_clear"</literal></expr>, <expr><literal type="string">"skip clearing programs"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>skip_clear</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mpegts_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"mpegts demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>raw_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MPEGTS_OPTIONS</name></expr>,
<expr><block>{ <expr><literal type="string">"compute_pcr"</literal></expr>, <expr><literal type="string">"compute exact PCR for each transport stream packet"</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>mpeg2ts_compute_pcr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ts_packetsize"</literal></expr>, <expr><literal type="string">"output option carrying the raw packet size"</literal></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>, <argument><expr><name>raw_packet_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_FLAG_DECODING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_EXPORT</name> <operator>|</operator> <name>AV_OPT_FLAG_READONLY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mpegtsraw_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"mpegtsraw demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>raw_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>



<enum>enum <name>MpegTSState</name> <block>{
<decl><name>MPEGTS_HEADER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MPEGTS_PESHEADER</name></decl>,
<decl><name>MPEGTS_PESHEADER_FILL</name></decl>,
<decl><name>MPEGTS_PAYLOAD</name></decl>,
<decl><name>MPEGTS_SKIP</name></decl>,
}</block>;</enum>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PES_START_SIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PES_HEADER_SIZE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PES_HEADER_SIZE</name></cpp:macro> <cpp:value>(9 + 255)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>PESContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_pid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>sub_st</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>MpegTSState</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pes_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extended_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <name>dts</name>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_packet_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><name>MAX_PES_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SLConfigDescr</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merged_st</name></decl>;</decl_stmt>
}</block></struct></type> <name>PESContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVInputFormat</name></type> <name>ff_mpegts_demuxer</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type> <name>get_program</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>programid</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_avprogram</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>prg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name>programid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prg</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>prg</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_program</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_avprogram</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>programid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>programid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_pids</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pmt_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_programs</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pat_entry</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>programid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_pids</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pmt_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pid_to_pmt</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_program</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>programid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nb_pids</name></name> <operator>&gt;=</operator> <name>MAX_PIDS_PER_PROGRAM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_pids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nb_pids</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_pmt_found</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>get_program</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>programid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pmt_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_av_program_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>program</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>programid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_pcr_pid</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>pcr_pid</name></name></expr></init></decl>,
<decl><type ref="prev"/><name>old_version</name> <init>= <expr><name><name>program</name><operator>-&gt;</operator><name>pmt_version</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>pcr_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>pmt_version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_version</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>old_version</name> <operator>!=</operator> <name>version</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"detected PMT change (program=%d, version=%d/%d, pcr_pid=0x%x/0x%x)\n"</literal></expr></argument>,
<argument><expr><name>programid</name></expr></argument>, <argument><expr><name>old_version</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>old_pcr_pid</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>discard_pid</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>discarded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Program</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_pids</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>discard</name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>discarded</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>used</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><operator>!</operator><name>used</name> <operator>&amp;&amp;</operator> <name>discarded</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>write_section_data</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>tss1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tss</name> <init>= <expr><operator>&amp;</operator><name><name>tss1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur_section_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tss</name><operator>-&gt;</operator><name>section_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>end_of_section_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>end_of_section_reached</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAX_SECTION_SIZE</name> <operator>-</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tss</name><operator>-&gt;</operator><name>section_buf</name></name> <operator>+</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_section_buf</name> <operator>=</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur_section_buf</name> <operator>-</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_buf</name></name> <operator>&lt;</operator> <name>MAX_SECTION_SIZE</name> <operator>&amp;&amp;</operator> <name><name>cur_section_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name> <operator>-</operator> <name>offset</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>cur_section_buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_SECTION_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>tss</name><operator>-&gt;</operator><name>section_index</name></name> <operator>&gt;=</operator> <name>offset</name> <operator>+</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>crc_valid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>end_of_section_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>check_crc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>crc_valid</name> <operator>=</operator> <operator>!</operator><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cur_section_buf</name></expr></argument>, <argument><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>cur_section_buf</name> <operator>+</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>crc_valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>crc_validity</name><index>[ <expr><name><name>tss1</name><operator>-&gt;</operator><name>pid</name></name></expr> ]</index></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>crc_validity</name><index>[ <expr><name><name>tss1</name><operator>-&gt;</operator><name>pid</name></name></expr> ]</index></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>crc_validity</name><index>[ <expr><name><name>tss1</name><operator>-&gt;</operator><name>pid</name></name></expr> ]</index></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>crc_valid</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>crc_valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>tss</name><operator>-&gt;</operator><name>section_cb</name></name><argument_list>(<argument><expr><name>tss1</name></expr></argument>, <argument><expr><name>cur_section_buf</name></expr></argument>, <argument><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>crc_valid</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>last_ver</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_section_buf</name> <operator>+=</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>section_h_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>end_of_section_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MpegTSFilter</name> <modifier>*</modifier></type><name>mpegts_open_filter</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>MpegTSFilterType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Filter: pid=0x%x type=%d\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;=</operator> <name>NB_PID_MAX</name> <operator>||</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegTSFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>es_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>last_cc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>last_pcr</name></name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MpegTSFilter</name> <modifier>*</modifier></type><name>mpegts_open_section_filter</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name>SectionCallback</name> <modifier>*</modifier></type><name>section_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>check_crc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>filter</name> <operator>=</operator> <call><name>mpegts_open_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>MPEGTS_SECTION</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>section_cb</name></name> <operator>=</operator> <name>section_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>section_buf</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>MAX_SECTION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>check_crc</name></name> <operator>=</operator> <name>check_crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>-&gt;</operator><name>last_ver</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sec</name><operator>-&gt;</operator><name>section_buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MpegTSFilter</name> <modifier>*</modifier></type><name>mpegts_open_pes_filter</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name>PESCallback</name> <modifier>*</modifier></type><name>pes_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSPESFilter</name> <modifier>*</modifier></type><name>pes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>filter</name> <operator>=</operator> <call><name>mpegts_open_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>MPEGTS_PES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pes</name> <operator>=</operator> <operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pes_cb</name></name> <operator>=</operator> <name>pes_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>
<return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MpegTSFilter</name> <modifier>*</modifier></type><name>mpegts_open_pcr_filter</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mpegts_open_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>MPEGTS_PCR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpegts_close_filter</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_SECTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>section_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>||</operator> <name><name>pes</name><operator>-&gt;</operator><name>merged_st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>analyze</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packet_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>probe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>stat</name><index>[<expr><name>TS_MAX_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat_all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>packet_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asc</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>probe</name> <operator>||</operator> <name>pid</name> <operator>==</operator> <literal type="number">0x1FFF</literal> <operator>||</operator> <name>asc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>%</operator> <name>packet_size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stat</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>stat_all</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stat</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name><name>stat</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>best_score</name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>stat_all</name> <operator>-</operator> <literal type="number">10</literal><operator>*</operator><name>best_score</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>get_packet_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>fec_score</name></decl>, <decl><type ref="prev"/><name>dvhs_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>PROBE_PACKET_MAX_BUF</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>PROBE_PACKET_MAX_BUF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read_partial</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><name>PROBE_PACKET_MAX_BUF</name> <operator>-</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>analyze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dvhs_score</name> <operator>=</operator> <call><name>analyze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>TS_DVHS_PACKET_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fec_score</name> <operator>=</operator> <call><name>analyze</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>TS_FEC_PACKET_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Probe: %d, score: %d, dvhs_score: %d, fec_score: %d \n"</literal></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>dvhs_score</name></expr></argument>, <argument><expr><name>fec_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>margin</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>fec_score</name></expr></argument>, <argument><expr><name>dvhs_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>PROBE_PACKET_MAX_BUF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>margin</name> <operator>+=</operator> <name>PROBE_PACKET_MARGIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>margin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TS_PACKET_SIZE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dvhs_score</name> <operator>&gt;</operator> <name>margin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TS_DVHS_PACKET_SIZE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fec_score</name> <operator>&gt;</operator> <name>margin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TS_FEC_PACKET_SIZE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SectionHeader</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sec_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>last_sec_num</name></decl>;</decl_stmt>
}</block></struct></type> <name>SectionHeader</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_identical</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SectionHeader</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tssf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name><name>tssf</name><operator>-&gt;</operator><name>last_ver</name></name> <operator>&amp;&amp;</operator> <name><name>tssf</name><operator>-&gt;</operator><name>last_crc</name></name> <operator>==</operator> <name><name>tssf</name><operator>-&gt;</operator><name>crc</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tssf</name><operator>-&gt;</operator><name>last_ver</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tssf</name><operator>-&gt;</operator><name>last_crc</name></name> <operator>=</operator> <name><name>tssf</name><operator>-&gt;</operator><name>crc</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&gt;=</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getstr8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ICONV</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>encodings</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"ISO6937"</literal></expr>, <expr><literal type="string">"ISO-8859-5"</literal></expr>, <expr><literal type="string">"ISO-8859-6"</literal></expr>, <expr><literal type="string">"ISO-8859-7"</literal></expr>,
<expr><literal type="string">"ISO-8859-8"</literal></expr>, <expr><literal type="string">"ISO-8859-9"</literal></expr>, <expr><literal type="string">"ISO-8859-10"</literal></expr>, <expr><literal type="string">"ISO-8859-11"</literal></expr>,
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"ISO-8859-13"</literal></expr>, <expr><literal type="string">"ISO-8859-14"</literal></expr>, <expr><literal type="string">"ISO-8859-15"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"UCS-2BE"</literal></expr>, <expr><literal type="string">"KSC_5601"</literal></expr>, <expr><literal type="string">"GB2312"</literal></expr>, <expr><literal type="string">"UCS-2BE"</literal></expr>, <expr><literal type="string">"UTF-8"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>inlen</name> <init>= <expr><name>len</name></expr></init></decl>, <decl><type ref="prev"/><name>outlen</name> <init>= <expr><name>inlen</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xf</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xc</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>iso8859</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>iso8859</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iso8859</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ISO-8859-%d"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name>iso8859</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name><name>encodings</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name><name>encodings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_iconv</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>out</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_iconv</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<label><name>no_iconv</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_section_header</name><parameter_list>(<parameter><decl><type><name>SectionHeader</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>sec_num</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_sec_num</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>StreamType</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>StreamType</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>ISO_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_MP3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_MP3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0f</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AAC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_MPEG4</name></expr> }</block></expr>,


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_LOAS_DEMUXER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="number">0x11</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AAC_LATM</name></expr> }</block></expr>, 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="number">0x1b</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1c</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AAC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x21</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_JPEG2000</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x24</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_HEVC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_CAVS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd1</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_DIRAC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_AVS2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_VC1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>HDMV_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_PCM_BLURAY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x81</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AC3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x82</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x83</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_TRUEHD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x84</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_EAC3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x85</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x86</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xa1</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_EAC3</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xa2</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>, <expr><name>AV_CODEC_ID_HDMV_PGS_SUBTITLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x92</literal></expr>, <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>, <expr><name>AV_CODEC_ID_HDMV_TEXT_SUBTITLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>SCTE_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x86</literal></expr>, <expr><name>AVMEDIA_TYPE_DATA</name></expr>, <expr><name>AV_CODEC_ID_SCTE_35</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>MISC_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x81</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AC3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8a</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>REGD_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_DIRAC</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AC3</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_S302M</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_EAC3</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_HEVC</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_DATA</name></expr>, <expr><name>AV_CODEC_ID_SMPTE_KLV</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_DATA</name></expr>, <expr><name>AV_CODEC_ID_TIMED_ID3</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>, <expr><name>AV_CODEC_ID_VC1</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_OPUS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>METADATA_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_DATA</name></expr>, <expr><name>AV_CODEC_ID_SMPTE_KLV</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AVMEDIA_TYPE_DATA</name></expr>, <expr><name>AV_CODEC_ID_TIMED_ID3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StreamType</name></type> <name><name>DESC_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x6a</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_AC3</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x7a</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_EAC3</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x7b</literal></expr>, <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>, <expr><name>AV_CODEC_ID_DTS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x56</literal></expr>, <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>, <expr><name>AV_CODEC_ID_DVB_TELETEXT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x59</literal></expr>, <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>, <expr><name>AV_CODEC_ID_DVB_SUBTITLE</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpegts_find_stream_type</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>stream_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StreamType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>types</name><operator>-&gt;</operator><name>stream_type</name></name></expr>;</condition> <incr><expr><name>types</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>stream_type</name> <operator>==</operator> <name><name>types</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name><name>types</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name><name>types</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>types</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>types</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_set_stream_info</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>stream_type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prog_reg_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_codec_type</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_codec_id</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_codec_tag</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avcodec_is_open</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"cannot set stream info, internal codec is open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>pes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>stream_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"stream=%d stream_type=%x pid=%x prog_reg_desc=%.4s\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prog_reg_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><name>ISO_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0x0f</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prog_reg_desc</name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"HDMV"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name>prog_reg_desc</name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"HDPR"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><name>HDMV_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0x83</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>sub_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>sub_pes</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sub_pes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub_pes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sub_pes</name></expr></argument>, <argument><expr><name>pes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sub_pes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub_st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sub_pes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub_st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>sub_st</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>sub_pes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub_pes</name><operator>-&gt;</operator><name>sub_st</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>sub_st</name></name> <operator>=</operator> <name>sub_st</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><name>MISC_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>old_codec_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>old_codec_type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>&lt;</operator> <name>AVPROBE_SCORE_STREAM_RETRY</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>probe_packets</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>stream_type</name> <operator>==</operator> <name>STREAM_TYPE_PRIVATE_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_BIN_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <name>AVPROBE_SCORE_STREAM_RETRY</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>old_codec_type</name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>||</operator>
<name>old_codec_id</name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>||</operator>
<name>old_codec_tag</name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_pes_packet_state</name><parameter_list>(<parameter><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>new_data_packet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_pes_packet</name><parameter_list>(<parameter><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>!=</operator> <name>MAX_PES_PAYLOAD</name> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>!=</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+</operator>
<name>PES_START_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"PES packet size mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>sub_st</name></name> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>extended_stream_id</name></name> <operator>==</operator> <literal type="number">0x76</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>sub_st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>ts_packet_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_pes_packet_state</name><argument_list>(<argument><expr><name>pes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_MPEGTS_STREAM_ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sd</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>stream_id</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_ts64</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>get_bits64</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sl_header</name><parameter_list>(<parameter><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl></parameter>, <parameter><decl><type><name>SLConfigDescr</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>au_start_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>au_end_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ocr_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idle_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>padding_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>padding_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>inst_bitrate_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dts_flag</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cts_flag</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>, <decl><type ref="prev"/><name>cts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf_padded</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_padded_size</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_padded</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_padded</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_padded_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf_padded</name></expr></argument>, <argument><expr><name>buf_padded_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_au_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>au_start_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_au_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>au_end_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>use_au_start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>use_au_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>au_start_flag</name> <operator>=</operator> <name>au_end_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>ocr_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ocr_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_idle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idle_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_padding</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>padding_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idle_flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>padding_flag</name> <operator>||</operator> <name>padding_bits</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>packet_seq_num_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>packet_seq_num_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>degr_prior_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>degr_prior_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ocr_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ocr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>au_start_flag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_rand_acc_pt</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>au_seq_num_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>au_seq_num_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>use_timestamps</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dts_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cts_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>inst_bitrate_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inst_bitrate_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dts_flag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>get_ts64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>timestamp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cts_flag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cts</name> <operator>=</operator> <call><name>get_ts64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>timestamp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>au_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>au_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inst_bitrate_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>inst_bitrate_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>cts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>timestamp_len</name></name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>timestamp_res</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>timestamp_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>timestamp_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_push_data</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_start</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>pes</name><operator>-&gt;</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MPEGTS_PAYLOAD</name> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>new_pes_packet</name><argument_list>(<argument><expr><name>pes</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>reset_pes_packet_state</name><argument_list>(<argument><expr><name>pes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_HEADER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>ts_packet_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MPEGTS_HEADER</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>PES_START_SIZE</name> <operator>-</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>==</operator> <name>PES_START_SIZE</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"pid=%x pes_code=%#x\n"</literal></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>sub_st</name></name> <operator>||</operator>
<name><name>pes</name><operator>-&gt;</operator><name>sub_st</name><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<name>code</name> <operator>==</operator> <literal type="number">0x1be</literal></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>skip_changes</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>merge_pmt_versions</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_set_stream_info</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>pes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name>MAX_PES_PAYLOAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0x1bc</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <literal type="number">0x1bf</literal> <operator>&amp;&amp;</operator> 
<name>code</name> <operator>!=</operator> <literal type="number">0x1f0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <literal type="number">0x1f1</literal> <operator>&amp;&amp;</operator> 
<name>code</name> <operator>!=</operator> <literal type="number">0x1ff</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <literal type="number">0x1f2</literal> <operator>&amp;&amp;</operator> 
<name>code</name> <operator>!=</operator> <literal type="number">0x1f8</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_PESHEADER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>request_probe</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>,
<argument><expr><literal type="string">"pid=%x stream_type=%x probing\n"</literal></expr></argument>,
<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<label><name>skip</name>:</label>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_SKIP</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>MPEGTS_PESHEADER</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>PES_HEADER_SIZE</name> <operator>-</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>==</operator> <name>PES_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_PESHEADER_FILL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MPEGTS_PESHEADER_FILL</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>-</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>==</operator> <name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>pes_ext</name></decl>, <decl><type ref="prev"/><name>skip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>extended_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>pes_ext</name> <operator>=</operator> <operator>*</operator><name>r</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><name>pes_ext</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xb</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>skip</name> <operator>&amp;</operator> <literal type="number">0x9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pes_ext</name> <operator>&amp;</operator> <literal type="number">0x41</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name><name>pes</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>extended_stream_id</name></name> <operator>=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0x12</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sl_header_bytes</name> <init>= <expr><call><name>read_sl_header</name><argument_list>(<argument><expr><name>pes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>+=</operator> <name>sl_header_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>sl_header_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>sl_header_bytes</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0x15</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name><name>pes</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>fix_teletext_pts</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_TELETEXT</name>
<operator>||</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>av_find_program_from_stream</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pcr_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>discard</name></name> <operator>!=</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>pes</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>pcr_pid</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pcrpes</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pcrpes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>pcrpes</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PCR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_stream_indexes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>pst</name> <init>= <expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>stream_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>pst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_pcr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>discard</name></name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int64_t</name></type> <name>pcr</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>last_pcr</name></name> <operator>/</operator> <literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pcr_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_reference</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>pts_wrap_reference</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pts_wrap_behavior</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>pts_wrap_behavior</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>&lt;</operator> <name>pcr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>pcr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_TELETEXT</name> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>&gt;</operator> <name>pcr</name> <operator>+</operator> <literal type="number">3654</literal> <operator>+</operator> <literal type="number">9000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>pcr</name> <operator>+</operator> <literal type="number">3654</literal> <operator>+</operator> <literal type="number">9000</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>&gt;</operator> <name>pcr</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><literal type="number">90000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>pcr</name> <operator>+</operator> <literal type="number">3654</literal> <operator>+</operator> <literal type="number">9000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pcr_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Forcing DTS/PTS to be unset for a "</literal>
<literal type="string">"non-trustworthy PES packet for PID %d as "</literal>
<literal type="string">"PCR hasn't been received yet.\n"</literal></expr></argument>,
<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>MPEGTS_PAYLOAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>+</operator> <name>buf_size</name> <operator>&gt;</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>new_pes_packet</name><argument_list>(<argument><expr><name>pes</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <name>MAX_PES_PAYLOAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>buf_size</name> <operator>&gt;</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>&lt;</operator> <name>MAX_PES_PAYLOAD</name> <operator>&amp;&amp;</operator>
<name><name>pes</name><operator>-&gt;</operator><name>pes_header_size</name></name> <operator>+</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>==</operator> <name><name>pes</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+</operator> <name>PES_START_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>new_pes_packet</name><argument_list>(<argument><expr><name>pes</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MPEGTS_SKIP</name></expr>:</case>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PESContext</name> <modifier>*</modifier></type><name>add_pes_stream</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pcr_pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>tss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl>;</decl_stmt>


<expr_stmt><expr><name>pes</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PESContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pcr_pid</name></name> <operator>=</operator> <name>pcr_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tss</name> <operator>=</operator> <call><name>mpegts_open_pes_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>mpegts_push_data</name></expr></argument>, <argument><expr><name>pes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tss</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pes</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEVEL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>MP4DescrParseContext</name> <block>{
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>active_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>descr_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_descr_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predefined_SLConfigDescriptor_seen</name></decl>;</decl_stmt>
}</block></struct></type> <name>MP4DescrParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_MP4DescrParseContext</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_descr_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>descr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>max_descr_count</name></name> <operator>=</operator> <name>max_descr_count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_offsets</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>new_off</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator> <operator>-=</operator> <name>new_off</name> <operator>-</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>off</name> <operator>=</operator> <name>new_off</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_mp4_descr</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>target_tag</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_mp4_descr_arr</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>parse_mp4_descr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_MP4IODescrTag</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>parse_mp4_descr_arr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_MP4ODescrTag</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id_flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id_flags</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>id_flags</name> <operator>&amp;</operator> <literal type="number">0x0020</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>parse_mp4_descr_arr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_MP4ESDescrTag</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>es_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>descr_count</name></name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>max_descr_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_mp4_parse_es_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name></name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>descr</name></name> <operator>+</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>descr_count</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name><operator>-&gt;</operator><name>es_id</name></name> <operator>=</operator> <name>es_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_mp4_descr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>MP4DecConfigDescrTag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_mp4_descr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>MP4SLDescrTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_MP4DecConfigDescrTag</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>descr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name><operator>-&gt;</operator><name>dec_config_descr</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>descr</name><operator>-&gt;</operator><name>dec_config_descr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>dec_config_descr_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>dec_config_descr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_MP4SLDescrTag</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>active_descr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predefined</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>descr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R8_CHECK_CLIP_MAX</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>maxv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { descr-&gt;sl.dst = avio_r8(&amp;d-&gt;pb); if (descr-&gt;sl.dst &gt; maxv) { descr-&gt;sl.dst = maxv; return AVERROR_INVALIDDATA; } } while (0)</cpp:value></cpp:define>







<expr_stmt><expr><name>predefined</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>predefined</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lengths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_au_start</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_au_end</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_rand_acc_pt</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_padding</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_timestamps</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>use_idle</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>timestamp_res</name></name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R8_CHECK_CLIP_MAX</name><argument_list>(<argument><expr><name>timestamp_len</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R8_CHECK_CLIP_MAX</name><argument_list>(<argument><expr><name>ocr_len</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R8_CHECK_CLIP_MAX</name><argument_list>(<argument><expr><name>au_len</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>inst_bitrate_len</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lengths</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>degr_prior_len</name></name> <operator>=</operator> <name>lengths</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>au_seq_num_len</name></name> <operator>=</operator> <operator>(</operator><name>lengths</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>packet_seq_num_len</name></name> <operator>=</operator> <operator>(</operator><name>lengths</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>predefined_SLConfigDescriptor_seen</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"Predefined SLConfigDescriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>predefined_SLConfigDescriptor_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_mp4_descr</name><parameter_list>(<parameter><decl><type><name>MP4DescrParseContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>target_tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>ff_mp4_read_descr</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_offsets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len1</name></expr></argument> &gt;</argument_list></name> <name>len</name> <operator>||</operator> <name>len1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Tag %x length violation new length %d bytes remaining %d\n"</literal></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>level</name></name><operator>++</operator> <operator>&gt;=</operator> <name>MAX_LEVEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Maximum MP4 descriptor level exceeded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target_tag</name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>!=</operator> <name>target_tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Found tag %x expected %x\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>,
<argument><expr><name>target_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MP4IODescrTag</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_MP4IODescrTag</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MP4ODescrTag</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_MP4ODescrTag</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MP4ESDescrTag</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_MP4ESDescrTag</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MP4DecConfigDescrTag</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_MP4DecConfigDescrTag</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MP4SLDescrTag</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_MP4SLDescrTag</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<label><name>done</name>:</label>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>len1</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp4_read_iods</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>descr_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_descr_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4DescrParseContext</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_MP4DescrParseContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>max_descr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_mp4_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MP4IODescrTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>descr_count</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>descr_count</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp4_read_od</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>descr_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_descr_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP4DescrParseContext</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_MP4DescrParseContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>max_descr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_mp4_descr_arr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>descr_count</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>descr_count</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>m4sl_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tssf</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionHeader</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mp4_descr_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mp4Descr</name></type> <name><name>mp4_descr</name><index>[<expr><name>MAX_MP4_DESCR_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>section</name> <operator>+</operator> <name>section_len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_section_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>tid</name></name> <operator>!=</operator> <name>M4OD_TID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_identical</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>tssf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mp4_read_od</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>p_end</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>, <argument><expr><name>mp4_descr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mp4_descr_count</name></expr></argument>,
<argument><expr><name>MAX_MP4_DESCR_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pid</name> <operator>&lt;</operator> <name>NB_PID_MAX</name></expr>;</condition> <incr><expr><name>pid</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mp4_descr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name>es_id</name> <operator>!=</operator> <name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es_id</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pid %x is not PES\n"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pes</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>sl</name></name> <operator>=</operator> <name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr</name></expr></argument>,
<argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mp4_read_dec_config_descr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <call><name>avcodec_get_type</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mp4_descr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scte_data_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>prg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>new_data_packet</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prg</name> <operator>=</operator> <call><name>av_find_program_from_stream</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prg</name> <operator>&amp;&amp;</operator> <name><name>prg</name><operator>-&gt;</operator><name>pcr_pid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>prg</name><operator>-&gt;</operator><name>discard</name></name> <operator>!=</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name><name>prg</name><operator>-&gt;</operator><name>pcr_pid</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>last_pcr</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>last_pcr</name></name><operator>/</operator><literal type="number">300</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opus_coupled_stream_cnt</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opus_stream_cnt</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>opus_channel_map</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_parse_mpeg2_descriptor</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>desc_list_end</name></decl></parameter>,
<parameter><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>mp4_descr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp4_descr_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>desc_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_len</name></decl>, <decl><type ref="prev"/><name>desc_tag</name></decl>, <decl><type ref="prev"/><name>desc_es_id</name></decl>, <decl><type ref="prev"/><name>ext_desc_tag</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>channel_config_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><literal type="number">252</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc_tag</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_len</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_end</name> <operator>=</operator> <operator>*</operator><name>pp</name> <operator>+</operator> <name>desc_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_end</name> <operator>&gt;</operator> <name>desc_list_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"tag: 0x%02x len=%d\n"</literal></expr></argument>, <argument><expr><name>desc_tag</name></expr></argument>, <argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name>stream_type</name> <operator>==</operator> <name>STREAM_TYPE_PRIVATE_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>desc_tag</name></expr></argument>, <argument><expr><name>DESC_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>desc_tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x02</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_STILL_IMAGE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x1E</literal></expr>:</case> 
<expr_stmt><expr><name>desc_es_id</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_es_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name>es_id</name> <operator>=</operator> <name>desc_es_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mp4_descr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr_len</name> <operator>&amp;&amp;</operator>
<name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>es_id</name> <operator>==</operator> <name>desc_es_id</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr</name></expr></argument>,
<argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mp4_read_dec_config_descr</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4SYSTEMS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>m4sl_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><literal type="number">0x1F</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mp4_descr_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC_LATM</name> <operator>||</operator>
<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name><operator>)</operator> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>mp4_descr</name><operator>-&gt;</operator><name>dec_config_descr_len</name></name> <operator>&amp;&amp;</operator> <name><name>mp4_descr</name><operator>-&gt;</operator><name>es_id</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>mp4_descr</name><operator>-&gt;</operator><name>dec_config_descr</name></name></expr></argument>,
<argument><expr><name><name>mp4_descr</name><operator>-&gt;</operator><name>dec_config_descr_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mp4_read_dec_config_descr</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x56</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>language_count</name> <init>= <expr><name>desc_len</name> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>desc_len</name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>language_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>language_count</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>language_count</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>language_count</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>language_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x59</literal></expr>:</case> 
<block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>language_count</name> <init>= <expr><name>desc_len</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>desc_len</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>language_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"DVB subtitles with multiple languages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>language_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>language_count</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>language_count</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>language_count</name> <operator>*</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>language_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>


<switch>switch <condition>(<expr><operator>*</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<case>case <expr><literal type="number">0x21</literal></expr>:</case> 
<case>case <expr><literal type="number">0x22</literal></expr>:</case> 
<case>case <expr><literal type="number">0x23</literal></expr>:</case> 
<case>case <expr><literal type="number">0x24</literal></expr>:</case> 
<case>case <expr><literal type="number">0x25</literal></expr>:</case> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>extradata</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>extradata</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name>desc_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_CLEAN_EFFECTS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>language</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"reg_desc=%.4s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name>REGD_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x52</literal></expr>:</case> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream_identifier</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x26</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name>METADATA_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x7f</literal></expr>:</case> 
<expr_stmt><expr><name>ext_desc_tag</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_desc_tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name> <operator>&amp;&amp;</operator>
<name>ext_desc_tag</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opus_default_extradata</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opus_default_extradata</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>opus_default_extradata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opus_default_extradata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_config_code</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_config_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>channel_config_code</name> <operator>&lt;=</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>channels</name> <operator>=</operator> <ternary><condition><expr><name>channel_config_code</name></expr> ?</condition><then> <expr><name>channel_config_code</name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>channel_config_code</name></expr> ?</condition><then> <expr><operator>(</operator><name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>opus_stream_cnt</name><index>[<expr><name>channel_config_code</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>opus_coupled_stream_cnt</name><index>[<expr><name>channel_config_code</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opus_channel_map</name><index>[<expr><name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="string">"Opus in MPEG-TS - channel_config_code &gt; 0x8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>need_context_update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_desc_tag</name> <operator>==</operator> <literal type="number">0x06</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DEPENDENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content> 
<case>case <expr><literal type="number">0x01</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x02</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x03</literal></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x6a</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>component_type_flag</name> <init>= <expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>component_type_flag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>component_type</name> <init>= <expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>service_type_mask</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>service_type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>component_type</name> <operator>&amp;</operator> <name>service_type_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>service_type</name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><ternary><condition><expr><name>ts</name></expr> ?</condition><then> <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr> </then><else>: <expr><name>fc</name></expr></else></ternary></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"New track disposition for id %u: %u\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0x7a</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>component_type_flag</name> <init>= <expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>component_type_flag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>component_type</name> <init>= <expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>service_type_mask</name> <init>= <expr><literal type="number">0x38</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>service_type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>component_type</name> <operator>&amp;</operator> <name>service_type_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>service_type</name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><ternary><condition><expr><name>ts</name></expr> ?</condition><then> <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr> </then><else>: <expr><name>fc</name></expr></else></ternary></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"New track disposition for id %u: %u\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">0xfd</literal></expr>:</case> 


<if_stmt><if>if <condition>(<expr><name>stream_type</name> <operator>==</operator> <name>STREAM_TYPE_PRIVATE_DATA</name></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>actual_component_tag</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>stream_identifier</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>picked_profile</name> <init>= <expr><name>FF_PROFILE_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_component_id</name> <init>= <expr><call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data_component_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>data_component_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x0008</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>actual_component_tag</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator>
<name>actual_component_tag</name> <operator>&lt;=</operator> <literal type="number">0x37</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>picked_profile</name> <operator>=</operator> <name>FF_PROFILE_ARIB_PROFILE_A</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x0012</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>actual_component_tag</name> <operator>==</operator> <literal type="number">0x87</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>picked_profile</name> <operator>=</operator> <name>FF_PROFILE_ARIB_PROFILE_C</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>picked_profile</name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_ARIB_CAPTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>picked_profile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>desc_end</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>find_matching_stream</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>programid</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stream_identifier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pmt_stream_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>program_num</name></name> <operator>!=</operator> <name>programid</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_identifier</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>stream_identifier</name></name> <operator>==</operator> <name>stream_identifier</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>pmt_stream_idx</name></name> <operator>==</operator> <name>pmt_stream_idx</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"re-using existing %s stream %d (pid=0x%x) for new pid=0x%x\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>found</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_stream_identifier_desc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>desc_list_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>desc_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_list_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_len</name></decl>, <decl><type ref="prev"/><name>desc_tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc_list_len</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_list_len</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc_list_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>desc_list_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_end</name> <operator>&gt;</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>desc_tag</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_len</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_end</name> <operator>=</operator> <operator>*</operator><name>pp</name> <operator>+</operator> <name>desc_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_end</name> <operator>&gt;</operator> <name>desc_list_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc_tag</name> <operator>==</operator> <literal type="number">0x52</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>get8</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>desc_end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>desc_end</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_pes_stream</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stream_type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prog_reg_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><name>stream_type</name> <operator>==</operator> <literal type="number">0x13</literal> <operator>||</operator>
<operator>(</operator><name>stream_type</name> <operator>==</operator> <literal type="number">0x86</literal> <operator>&amp;&amp;</operator> <name>prog_reg_desc</name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"CUEI"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pmt_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tssf</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionHeader</name></type> <name>h1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name>h1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc_list_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>program_info_length</name></decl>, <decl><type ref="prev"/><name>pcr_pid</name></decl>, <decl><type ref="prev"/><name>pid</name></decl>, <decl><type ref="prev"/><name>stream_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_list_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>prog_reg_desc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stream_identifier</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mp4_descr_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mp4Descr</name></type> <name><name>mp4_descr</name><index>[<expr><name>MAX_MP4_DESCR_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"PMT: len %i\n"</literal></expr></argument>, <argument><expr><name>section_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hex_dump_debug</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>section</name> <operator>+</operator> <name>section_len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_section_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>PMT_TID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_identical</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>tssf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sid=0x%x sec_num=%d/%d version=%d tid=%d\n"</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>sec_num</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_sec_num</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>scan_all_pmts</name></name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>skip_changes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>skip_unknown_pmt</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_program</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>skip_clear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_program</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pcr_pid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pcr_pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pcr_pid</name> <operator>&amp;=</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pid_to_pmt</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pcr_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_av_program_info</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pcr_pid</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"pcr_pid=0x%x\n"</literal></expr></argument>, <argument><expr><name>pcr_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>program_info_length</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>program_info_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>program_info_length</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>program_info_length</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"program tag: 0x%02x len=%d\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>program_info_length</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>program_info_length</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0x1d</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp4_read_iods</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mp4_descr</name> <operator>+</operator> <name>mp4_descr_count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mp4_descr_count</name></expr></argument>, <argument><expr><name>MAX_MP4_DESCR_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0x05</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>prog_reg_desc</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>program_info_length</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_pmt_found</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream_type</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>&amp;=</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>current_pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>merge_pmt_versions</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stream_identifier</name> <operator>=</operator> <call><name>parse_stream_identifier_desc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pes</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>merge_pmt_versions</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>find_matching_stream</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stream_identifier</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>stream_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>merged_st</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>program_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pmt_version</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>pmt_stream_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_pes_stream</name><argument_list>(<argument><expr><name>stream_type</name></expr></argument>, <argument><expr><name>prog_reg_desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_close_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>pes</name> <operator>=</operator> <call><name>add_pes_stream</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pcr_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>merge_pmt_versions</name></name> <operator>&amp;&amp;</operator> <name>pes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>find_matching_stream</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stream_identifier</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <name>stream_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>merged_st</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pes</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>program_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pmt_version</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pmt_stream_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>merge_pmt_versions</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>find_matching_stream</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>stream_identifier</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>program_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pmt_version</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pmt_stream_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_type</name> <operator>==</operator> <literal type="number">0x86</literal> <operator>&amp;&amp;</operator> <name>prog_reg_desc</name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"CUEI"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mpegts_find_stream_type</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>stream_type</name></expr></argument>, <argument><expr><name>SCTE_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>scte_data_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>stream_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_set_stream_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>pes</name></expr></argument>, <argument><expr><name>stream_type</name></expr></argument>, <argument><expr><name>prog_reg_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_pid_to_pmt</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc_list_len</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_list_len</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc_list_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>desc_list_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_end</name> <operator>&gt;</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_parse_mpeg2_descriptor</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,
<argument><expr><name>desc_list_end</name></expr></argument>, <argument><expr><name>mp4_descr</name></expr></argument>,
<argument><expr><name>mp4_descr_count</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pes</name> <operator>&amp;&amp;</operator> <name>prog_reg_desc</name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"HDMV"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>stream_type</name> <operator>==</operator> <literal type="number">0x83</literal> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>sub_st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_program_add_stream_index</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>pes</name><operator>-&gt;</operator><name>sub_st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>sub_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>desc_list_end</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pcr_pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_open_pcr_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pcr_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mp4_descr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>mp4_descr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dec_config_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pat_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tssf</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionHeader</name></type> <name>h1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name>h1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sid</name></decl>, <decl><type ref="prev"/><name>pmt_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"PAT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hex_dump_debug</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>section</name> <operator>+</operator> <name>section_len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_section_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>PAT_TID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>skip_changes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_identical</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>tssf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>ts_id</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_programs</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pmt_pid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pmt_pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pmt_pid</name> <operator>&amp;=</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pmt_pid</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>current_pid</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sid=0x%x pid=0x%x\n"</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>pmt_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>==</operator> <literal type="number">0x0000</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>fil</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pmt_pid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>av_new_program</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>program</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>program_num</name></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>pmt_pid</name></name> <operator>=</operator> <name>pmt_pid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fil</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>( <expr><name><name>fil</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MPEGTS_SECTION</name>
<operator>||</operator> <name><name>fil</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <name>pmt_pid</name>
<operator>||</operator> <name><name>fil</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>section_cb</name></name> <operator>!=</operator> <name>pmt_cb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_close_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pmt_pid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pmt_pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pmt_pid</name></expr></argument>, <argument><expr><name>pmt_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_pat_entry</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_pid_to_pmt</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>add_pid_to_pmt</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>pmt_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_programs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>skip_clear</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_avprogram</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>programs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eit_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionHeader</name></type> <name>h1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name>h1</name></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name></name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>EIT_PID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_EPG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>section</name> <operator>+</operator> <name>section_len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_section_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>&lt;</operator> <name>EIT_TID</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>&gt;</operator> <name>OEITS_END_TID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"EIT: tid received = %.02x\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Scrambled EIT table received.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>new_data_packet</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>epg_stream</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdt_cb</name><parameter_list>(<parameter><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>section_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MpegTSSectionFilter</name> <modifier>*</modifier></type><name>tssf</name> <init>= <expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>section_filter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SectionHeader</name></type> <name>h1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name>h1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc_list_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>onid</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>sid</name></decl>, <decl><type ref="prev"/><name>desc_list_len</name></decl>, <decl><type ref="prev"/><name>desc_tag</name></decl>, <decl><type ref="prev"/><name>desc_len</name></decl>, <decl><type ref="prev"/><name>service_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>provider_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"SDT:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hex_dump_debug</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>section_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>section</name> <operator>+</operator> <name>section_len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>section</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_section_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>tid</name></name> <operator>!=</operator> <name>SDT_TID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>skip_changes</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>skip_identical</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>tssf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>onid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>onid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_list_len</name> <operator>=</operator> <call><name>get16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_list_len</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>desc_list_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>desc_list_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_list_end</name> <operator>&gt;</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>desc_tag</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc_tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>desc_len</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>desc_list_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>desc_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>desc_end</name></expr></argument> &gt;</argument_list></name> <name>desc_list_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"tag: 0x%02x len=%d\n"</literal></expr></argument>,
<argument><expr><name>desc_tag</name></expr></argument>, <argument><expr><name>desc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>desc_tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x48</literal></expr>:</case>
<expr_stmt><expr><name>service_type</name> <operator>=</operator> <call><name>get8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>service_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>provider_name</name> <operator>=</operator> <call><name>getstr8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>provider_name</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>getstr8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVProgram</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><call><name>av_new_program</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>program</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>program</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"service_name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>program</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"service_provider"</literal></expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>desc_end</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>desc_list_end</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_pcr</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppcr_high</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ppcr_low</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_packet</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSFilter</name> <modifier>*</modifier></type><name>tss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>pid</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>, <decl><type ref="prev"/><name>expected_cc</name></decl>, <decl><type ref="prev"/><name>cc_ok</name></decl>, <decl><type ref="prev"/><name>afc</name></decl>, <decl><type ref="prev"/><name>is_start</name></decl>, <decl><type ref="prev"/><name>is_discontinuity</name></decl>,
<decl><type ref="prev"/><name>has_adaptation</name></decl>, <decl><type ref="prev"/><name>has_payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>packet</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_start</name> <operator>=</operator> <name><name>packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tss</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>auto_guess</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tss</name> <operator>&amp;&amp;</operator> <name>is_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_pes_stream</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tss</name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tss</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <call><name>discard_pid</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>discard</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>current_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>afc</name> <operator>=</operator> <operator>(</operator><name><name>packet</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>afc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>has_adaptation</name> <operator>=</operator> <name>afc</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>has_payload</name> <operator>=</operator> <name>afc</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_discontinuity</name> <operator>=</operator> <name>has_adaptation</name> <operator>&amp;&amp;</operator>
<name><name>packet</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
<operator>(</operator><name><name>packet</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt> 


<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name><name>packet</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>expected_cc</name> <operator>=</operator> <ternary><condition><expr><name>has_payload</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>tss</name><operator>-&gt;</operator><name>last_cc</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr> </then><else>: <expr><name><name>tss</name><operator>-&gt;</operator><name>last_cc</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cc_ok</name> <operator>=</operator> <name>pid</name> <operator>==</operator> <literal type="number">0x1FFF</literal> <operator>||</operator> 
<name>is_discontinuity</name> <operator>||</operator>
<name><name>tss</name><operator>-&gt;</operator><name>last_cc</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name>expected_cc</name> <operator>==</operator> <name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>last_cc</name></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cc_ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Continuity check failed for pid %d expected %d got %d\n"</literal></expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>expected_cc</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>tss</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Packet had TEI flag set; marking as corrupt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>tss</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_CORRUPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>packet</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_adaptation</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pcr_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_l</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_pcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pcr_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcr_l</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tss</name><operator>-&gt;</operator><name>last_pcr</name></name> <operator>=</operator> <name>pcr_h</name> <operator>*</operator> <literal type="number">300</literal> <operator>+</operator> <name>pcr_l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name>packet</name> <operator>+</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>p_end</name> <operator>||</operator> <operator>!</operator><name>has_payload</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <name>TS_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pos47_full</name></name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_SECTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name>cc_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_section_data</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tss</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>pid</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_section_data</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tss</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cc_ok</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_section_data</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tss</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;</operator> <name>AVFMTCTX_NOHEADER</name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>scan_all_pmts</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ts</name><operator>-&gt;</operator><name>prg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pmt_found</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>nb_prg</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>types</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>types</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>AVMEDIA_TYPE_AUDIO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>types</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>pos</name> <operator>&gt;</operator> <literal type="number">100000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"All programs have pmt, headers found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tss</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>tss</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>pes_cb</name></name><argument_list>(<argument><expr><name>tss</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>is_start</name></expr></argument>,
<argument><expr><name>pos</name> <operator>-</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reanalyze</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pos47_full</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>TS_PACKET_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>==</operator> <name>TS_DVHS_PACKET_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>==</operator> <name>TS_FEC_PACKET_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat_count</name></name> <operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat_count</name></name> <operator>&gt;</operator> <name>SIZE_STAT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>SIZE_STAT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>SIZE_STAT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>TS_DVHS_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>SIZE_STAT_THRESHOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>TS_FEC_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&amp;&amp;</operator> <name>newsize</name> <operator>!=</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"changing packet size to %d\n"</literal></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>size_stat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_resync</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seekback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>current_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>seekback</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>current_packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>current_packet</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>resync_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reanalyze</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"max resync size reached, could not find sync byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw_packet_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ffio_read_indirect</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>TS_PACKET_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>mpegts_resync</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>raw_packet_size</name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finished_reading_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>raw_packet_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><name>raw_packet_size</name> <operator>-</operator> <name>TS_PACKET_SIZE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_packets</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nb_packets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>packet</name><index>[<expr><name>TS_PACKET_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ts</name><operator>-&gt;</operator><name>last_pos</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Skipping after seek\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_SKIP</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPEGTS_SECTION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>section_filter</name><operator>.</operator><name>last_ver</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>last_cc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>last_pcr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>packet</name> <operator>+</operator> <name>TS_PACKET_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>packet_num</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_packets</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>packet_num</name> <operator>&gt;=</operator> <name>nb_packets</name> <operator>||</operator>
<name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_packet</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finished_reading_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>last_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxscore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sumscore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>check_count</name> <init>= <expr><name>size</name> <operator>/</operator> <name>TS_FEC_PACKET_SIZE</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_BLOCK</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>check_count</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>CHECK_BLOCK</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>check_count</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>CHECK_BLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><call><name>analyze</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>TS_PACKET_SIZE</name> <operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name> <operator>*</operator><name>left</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dvhs_score</name> <init>= <expr><call><name>analyze</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>TS_DVHS_PACKET_SIZE</name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>TS_DVHS_PACKET_SIZE</name><operator>*</operator><name>left</name></expr></argument>, <argument><expr><name>TS_DVHS_PACKET_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fec_score</name> <init>= <expr><call><name>analyze</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>TS_FEC_PACKET_SIZE</name> <operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>TS_FEC_PACKET_SIZE</name> <operator>*</operator><name>left</name></expr></argument>, <argument><expr><name>TS_FEC_PACKET_SIZE</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>dvhs_score</name></expr></argument>, <argument><expr><name>fec_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sumscore</name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxscore</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxscore</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>sumscore</name> <operator>=</operator> <name>sumscore</name> <operator>*</operator> <name>CHECK_COUNT</name> <operator>/</operator> <name>check_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxscore</name> <operator>=</operator> <name>maxscore</name> <operator>*</operator> <name>CHECK_COUNT</name> <operator>/</operator> <name>CHECK_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"TS score: %d %d\n"</literal></expr></argument>, <argument><expr><name>sumscore</name></expr></argument>, <argument><expr><name>maxscore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check_count</name> <operator>&gt;</operator> <name>CHECK_COUNT</name> <operator>&amp;&amp;</operator> <name>sumscore</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name> <operator>+</operator> <name>sumscore</name> <operator>-</operator> <name>CHECK_COUNT</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>check_count</name> <operator>&gt;=</operator> <name>CHECK_COUNT</name> <operator>&amp;&amp;</operator> <name>sumscore</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>sumscore</name> <operator>-</operator> <name>CHECK_COUNT</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>check_count</name> <operator>&gt;=</operator> <name>CHECK_COUNT</name> <operator>&amp;&amp;</operator> <name>maxscore</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>sumscore</name> <operator>-</operator> <name>CHECK_COUNT</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sumscore</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_pcr</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppcr_high</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ppcr_low</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>afc</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>afc</name> <operator>=</operator> <operator>(</operator><name><name>packet</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>afc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>packet</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppcr_high</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ppcr_low</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>seek_back</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>AV_LOG_ERROR</name></expr> </then><else>: <expr><name>AV_LOG_INFO</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"Unable to seek back to the start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>probesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>probesize</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>prefer_codec_framerate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ffio_ensure_seekback</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>probesize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate buffers for seekback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>=</operator> <call><name>get_packet_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not detect TS packet size, defaulting to non-FEC/DVHS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>=</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>auto_guess</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_mpegts_demuxer</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>seek_back</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>SDT_PID</name></expr></argument>, <argument><expr><name>sdt_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>PAT_PID</name></expr></argument>, <argument><expr><name>pat_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>EIT_PID</name></expr></argument>, <argument><expr><name>eit_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_packets</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>probesize</name> <operator>/</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>auto_guess</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"tuning done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_pid</name></decl>, <decl><type ref="prev"/><name>pid</name></decl>, <decl><type ref="prev"/><name>nb_packets</name></decl>, <decl><type ref="prev"/><name>nb_pcrs</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>pcr_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>pcrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pcr_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>packet_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>packet</name><index>[<expr><name>TS_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>



<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">27000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2TS</name></expr>;</expr_stmt>


<expr_stmt><expr><name>pcr_pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_pcrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1fff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pcr_pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>pcr_pid</name> <operator>==</operator> <name>pid</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>parse_pcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pcr_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcr_l</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>finished_reading_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pcr_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet_count</name><index>[<expr><name>nb_pcrs</name></expr>]</index></name> <operator>=</operator> <name>nb_packets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcrs</name><index>[<expr><name>nb_pcrs</name></expr>]</index></name> <operator>=</operator> <name>pcr_h</name> <operator>*</operator> <literal type="number">300</literal> <operator>+</operator> <name>pcr_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_pcrs</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_pcrs</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pcrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"invalid pcr pair %"</literal><name>PRId64</name><literal type="string">" &gt;= %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pcrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pcrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>packet_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_pcrs</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>finished_reading_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_packets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name> <operator>=</operator> <operator>(</operator><name><name>pcrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>packet_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>packet_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>cur_pcr</name></name> <operator>=</operator> <name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name> <operator>*</operator> <name><name>packet_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>TS_PACKET_SIZE</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">27000000LL</literal> <operator>/</operator> <name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>cur_pcr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"start=%0.3f pcr=%0.3f incr=%d\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>, <argument><expr><name><name>pcrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">27e6</literal></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>seek_back</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PACKET_READAHEAD</name></cpp:macro> <cpp:value>((128 * 1024) / 188)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_raw_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pcr_h</name></decl>, <decl><type ref="prev"/><name>next_pcr_h</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_l</name></decl>, <decl><type ref="prev"/><name>next_pcr_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pcr_buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>finished_reading_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>mpeg2ts_compute_pcr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_pcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pcr_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcr_l</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PACKET_READAHEAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pcr_buf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_pcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_pcr_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_pcr_l</name></expr></argument>, <argument><expr><name>pcr_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>next_pcr_h</name> <operator>-</operator> <name>pcr_h</name><operator>)</operator> <operator>*</operator> <literal type="number">300</literal> <operator>+</operator> <operator>(</operator><name>next_pcr_l</name> <operator>-</operator> <name>pcr_l</name><operator>)</operator><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>cur_pcr</name></name> <operator>=</operator> <name>pcr_h</name> <operator>*</operator> <literal type="number">300</literal> <operator>+</operator> <name>pcr_l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>cur_pcr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>cur_pcr</name></name> <operator>+=</operator> <name><name>ts</name><operator>-&gt;</operator><name>pcr_incr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handle_packets</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>MPEGTS_PES</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PESContext</name> <modifier>*</modifier></type><name>pes</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>pes_filter</name><operator>.</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MPEGTS_PAYLOAD</name> <operator>&amp;&amp;</operator> <name><name>pes</name><operator>-&gt;</operator><name>data_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>new_pes_packet</name><argument_list>(<argument><expr><name>pes</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MPEGTS_SKIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpegts_free</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_programs</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mpegts_close_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>ts</name><operator>-&gt;</operator><name>pids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegts_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mpegts_free</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_unused</name> <name>int64_t</name></type> <name>mpegts_get_pcr</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>TS_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcr_l</name></decl>, <decl><type ref="prev"/><name>pcr_pid</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>PESContext</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name><operator>)</operator><operator>-&gt;</operator><name>pcr_pid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos47</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pos47_full</name></name> <operator>%</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>ppos</name> <operator>+</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos47</name><operator>)</operator> <operator>/</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name><operator>)</operator> <operator>*</operator>
<name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>+</operator> <name>pos47</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>pos_limit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TS_PACKET_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mpegts_resync</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pcr_pid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1fff</literal><operator>)</operator> <operator>==</operator> <name>pcr_pid</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>parse_pcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcr_l</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><name>timestamp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mpegts_get_dts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos47</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>pos47_full</name></name> <operator>%</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>ppos</name> <operator>+</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos47</name><operator>)</operator> <operator>/</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name><operator>)</operator> <operator>*</operator> <name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>+</operator> <name>pos47</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_read_frame_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>pos_limit</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_read_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>pos</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_reduce_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>==</operator> <name>stream_index</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>pos</name></name> <operator>&gt;=</operator> <operator>*</operator><name>ppos</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name> <init>= <expr><name><name>pkt</name><operator>.</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dts</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>avpriv_mpegts_parse_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>raw_packet_size</name></name> <operator>=</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>auto_guess</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>SDT_PID</name></expr></argument>, <argument><expr><name>sdt_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>PAT_PID</name></expr></argument>, <argument><expr><name>pat_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpegts_open_section_filter</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>EIT_PID</name></expr></argument>, <argument><expr><name>eit_cb</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>avpriv_mpegts_parse_packet</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>TS_PACKET_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x47</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>handle_packet</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name> <operator>-</operator> <name>len</name> <operator>+</operator> <name>TS_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>TS_PACKET_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>stop_parse</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>len1</name> <operator>-</operator> <name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avpriv_mpegts_parse_close</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mpegts_free</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_mpegts_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpegts"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-TS (MPEG-2 Transport Stream)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>mpegts_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>mpegts_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>mpegts_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>mpegts_read_close</name></expr>,
<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>mpegts_get_dts</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_SHOW_IDS</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mpegts_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_mpegtsraw_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpegtsraw"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"raw MPEG-TS (MPEG-2 Transport Stream)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegTSContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>mpegts_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>mpegts_raw_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>mpegts_read_close</name></expr>,
<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>mpegts_get_dts</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_SHOW_IDS</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mpegtsraw_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
