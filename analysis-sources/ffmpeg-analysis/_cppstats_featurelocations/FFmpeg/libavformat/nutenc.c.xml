<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\nutenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudiodata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nut.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_expected_header</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_frame</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>key_frame</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xB6</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lsf</name></decl>, <decl><type ref="prev"/><name>mpeg25</name></decl>, <decl><type ref="prev"/><name>sample_rate_index</name></decl>, <decl><type ref="prev"/><name>bitrate_index</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>layer</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>header</name> <init>= <expr><literal type="number">0xFFF00000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lsf</name> <operator>=</operator> <name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">24000</literal> <operator>+</operator> <literal type="number">32000</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mpeg25</name> <operator>=</operator> <name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">12000</literal> <operator>+</operator> <literal type="number">16000</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_rate</name> <operator>&lt;&lt;=</operator> <name>lsf</name> <operator>+</operator> <name>mpeg25</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">32000</literal> <operator>+</operator> <literal type="number">44100</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sample_rate_index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">44100</literal> <operator>+</operator> <literal type="number">48000</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sample_rate_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sample_rate_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>sample_rate_index</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>lsf</name> <operator>+</operator> <name>mpeg25</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bitrate_index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>bitrate_index</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>bitrate_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator>
<name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name>lsf</name></expr>]</index><index>[<expr><name>layer</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>bitrate_index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_size</name> <operator>*</operator> <literal type="number">144000</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>sample_rate</name> <operator>&lt;&lt;</operator> <name>lsf</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>bitrate_index</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><name>lsf</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>layer</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>bitrate_index</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>bitrate_index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <name>sample_rate_index</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>bitrate_index</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return> 


</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_header_idx</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>frame_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>find_expected_header</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_elision_headers</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>headers</name><index>[]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB6</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFB</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFC</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFD</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>headers</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>headers</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_frame_code</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_frame</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">254</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe_0_esc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pred_table</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ft</name> <operator>=</operator> <operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_CODED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>pts_delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe_0_esc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_STREAM_ID</name> <operator>|</operator> <name>FLAG_SIZE_MSB</name> <operator>|</operator> <name>FLAG_CODED_PTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>stream_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>stream_id</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>stream_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start2</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>*</operator> <name>stream_id</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end2</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>stream_id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_id</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_audio</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intra_only</name> <init>= <expr><name>is_audio</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>av_get_audio_frame_duration2</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VORBIS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>frame_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>f</name> <init>= <expr><call><name>av_div_q</name><argument_list>(<argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_id</name></expr>]</index></name><operator>-&gt;</operator><name>avg_frame_rate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>stream_id</name></expr>]</index></name><operator>.</operator><name>time_base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>.</operator><name>num</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>f</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>key_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>key_frame</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>key_frame</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>intra_only</name> <operator>||</operator> <operator>!</operator><name>keyframe_0_esc</name> <operator>||</operator> <name>key_frame</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>start2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEY</name> <operator>*</operator> <name>key_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAG_SIZE_MSB</name> <operator>|</operator> <name>FLAG_CODED_PTS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>header_idx</name></name> <operator>=</operator> <call><name>find_header_idx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>key_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>start2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>key_frame</name> <operator>=</operator> <name>intra_only</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_audio</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>av_get_audio_frame_duration2</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>frame_size</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pts</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pred</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>start2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEY</name> <operator>*</operator> <name>key_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <name>frame_bytes</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_lsb</name></name> <operator>=</operator> <name>frame_bytes</name> <operator>+</operator> <name>pred</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>pts_delta</name></name> <operator>=</operator> <name>pts</name> <operator>*</operator> <name>frame_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>header_idx</name></name> <operator>=</operator> <call><name>find_header_idx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>frame_bytes</name> <operator>+</operator> <name>pred</name></expr></argument>, <argument><expr><name>key_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>start2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEY</name> <operator>|</operator> <name>FLAG_SIZE_MSB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>pts_delta</name></name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start2</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred_count</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VORBIS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pred_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred</name> <operator>&lt;</operator> <name>pred_count</name></expr>;</condition> <incr><expr><name>pred</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start3</name> <init>= <expr><name>start2</name> <operator>+</operator> <operator>(</operator><name>end2</name> <operator>-</operator> <name>start2</name><operator>)</operator> <operator>*</operator> <name>pred</name> <operator>/</operator> <name>pred_count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end3</name> <init>= <expr><name>start2</name> <operator>+</operator> <operator>(</operator><name>end2</name> <operator>-</operator> <name>start2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>pred_count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pred_table</name><index>[<expr><name>pred</name></expr>]</index></name> <operator>*=</operator> <name>frame_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <name>start3</name></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>end3</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEY</name> <operator>*</operator> <name>key_frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAG_SIZE_MSB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>=</operator> <name>end3</name> <operator>-</operator> <name>start3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>size_lsb</name></name> <operator>=</operator> <name>index</name> <operator>-</operator> <name>start3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>pts_delta</name></name> <operator>=</operator> <name><name>pred_table</name><index>[<expr><name>pred</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_audio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>header_idx</name></name> <operator>=</operator> <call><name>find_header_idx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>key_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="char">'N'</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="char">'N'</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FrameCode</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <literal type="char">'N'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="number">255</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="char">'N'</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAG_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_tt</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>time_base</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>time_base</name> <operator>-</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>put_str</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_s</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>put_packet</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>calculate_checksum</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>startcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dyn_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dyn_size</name> <init>= <expr><call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forw_ptr</name> <init>= <expr><name>dyn_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>calculate_checksum</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>forw_ptr</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffio_init_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>ff_crc04C11DB7_update</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>forw_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>forw_ptr</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><call><name>ffio_get_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>calculate_checksum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffio_init_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>ff_crc04C11DB7_update</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>dyn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>calculate_checksum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><call><name>ffio_get_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_mainheader</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tmp_pts</name></decl>, <decl><type ref="prev"/><name>tmp_flags</name></decl>, <decl><type ref="prev"/><name>tmp_stream</name></decl>, <decl><type ref="prev"/><name>tmp_mul</name></decl>, <decl><type ref="prev"/><name>tmp_size</name></decl>, <decl><type ref="prev"/><name>tmp_fields</name></decl>,
<decl><type ref="prev"/><name>tmp_head_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tmp_match</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>minor_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>max_distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp_pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_mul</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_stream</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_match</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_head_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_pts</name> <operator>!=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_delta</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_mul</name> <operator>!=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_mul</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_stream</name> <operator>!=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_id</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_size</name> <operator>!=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_lsb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_head_idx</name> <operator>!=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>header_idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp_pts</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_flags</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_stream</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_mul</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_mul</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_size</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_lsb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_head_idx</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>header_idx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts_delta</name> <operator>!=</operator> <name>tmp_pts</name> <operator>||</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>!=</operator> <name>tmp_flags</name> <operator>||</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_id</name> <operator>!=</operator> <name>tmp_stream</name> <operator>||</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_mul</name> <operator>!=</operator> <name>tmp_mul</name> <operator>||</operator>
<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_lsb</name> <operator>!=</operator> <name>tmp_size</name> <operator>+</operator> <name>j</name> <operator>||</operator>

<name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>header_idx</name> <operator>!=</operator> <name>tmp_head_idx</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>tmp_mul</name> <operator>-</operator> <name>tmp_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tmp_fields</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_fields</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>tmp_head_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_streamheader</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No codec tag defined for stream %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>-</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msb_pts_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_pts_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>video_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_info</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_globalinfo</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dyn_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dyn_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_standardize_creation_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>add_info</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>dyn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_streaminfo</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name><modifier>*</modifier></type> <name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dyn_buf</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dyn_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>add_info</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_nut_dispositions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name><name>ff_nut_dispositions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>add_info</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Disposition"</literal></expr></argument>, <argument><expr><name><name>ff_nut_dispositions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>num</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>den</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>add_info</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"r_frame_rate"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dyn_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>stream_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>dyn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_chapter</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dyn_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>dyn_size</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_tt</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>time_base</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>ch</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>add_info</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dyn_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>dyn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_index</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Syncpoint</name></type> <name>dummy</name><init>= <expr><block>{ <expr><operator>.</operator><name>pos</name><operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Syncpoint</name> <modifier>*</modifier></type><name><name>next_node</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>startpos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>payload_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_tt</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>max_pts_tb</name></name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>max_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>syncpoints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>ff_nut_sp_pos_cmp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>next_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><operator>(</operator><name><name>next_node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>dummy</name><operator>.</operator><name>pos</name></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>next_node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pos</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>nus</name><init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple keyframes with same PTS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>(</operator><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator> <operator>==</operator> <name>flag</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>flag</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator> <name>j</name> <operator>-</operator> <name>n</name></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name>j</name> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name>last_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>last_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pts</name> <operator>=</operator> <name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>payload_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>startpos</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name>payload_size</name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>payload_size</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>payload_size</name> <operator>&gt;</operator> <literal type="number">4096</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_headers</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_metadata_conv_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ff_nut_metadata_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_mainheader</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAIN_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_streamheader</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>STREAM_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>write_globalinfo</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFO_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_streaminfo</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFO_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_chapter</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFO_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nut_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>avf</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>NUT_STABLE_VERSION</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The additional syncpoint modes require version %d, "</literal>
<literal type="string">"that is currently not finalized, "</literal>
<literal type="string">"please set -f_strict experimental in order to enable it.\n"</literal></expr></argument>,
<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXPERIMENTAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>chapter</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>chapter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name><operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name></name> <operator>||</operator> <operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>chapter</name></name> <operator>||</operator> <operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_parse_specific_params</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>time_base</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>time_base</name> <operator>=</operator> <call><name>ff_choose_timebase</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVRational</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>time_base</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>time_base</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msb_pts_shift</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msb_pts_shift</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_pts_distance</name> <operator>=</operator>
<call><name>FFMAX</name><argument_list>(<argument><expr><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVRational</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>time_base_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>max_distance</name></name> <operator>=</operator> <name>MAX_DISTANCE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>build_elision_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>build_frame_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><literal type="char">'N'</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>FLAG_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>ID_STRING</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ID_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_needed_flags</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>nus</name></decl></parameter>, <parameter><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>!=</operator> <name><name>fc</name><operator>-&gt;</operator><name>stream_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_STREAM_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>fc</name><operator>-&gt;</operator><name>size_mul</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_SIZE_MSB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>nus</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>!=</operator> <name><name>fc</name><operator>-&gt;</operator><name>pts_delta</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_CODED_PTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>&amp;&amp;</operator> <name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_SM_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>nut</name><operator>-&gt;</operator><name>max_distance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>nus</name><operator>-&gt;</operator><name>last_pts</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>nus</name><operator>-&gt;</operator><name>max_pts_distance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_CHECKSUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>]</index></name> <operator>||</operator>
<name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">4096</literal> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header</name> <index>[<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_HEADER_IDX</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>flags</name> <operator>|</operator> <operator>(</operator><name><name>fc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_CODED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_best_header_idx</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>&amp;&amp;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>best_len</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_len</name> <operator>=</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>best_i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_sm_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>dyn_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sm_data_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dyn_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_meta</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_METADATA_UPDATE</name>
<operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_STRINGS_METADATA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>||</operator> <name><name>data</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>data_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>data</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>data_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>val</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PKT_DATA_PALETTE</name></expr>:</case>
<case>case <expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr>:</case>
<case>case <expr><name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr>:</case>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_PALETTE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_NEW_EXTRADATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Extradata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CodecSpecificSide%"</literal><name>PRId64</name><literal type="string">""</literal></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"UserData%s-SD-%d"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Lavf"</literal></expr> </then><else>: <expr><name>LIBAVFORMAT_IDENT</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PKT_DATA_PARAM_CHANGE</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"ChannelLayout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"u64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>data</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"SampleRate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"Height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><call><name>bytestream_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"SkipStart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_str</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="string">"SkipEnd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_s</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sm_data_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PKT_DATA_METADATA_UPDATE</name></expr>:</case>
<case>case <expr><name>AV_PKT_DATA_STRINGS_METADATA</name></expr>:</case>
<case>case <expr><name>AV_PKT_DATA_QUALITY_STATS</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>sm_data_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dyn_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>dyn_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nut_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>nus</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dyn_bc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sm_bc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>fc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>coded_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_length</name></decl>, <decl><type ref="prev"/><name>frame_code</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>needed_flags</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>header_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_header_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>key_frame</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>store_sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sm_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sm_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Negative pts not supported stream %d, pts %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Try to enable the genpts flag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name> <operator>&amp;&amp;</operator> <name><name>nut</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sm_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_sm_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sm_bc</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_sm_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sm_bc</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sm_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>sm_bc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sm_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data_size</name> <operator>+=</operator> <name>sm_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">20</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name><operator>)</operator> <operator>&lt;=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_frame</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>nus</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>FLAG_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>store_sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name> <operator>+</operator> <name><name>nut</name><operator>-&gt;</operator><name>max_distance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>store_sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>store_sp</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><name><name>nut</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NUT_PIPE</name><operator>)</operator> <operator>||</operator> <name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name> <operator>==</operator> <name>INT_MIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sp_pos</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_nut_reset_ts</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><operator>*</operator><name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_tb</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>,
<argument><expr><name><name>nus</name><operator>-&gt;</operator><name>time_base</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>time_base</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>nus</name><operator>-&gt;</operator><name>time_base</name><operator>-&gt;</operator><name>den</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>time_base</name><operator>-&gt;</operator><name>num</name></name></expr></argument>,
<argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>dts_tb</name></expr></argument>,
<argument><expr><name>AVSEEK_FLAG_BACKWARD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp_pos</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sp_pos</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>write_index</name></name> <operator>&amp;&amp;</operator> <literal type="number">2</literal><operator>*</operator><name>index</name> <operator>&gt;</operator> <name><name>st</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name></name> <operator>+</operator> <name>index</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>st</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>nb_index_entries</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>nb_index_entries</name></name> <operator>-=</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_tt</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>sp_pos</name> <operator>!=</operator> <name>INT64_MAX</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name> <operator>-</operator> <name>sp_pos</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NUT_BROADCAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_tt</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>,
<argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><call><name>av_gettime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><operator>*</operator><name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SYNCPOINT_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>write_index</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_nut_add_sp</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator> <operator>%</operator> <name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>nus</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><ternary><condition><expr><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr></else></ternary></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>nus</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coded_pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>nus</name><operator>-&gt;</operator><name>msb_pts_shift</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_lsb2full</name><argument_list>(<argument><expr><name>nus</name></expr></argument>, <argument><expr><name>coded_pts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>coded_pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>nus</name><operator>-&gt;</operator><name>msb_pts_shift</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>best_header_idx</name> <operator>=</operator> <call><name>find_best_header_idx</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>best_length</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameCode</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>fc</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>needed_flags</name> <operator>=</operator> <call><name>get_needed_flags</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>nus</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>needed_flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>needed_flags</name><operator>)</operator> <operator>!=</operator> <name>needed_flags</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>^</operator> <name>needed_flags</name><operator>)</operator> <operator>&amp;</operator> <name>FLAG_KEY</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_STREAM_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>ff_get_v_length</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>%</operator> <name><name>fc</name><operator>-&gt;</operator><name>size_mul</name></name> <operator>!=</operator> <name><name>fc</name><operator>-&gt;</operator><name>size_lsb</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_SIZE_MSB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>ff_get_v_length</name><argument_list>(<argument><expr><name>data_size</name> <operator>/</operator> <name><name>fc</name><operator>-&gt;</operator><name>size_mul</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CHECKSUM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED_PTS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>ff_get_v_length</name><argument_list>(<argument><expr><name>coded_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>best_header_idx</name></expr>]</index></name> <operator>&gt;</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAG_HEADER_IDX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_HEADER_IDX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>best_header_idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED_PTS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAG_CHECKSUM</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <name>best_length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame_code</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fc</name> <operator>=</operator> <operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>frame_code</name><index>[<expr><name>frame_code</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>needed_flags</name> <operator>=</operator> <call><name>get_needed_flags</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>nus</name></expr></argument>, <argument><expr><name>fc</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>header_idx</name> <operator>=</operator> <name><name>fc</name><operator>-&gt;</operator><name>header_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_init_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>ff_crc04C11DB7_update</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>frame_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>^</operator> <name>needed_flags</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FLAG_CODED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>needed_flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_STREAM_ID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CODED_PTS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>coded_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_SIZE_MSB</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>data_size</name> <operator>/</operator> <name><name>fc</name><operator>-&gt;</operator><name>size_mul</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_HEADER_IDX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_put_v</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>header_idx</name> <operator>=</operator> <name>best_header_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_CHECKSUM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><call><name>ffio_get_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ffio_get_checksum</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_SM_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>sm_buf</name></expr></argument>, <argument><expr><name>sm_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>header_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>nut</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>header_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nus</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nus</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAG_KEY</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>nut</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NUT_PIPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>last_syncpoint_pos</name></name></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name></name> <operator>&amp;&amp;</operator> <name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nus</name><operator>-&gt;</operator><name>keyframe_pts</name><index>[<expr><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>max_pts_tb</name></name> <operator>||</operator> <call><name>av_compare_ts</name><argument_list>(<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>max_pts</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>nut</name><operator>-&gt;</operator><name>max_pts_tb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>max_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nut</name><operator>-&gt;</operator><name>max_pts_tb</name></name> <operator>=</operator> <name><name>nus</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sm_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nut_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dyn_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>header_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nut</name><operator>-&gt;</operator><name>sp_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>nut</name><operator>-&gt;</operator><name>write_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write_index</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_packet</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name>dyn_bc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INDEX_STARTCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nut_write_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_nut_free_sp</name><argument_list>(<argument><expr><name>nut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nut</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keyframe_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>chapter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nut</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NUTContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"syncpoints"</literal></expr>, <expr><literal type="string">"NUT syncpoint behaviour"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"syncpoints"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"syncpoints"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"Disable syncpoints, low overhead and unseekable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NUT_PIPE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"syncpoints"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timestamped"</literal></expr>, <expr><literal type="string">"Extend syncpoints with a wallclock timestamp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NUT_BROADCAST</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"syncpoints"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"write_index"</literal></expr>, <expr><literal type="string">"Write index"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>write_index</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"nutenc"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_nut_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nut"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"NUT"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/x-nut"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"nut"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NUTContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>CONFIG_LIBVORBIS</name> <operator>?</operator> <name>AV_CODEC_ID_VORBIS</name> <operator>:</operator>
<name>CONFIG_LIBMP3LAME</name> <operator>?</operator> <name>AV_CODEC_ID_MP3</name> <operator>:</operator> <name>AV_CODEC_ID_MP2</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>nut_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>nut_write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>nut_write_trailer</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>nut_write_deinit</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name></expr>,
<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <name>ff_nut_codec_tags</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
