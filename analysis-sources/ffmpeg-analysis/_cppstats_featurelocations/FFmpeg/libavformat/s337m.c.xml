<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\s337m.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spdif.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKER_16LE</name></cpp:macro> <cpp:value>0x72F81F4E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKER_20LE</name></cpp:macro> <cpp:value>0x20876FF0E154</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKER_24LE</name></cpp:macro> <cpp:value>0x72F8961F4EA5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_16LE_MARKER</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state &amp; 0xFFFFFFFF) == MARKER_16LE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_20LE_MARKER</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state &amp; 0xF0FFFFF0FFFF) == MARKER_20LE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_24LE_MARKER</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state &amp; 0xFFFFFFFFFFFF) == MARKER_24LE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_LE_MARKER</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_16LE_MARKER(state) || IS_20LE_MARKER(state) || IS_24LE_MARKER(state))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>s337m_get_offset_and_codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>data_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>word_bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>word_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_20LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>word_bits</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>word_bits</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data_type</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x1C</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><literal type="string">"Data type %#x in SMPTE 337M"</literal></expr></argument>, <argument><expr><name>data_type</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>codec</name> <operator>=</operator> <name>AV_CODEC_ID_DOLBY_E</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>data_size</name> <operator>/</operator> <name>word_bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3648</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3644</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">2002</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3640</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3040</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <literal type="number">1601</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>avc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><literal type="string">"Dolby E data size %d in SMPTE 337M"</literal></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>*=</operator> <operator>(</operator><name>word_bits</name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>s337m_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>markers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>data_type</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>s337m_get_offset_and_codec</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>data_type</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name>IS_20LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <ternary><condition><expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>&lt;</operator> <name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>sum</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>s337m_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bswap_buf24</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>/</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>data</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>s337m_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>data_type</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data_type</name> <operator>=</operator> <call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>s337m_get_offset_and_codec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>data_type</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_16LE_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_spdif_bswap_buf16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bswap_buf24</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_s337m_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s337m"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SMPTE 337M"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>s337m_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>s337m_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>s337m_read_packet</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
