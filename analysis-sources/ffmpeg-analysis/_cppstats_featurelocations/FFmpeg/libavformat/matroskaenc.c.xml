<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\matroskaenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avlanguage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matroska.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbiscomment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/sha.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/xiph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpeg4audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SEEKHEAD_ENTRIES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ebml_master</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sizebytes</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ebml_master</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_seekhead_entry</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>elementid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>segmentpos</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_seekhead_entry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_seekhead</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>filepos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_seekhead_entry</name></type> <name><name>entries</name><index>[<expr><name>MAX_SEEKHEAD_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reserved_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_seekhead</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_cuepoint</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tracknum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>relative_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mkv_cuepoint</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_cues</name> <block>{
<decl_stmt><decl><type><name>mkv_cuepoint</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_cues</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_track</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>write_dts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_cue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sample_rate_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>codecpriv_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_track</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_attachment</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>stream_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fileuid</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_attachment</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mkv_attachments</name> <block>{
<decl_stmt><decl><type><name>mkv_attachment</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>mkv_attachments</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_MATROSKAv2</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_WEBM</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRACKS</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MatroskaMuxContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>tags_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tags_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>info_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>info_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>tracks_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tracks_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>segment_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>cluster_bc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_seekhead</name></type> <name>seekhead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_cues</name></type> <name>cues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_attachments</name> <modifier>*</modifier></type><name>attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>cur_audio_pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_attachments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reserve_cues_space</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_size_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cues_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_time_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_dash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dash_track_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_live</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chapter_id_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrote_chapters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_raw_vfw</name></decl>;</decl_stmt>
}</block></struct></type> <name>MatroskaMuxContext</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EBML_HEADER_SIZE</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SEEKENTRY_SIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CUETRACKPOS_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_SEEK_PREROLL</name></cpp:macro> <cpp:value>80000000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ebml_id_size</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>av_log2</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7U</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_id</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ebml_id_size</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>id</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_size_unknown</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bytes</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x1ff</literal> <operator>&gt;&gt;</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>ebml_num_size</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>bytes</name> <operator>*</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_num</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>needed_bytes</name> <init>= <expr><call><name>ebml_num_size</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>num</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>needed_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bytes</name> <operator>&gt;=</operator> <name>needed_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>|=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>bytes</name> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>num</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_uint</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>tmp</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_sint</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bytes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>val</name><operator>^</operator><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>val</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>tmp</name><operator>&gt;&gt;=</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_float</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_binary</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_string</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ebml_void</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ebml_master</name></type> <name>start_ebml_master</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>expectedsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><name>expectedsize</name></expr> ?</condition><then> <expr><call><name>ebml_num_size</name><argument_list>(<argument><expr><name>expectedsize</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_size_unknown</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ebml_master</name><operator>)</operator> <block>{ <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>, <expr><name>bytes</name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_ebml_master</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>ebml_master</name></type> <name>master</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>master</name><operator>.</operator><name>pos</name></name> <operator>-</operator> <name><name>master</name><operator>.</operator><name>sizebytes</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <name><name>master</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>master</name><operator>.</operator><name>sizebytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>start_ebml_master_crc32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>dyn_cp</name></decl></parameter>, <parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>dyn_cp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>write_crc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><operator>*</operator><name>dyn_cp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_ebml_master_crc32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>dyn_cp</name></decl></parameter>,
<parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"/><name><name>crc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><operator>*</operator><name>dyn_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>length_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>write_crc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>skip</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_CRC32</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_reset_dyn_buf</name><argument_list>(<argument><expr><operator>*</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>end_ebml_master_crc32_preliminary</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_xiph_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>%</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>mkv_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>mkv_start_seekhead</name><parameter_list>(<parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>seekhead</name><operator>.</operator><name>filepos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>seekhead</name><operator>.</operator><name>reserved_size</name></name> <operator>=</operator> <name>MAX_SEEKHEAD_ENTRIES</name> <operator>*</operator> <name>MAX_SEEKENTRY_SIZE</name> <operator>+</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>seekhead</name><operator>.</operator><name>reserved_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mkv_add_seekhead_entry</name><parameter_list>(<parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>filepos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mkv_seekhead</name> <modifier>*</modifier></type><name>seekhead</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>seekhead</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>seekhead</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>&lt;</operator> <name>MAX_SEEKHEAD_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seekhead</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>seekhead</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>elementid</name> <operator>=</operator> <name>elementid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seekhead</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>seekhead</name><operator>-&gt;</operator><name>num_entries</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>segmentpos</name> <operator>=</operator> <name>filepos</name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>segment_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_seekhead</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>error_on_seek_failure</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>destpos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_seekhead</name> <modifier>*</modifier></type><name>seekhead</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>seekhead</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>remaining</name></decl>, <decl><type ref="prev"/><name>ret64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret64</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>seekhead</name><operator>-&gt;</operator><name>filepos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>error_on_seek_failure</name></expr> ?</condition><then> <expr><name>ret64</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>seekhead</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mkv_seekhead_entry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>seekhead</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>seekentry</name> <init>= <expr><call><name>start_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEEKENTRY</name></expr></argument>,
<argument><expr><name>MAX_SEEKENTRY_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEEKID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><call><name>ebml_id_size</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>elementid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>elementid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEEKPOSITION</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>segmentpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>seekentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEEKHEAD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>seekhead</name><operator>-&gt;</operator><name>filepos</name></name> <operator>+</operator> <name><name>seekhead</name><operator>-&gt;</operator><name>reserved_size</name></name> <operator>-</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret64</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>destpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret64</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_add_cuepoint</name><parameter_list>(<parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracknum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>cluster_pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>relative_pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mkv_cues</name> <modifier>*</modifier></type><name>cues</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cues</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_cuepoint</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mkv_cuepoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entries</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>stream_idx</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>tracknum</name> <operator>=</operator> <name>tracknum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>cluster_pos</name> <operator>=</operator> <name>cluster_pos</name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>segment_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>relative_pos</name> <operator>=</operator> <name>relative_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_assemble_cues</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl></parameter>,
<parameter><decl><type><name>mkv_cues</name> <modifier>*</modifier></type><name>cues</name></decl></parameter>, <parameter><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_tracks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>cuepoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cuepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>mkv_cuepoint</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>cues</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>entry</name> <operator>+</operator> <name><name>cues</name><operator>-&gt;</operator><name>num_entries</name></name></expr></init></decl>;</init>
<condition><expr><name>entry</name> <operator>&lt;</operator> <name>end</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pts</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUETIME</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_tracks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>has_cue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>track_positions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>stream_idx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>num_tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>has_cue</name> <operator>&amp;&amp;</operator> <name><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tracks</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>has_cue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>track_positions</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUETRACKPOSITION</name></expr></argument>, <argument><expr><name>MAX_CUETRACKPOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUETRACK</name></expr></argument> , <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tracknum</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUECLUSTERPOSITION</name></expr></argument> , <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUERELATIVEPOSITION</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>relative_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUEDURATION</name></expr></argument> , <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><name>track_positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>entry</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>pts</name></expr>)</condition>;</do>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_POINTENTRY</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_reset_dyn_buf</name><argument_list>(<argument><expr><name>cuepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cuepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_xiph_codecpriv</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>header_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>header_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VORBIS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_header_size</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>first_header_size</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_split_xiph_headers</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>,
<argument><expr><name>first_header_size</name></expr></argument>, <argument><expr><name>header_start</name></expr></argument>, <argument><expr><name>header_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_xiph_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>header_start</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_wv_codecpriv</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x410</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_flac_codecpriv</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>write_comment</name> <init>= <expr><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3ffffULL</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ff_flac_is_native_layout</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_flac_write_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>,
<argument><expr><operator>!</operator><name>write_comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_comment</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"Lavf"</literal></expr> </then><else>: <expr><name>LIBAVFORMAT_IDENT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PRIx64</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><literal type="string">"WAVEFORMATEXTENSIBLE_CHANNEL_MASK"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ff_vorbiscomment_length</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>vendor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vorbiscomment_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>, <argument><expr><name>vendor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_aac_sample_rates</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extradata_size</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output_sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPEG4AudioConfig</name></type> <name>mp4ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpeg4audio_get_config2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mp4ac</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>, <argument><expr><name>extradata_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>extradata_size</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error parsing AAC extradata, unable to determine samplerate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>output_sample_rate</name> <operator>=</operator> <operator>*</operator><name>sample_rate</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sample_rate</name> <operator>=</operator> <name><name>mp4ac</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>output_sample_rate</name> <operator>=</operator> <name><name>mp4ac</name><operator>.</operator><name>ext_sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_native_codecprivate</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_VORBIS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_THEORA</name></expr>:</case>
<return>return <expr><call><name>put_xiph_codecpriv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_FLAC</name></expr>:</case>
<return>return <expr><call><name>put_flac_codecpriv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_WAVPACK</name></expr>:</case>
<return>return <expr><call><name>put_wv_codecpriv</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>
<return>return <expr><call><name>ff_isom_write_avcc</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>
<return>return <expr><call><name>ff_isom_write_hvcc</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AV1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_isom_write_av1c</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ALAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid extradata found, ALAC expects a 36-byte "</literal>
<literal type="string">"QuickTime atom."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_AAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MAX_PCE_SIZE</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PRORES</name> <operator>&amp;&amp;</operator>
<call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_CODEC_ID_PRORES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_TTA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_codecprivate</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>native_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qt_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>codecpriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>codecpriv_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>native_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_native_codecprivate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qt_id</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>||</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><literal type="number">0x5a</literal> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0x5a</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"codec %s is not supported by this format\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No bmp codec tag found for codec %s\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_put_bmp_header</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_wav_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No wav codec tag found for codec %s\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_put_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>FF_PUT_WAV_HEADER_FORCE_WAVEFORMATEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>codecpriv_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codecpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codecpriv_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECPRIVATE</name></expr></argument>, <argument><expr><name>codecpriv</name></expr></argument>,
<argument><expr><name>codecpriv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_video_color</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colorinfo_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>colorinfo_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>&lt;</operator> <name>AVCOL_TRC_NB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORTRANSFERCHARACTERISTICS</name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>&lt;</operator> <name>AVCOL_SPC_NB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORMATRIXCOEFF</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>&lt;</operator> <name>AVCOL_PRI_NB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORPRIMARIES</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>&lt;</operator> <name>AVCOL_RANGE_NB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORRANGE</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>!=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>&lt;=</operator> <name>AVCHROMA_LOC_TOP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_enum_to_chroma_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORCHROMASITINGHORZ</name></expr></argument>, <argument><expr><operator>(</operator><name>xpos</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORCHROMASITINGVERT</name></expr></argument>, <argument><expr><operator>(</operator><name>ypos</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>AVContentLightMetadata</name><operator>*</operator><operator>)</operator><name>side_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORMAXCLL</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORMAXFALL</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_MASTERING_DISPLAY_METADATA</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVMasteringDisplayMetadata</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>meta_element</name> <init>= <expr><call><name>start_ebml_master</name><argument_list>(
<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORMASTERINGMETA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>AVMasteringDisplayMetadata</name><operator>*</operator><operator>)</operator><name>side_data</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_primaries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_RX</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_RY</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_GX</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_GY</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_BX</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_BY</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_WHITEX</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_WHITEY</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_LUMINANCEMAX</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR_LUMINANCEMIN</name></expr></argument>,
<argument><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>meta_element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>colorinfo_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colorinfo_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colorinfo_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>colorinfo</name> <init>= <expr><call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLOR</name></expr></argument>, <argument><expr><name>colorinfo_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>colorinfo_ptr</name></expr></argument>, <argument><expr><name>colorinfo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>colorinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_video_projection</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>projection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>private</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVSphericalMapping</name> <modifier>*</modifier></type><name>spherical</name> <init>=
<expr><operator>(</operator><specifier>const</specifier> <name>AVSphericalMapping</name> <operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_SPHERICAL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_EQUIRECTANGULAR</name> <operator>&amp;&amp;</operator>
<name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name> <operator>&amp;&amp;</operator>
<name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_CUBEMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown projection type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>projection</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTION</name></expr></argument>,
<argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SPHERICAL_EQUIRECTANGULAR</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONTYPE</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_PROJECTION_TYPE_EQUIRECTANGULAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONTYPE</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_PROJECTION_TYPE_EQUIRECTANGULAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>bound_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>bound_bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>bound_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>bound_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONPRIVATE</name></expr></argument>,
<argument><expr><name>private</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SPHERICAL_CUBEMAP</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONTYPE</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_PROJECTION_TYPE_CUBEMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>private</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>spherical</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONPRIVATE</name></expr></argument>,
<argument><expr><name>private</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>yaw</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONPOSEYAW</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>yaw</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>pitch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONPOSEPITCH</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>pitch</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spherical</name><operator>-&gt;</operator><name>roll</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPROJECTIONPOSEROLL</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>spherical</name><operator>-&gt;</operator><name>roll</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mkv_write_field_order</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>field_order</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_FIELD_UNKNOWN</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>AV_FIELD_PROGRESSIVE</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFLAGINTERLACED</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_INTERLACE_FLAG_PROGRESSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_FIELD_TT</name></expr>:</case>
<case>case <expr><name>AV_FIELD_BB</name></expr>:</case>
<case>case <expr><name>AV_FIELD_TB</name></expr>:</case>
<case>case <expr><name>AV_FIELD_BT</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFLAGINTERLACED</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_INTERLACE_FLAG_INTERLACED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>field_order</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_FIELD_TT</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFIELDORDER</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_FIELDORDER_TT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_FIELD_BB</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFIELDORDER</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_FIELDORDER_BB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_FIELD_TB</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFIELDORDER</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_FIELDORDER_TB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_FIELD_BT</name></expr>:</case>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOFIELDORDER</name></expr></argument>,
<argument><expr><name>MATROSKA_VIDEO_FIELDORDER_BT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_stereo_mode</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_width</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MatroskaVideoStereoModeType</name></type> <name>format</name> <init>= <expr><name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>h_width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h_height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"stereo_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"stereo_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stereo_mode</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>ff_matroska_video_stereo_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>stereo_mode</name> <operator>&lt;</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name> <operator>&amp;&amp;</operator>
<name>stereo_mode</name> <operator>!=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>stereo_mode</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_mkv_stereo3d_conv</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>stereo_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>st</name><operator>-&gt;</operator><name>nb_side_data</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacketSideData</name></type> <name>sd</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>side_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sd</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AV_PKT_DATA_STEREO3D</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo</name> <init>= <expr><operator>(</operator><name>AVStereo3D</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_STEREO3D_2D</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_SIDEBYSIDE</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name><operator>)</operator></expr>
?</condition><then> <expr><name>MATROSKA_VIDEO_STEREOMODE_TYPE_RIGHT_LEFT</name></expr>
</then><else>: <expr><name>MATROSKA_VIDEO_STEREOMODE_TYPE_LEFT_RIGHT</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h_width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_TOPBOTTOM</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_TOP_BOTTOM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>h_height</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_CHECKERBOARD</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_CHECKERBOARD_LR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_LINES</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_ROW_INTERLEAVED_LR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>h_height</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_COLUMNS</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_COL_INTERLEAVED_LR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>h_width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_STEREO3D_FRAMESEQUENCE</name></expr>:</case>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_BOTH_EYES_BLOCK_LR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>MODE_WEBM</name> <operator>&amp;&amp;</operator>
<name>format</name> <operator>&gt;</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_TOP_BOTTOM</name> <operator>&amp;&amp;</operator>
<name>format</name> <operator>!=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_RIGHT_LEFT</name><operator>)</operator>
<operator>||</operator> <name>format</name> <operator>&gt;=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The specified stereo mode is not valid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>MATROSKA_VIDEO_STEREOMODE_TYPE_NB</name></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOSTEREOMODE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_track</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_stream_exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>subinfo</name></decl>, <decl><type ref="prev"/><name>track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>native_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qt_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_sample_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_width_div</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display_height_div</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>have_attachments</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_aac_sample_rates</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample_rate</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>track</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKENTRY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKNUMBER</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name></expr> ?</condition><then> <expr><name><name>mkv</name><operator>-&gt;</operator><name>dash_track_number</name></name></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKUID</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name></expr> ?</condition><then> <expr><name><name>mkv</name><operator>-&gt;</operator><name>dash_track_number</name></name></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKFLAGLACING</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKNAME</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKLANGUAGE</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>tag</name> <operator>&amp;&amp;</operator> <name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr> ?</condition><then> <expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><literal type="string">"und"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>default_stream_exists</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKFLAGDEFAULT</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_FORCED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKFLAGFORCED</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codec_id</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_webm_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_webm_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name><name>ff_webm_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_CAPTIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <literal type="string">"D_WEBVTT/CAPTIONS"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <name>MATROSKA_TRACK_TYPE_SUBTITLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <literal type="string">"D_WEBVTT/DESCRIPTIONS"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <name>MATROSKA_TRACK_TYPE_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_METADATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <literal type="string">"D_WEBVTT/METADATA"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <name>MATROSKA_TRACK_TYPE_METADATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <literal type="string">"D_WEBVTT/SUBTITLES"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <name>MATROSKA_TRACK_TYPE_SUBTITLE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>native_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Only VP8 or VP9 or AV1 video and Vorbis or Opus audio and WebVTT subtitles are supported for WebM.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECID</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_mkv_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_mkv_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_FFV1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECID</name></expr></argument>, <argument><expr><name><name>ff_mkv_codec_tags</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>allow_raw_vfw</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Raw RGB is not supported Natively in Matroska, you can use AVI or NUT or\n"</literal>
<literal type="string">"If you would like to store it anyway using VFW mode, enable allow_raw_vfw (-allow_raw_vfw 1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>have_video</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKTYPE</name></expr></argument>, <argument><expr><name>MATROSKA_TRACK_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKDEFAULTDURATION</name></expr></argument>, <argument><expr><literal type="number">1000000000LL</literal> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>( <expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKDEFAULTDURATION</name></expr></argument>, <argument><expr><literal type="number">1000000000LL</literal> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>native_id</name> <operator>&amp;&amp;</operator>
<call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><operator>!</operator><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name><operator>)</operator> <operator>||</operator>
<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SVQ1</name> <operator>||</operator>
<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SVQ3</name> <operator>||</operator>
<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_CINEPAK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qt_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qt_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECID</name></expr></argument>, <argument><expr><literal type="string">"V_QUICKTIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>native_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECID</name></expr></argument>, <argument><expr><literal type="string">"V_MS/VFW/FOURCC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>write_dts</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avoid_negative_ts_use_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subinfo</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKVIDEO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPIXELWIDTH</name></expr></argument> , <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOPIXELHEIGHT</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkv_write_field_order</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>field_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_stereo_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>display_width_div</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>display_height_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"alpha_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"alpha_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOALPHAMODE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>d_width</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d_width</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in display width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d_width</name> <operator>!=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>display_width_div</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>display_height_div</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_WEBM</name> <operator>||</operator> <name>display_width_div</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>display_height_div</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYWIDTH</name></expr></argument> , <argument><expr><name>d_width</name> <operator>/</operator> <name>display_width_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYHEIGHT</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>display_height_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>display_aspect_ratio</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>display_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>display_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYWIDTH</name></expr></argument>, <argument><expr><name><name>display_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYHEIGHT</name></expr></argument>, <argument><expr><name><name>display_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYUNIT</name></expr></argument>, <argument><expr><name>MATROSKA_VIDEO_DISPLAYUNIT_DAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>display_width_div</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>display_height_div</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYWIDTH</name></expr></argument> , <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name>display_width_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYHEIGHT</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>display_height_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEODISPLAYUNIT</name></expr></argument>, <argument><expr><name>MATROSKA_VIDEO_DISPLAYUNIT_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>color_space</name> <init>= <expr><call><name>av_le2ne32</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_VIDEOCOLORSPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_space</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>color_space</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_video_color</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_video_projection</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>subinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>codecdelay</name> <init>= <macro><name>av_rescale_q</name><argument_list>(<argument>par-&gt;initial_padding</argument>,
<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">48000</literal> }</argument>,
<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument><literal type="number">1000000000</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>codecdelay</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Initial padding is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECDELAY</name></expr></argument>, <argument><expr><name>codecdelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEEKPREROLL</name></expr></argument>, <argument><expr><name>OPUS_SEEK_PREROLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKTYPE</name></expr></argument>, <argument><expr><name>MATROSKA_TRACK_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>native_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECID</name></expr></argument>, <argument><expr><literal type="string">"A_MS/ACM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subinfo</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKAUDIO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOCHANNELS</name></expr></argument> , <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample_rate_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOSAMPLINGFREQ</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output_sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOOUTSAMPLINGFREQ</name></expr></argument>, <argument><expr><name>output_sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit_depth</name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_ADPCM_G726</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit_depth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bit_depth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOBITDEPTH</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>subinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>native_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Subtitle codec %d is not supported.\n"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name> <operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>native_id</name> <operator>=</operator> <name>MATROSKA_TRACK_TYPE_SUBTITLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKTYPE</name></expr></argument>, <argument><expr><name>native_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only audio, video, and subtitles are supported for Matroska.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name> <operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codecpriv_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_codecprivate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>native_id</name></expr></argument>, <argument><expr><name>qt_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_tracks</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>default_stream_exists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKS</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>default_stream_exists</name> <operator>|=</operator> <name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>default_stream_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32_preliminary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>,
<argument><expr><name>MATROSKA_ID_TRACKS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_chapters</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>editionentry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>scale</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1E9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>||</operator> <name><name>mkv</name><operator>-&gt;</operator><name>wrote_chapters</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERS</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>editionentry</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_EDITIONENTRY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_EDITIONFLAGDEFAULT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_EDITIONFLAGHIDDEN</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>chapteratom</name></decl>, <decl><type ref="prev"/><name>chapterdisplay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>chapterstart</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>chapterend</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chapterstart</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>chapterstart</name></expr></argument> &gt;</argument_list></name> <name>chapterend</name> <operator>||</operator> <name>chapterend</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid chapter start (%"</literal><name>PRId64</name><literal type="string">") or end (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><name>chapterstart</name></expr></argument>, <argument><expr><name>chapterend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chapteratom</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERATOM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERUID</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name> <operator>+</operator> <name><name>mkv</name><operator>-&gt;</operator><name>chapter_id_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERTIMESTART</name></expr></argument>, <argument><expr><name>chapterstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERTIMEEND</name></expr></argument>, <argument><expr><name>chapterend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERFLAGHIDDEN</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERFLAGENABLED</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chapterdisplay</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERDISPLAY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPSTRING</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPLANG</name></expr></argument> , <argument><expr><literal type="string">"und"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>chapterdisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>chapteratom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>editionentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CHAPTERS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>wrote_chapters</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_simpletag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>lang</name> <operator>=</operator> <call><name>ff_convert_lang_to</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_LANG_ISO639_2_BIBL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SIMPLETAG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGNAME</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lang</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGLANG</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGSTRING</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_tag_targets</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>ebml_master</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGS</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>targets</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>elementid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_check_tag_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"stereo_mode"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"creation_time"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"encoding_tool"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>elementid</name> <operator>!=</operator> <name>MATROSKA_ID_TAGTARGETS_TRACKUID</name> <operator>||</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>elementid</name> <operator>!=</operator> <name>MATROSKA_ID_TAGTARGETS_ATTACHUID</name> <operator>||</operator>
<operator>(</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mimetype"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag_targets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mkv_check_tag_name</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_simpletag</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_check_tag</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>elementid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>mkv_check_tag_name</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>elementid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_tags</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_metadata_conv_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ff_mkv_metadata_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkv_check_tag</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mkv_check_tag</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_TRACKUID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_TRACKUID</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>tag_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag_targets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_TRACKUID</name></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SIMPLETAG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGNAME</name></expr></argument>, <argument><expr><literal type="string">"DURATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mkv_check_tag</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_CHAPTERUID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_CHAPTERUID</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>id</name></name> <operator>+</operator> <name><name>mkv</name><operator>-&gt;</operator><name>chapter_id_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>have_attachments</name></name> <operator>&amp;&amp;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mkv_attachment</name> <modifier>*</modifier></type><name>attachment</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>attachment</name><operator>-&gt;</operator><name>stream_idx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mkv_check_tag</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_ATTACHUID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGTARGETS_ATTACHUID</name></expr></argument>, <argument><expr><name><name>attachment</name><operator>-&gt;</operator><name>fileuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32_preliminary</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>,
<argument><expr><name>MATROSKA_ID_TAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_attachments</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>have_attachments</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_ATTACHMENTS</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>attached_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_attachment</name> <modifier>*</modifier></type><name>attachment</name> <init>= <expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mimetype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>fileuid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_ATTACHMENT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attachment</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mkv_attachment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attachment</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>attachment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attached_file</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_ATTACHEDFILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_FILEDESC</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attachment stream %d has no filename tag.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_FILENAME</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"mimetype"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mimetype</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_mkv_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_mkv_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mimetype</name> <operator>=</operator> <name><name>ff_mkv_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_mkv_image_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_mkv_image_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mimetype</name> <operator>=</operator> <name><name>ff_mkv_image_mime_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mimetype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attachment stream %d has no mimetype tag and "</literal>
<literal type="string">"it cannot be deduced from the codec id.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>AVSHA</name></name> <modifier>*</modifier></type><name>sha</name> <init>= <expr><call><name>av_sha_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sha</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_sha_init</name><argument_list>(<argument><expr><name>sha</name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_sha_update</name><argument_list>(<argument><expr><name>sha</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_sha_final</name><argument_list>(<argument><expr><name>sha</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fileuid</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fileuid</name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using %.8"</literal><name>PRIx32</name><literal type="string">" for attachment %d\n"</literal></expr></argument>,
<argument><expr><name>fileuid</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_FILEMIMETYPE</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_FILEDATA</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>MATROSKA_ID_FILEUID</name></expr></argument>, <argument><expr><name>fileuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>attached_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>num_entries</name></name></expr>]</index></name><operator>.</operator><name>stream_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>mkv</name><operator>-&gt;</operator><name>attachments</name><operator>-&gt;</operator><name>num_entries</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>fileuid</name> <operator>=</operator> <name>fileuid</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_ATTACHMENTS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_metadata_duration</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>us</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>explicitDuration</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"DURATION"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>explicitDuration</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><name><name>explicitDuration</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>us</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"get_metadata_duration found duration in context metadata: %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>us</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>duration</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"DURATION"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us</name></expr></argument>, <argument><expr><name><name>duration</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"get_metadata_duration returned: %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>max</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>ebml_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>version</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>creation_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"webm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_WEBM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>write_crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_MATROSKAv2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name> <operator>||</operator>
<call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"stereo_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"alpha_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name> <operator>||</operator>
<call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"stereo_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"alpha_mode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ebml_header</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_HEADER</name></expr></argument>, <argument><expr><name>MAX_EBML_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_EBMLVERSION</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_EBMLREADVERSION</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_EBMLMAXIDLENGTH</name></expr></argument> , <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_EBMLMAXSIZELENGTH</name></expr></argument> , <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_DOCTYPE</name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_DOCTYPEVERSION</name></expr></argument> , <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>EBML_ID_DOCTYPEREADVERSION</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ebml_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>segment</name></name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEGMENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>segment_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>mkv_start_seekhead</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_INFO</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TIMECODESCALE</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TITLE</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_MUXINGAPP</name></expr></argument>, <argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encoding_tool"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_WRITINGAPP</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_WRITINGAPP</name></expr></argument>, <argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>segment_uid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>lfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfg</name></expr></argument>, <argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>segment_uid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SEGMENTUID</name></expr></argument>, <argument><expr><name>segment_uid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><literal type="string">"Lavf"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_MUXINGAPP</name></expr></argument> , <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_WRITINGAPP</name></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_parse_creation_time_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>creation_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>date_utc</name> <init>= <expr><operator>(</operator><name>creation_time</name> <operator>-</operator> <literal type="number">978307200000000LL</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>date_utc_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>date_utc_buf</name></expr></argument>, <argument><expr><name>date_utc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_DATEUTC</name></expr></argument>, <argument><expr><name>date_utc_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>metadata_duration</name> <init>= <expr><call><name>get_metadata_duration</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scaledDuration</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_DURATION</name></expr></argument>, <argument><expr><name>scaledDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Write early duration from recording time = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>scaledDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>metadata_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scaledDuration</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>metadata_duration</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_DURATION</name></expr></argument>, <argument><expr><name>scaledDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Write early duration from metadata = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>scaledDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32_preliminary</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>,
<argument><expr><name>MATROSKA_ID_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>info_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tracks</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>chapter_id_offset</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>chapter_id_offset</name></name></expr></argument>, <argument><expr><literal type="number">1LL</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_chapters</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_WEBM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_attachments</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_tags</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_seekhead</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cues_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_size_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_size_limit</name></name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_size_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_size_limit</name></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_blockgroup_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pkt_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>pkt_size</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ebml_num_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt> 
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_strip_wavpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pdst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srclen</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>srclen</name> <operator>&gt;=</operator> <name>WV_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WvHeader</name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_wv_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>WV_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srclen</name> <operator>-=</operator> <name>WV_HEADER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>srclen</name> <operator>&lt;</operator> <name><name>header</name><operator>.</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>initial</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>header</name><operator>.</operator><name>initial</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>.</operator><name>final</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srclen</name> <operator>-=</operator> <name><name>header</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pdst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_block</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>blockid</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>side_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>write_dts</name></name></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>additional_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>discard_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>track_number</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name></expr> ?</condition><then> <expr><name><name>mkv</name><operator>-&gt;</operator><name>dash_track_number</name></name></expr> </then><else>: <expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>block_group</name></decl>, <decl><type ref="prev"/><name>block_additions</name></decl>, <decl><type ref="prev"/><name>block_more</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>ts_offset</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Writing block of size %d with pts %"</literal> <name>PRId64</name> <literal type="string">", dts %"</literal> <name>PRId64</name> <literal type="string">", "</literal>
<literal type="string">"duration %"</literal> <name>PRId64</name> <literal type="string">" at relative offset %"</literal> <name>PRId64</name> <literal type="string">" in cluster "</literal>
<literal type="string">"at offset %"</literal> <name>PRId64</name> <literal type="string">". TrackNumber %d, keyframe %d\n"</literal></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>, <argument><expr><name>track_number</name></expr></argument>, <argument><expr><name>keyframe</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>AV_RB24</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_avc_parse_nal_units_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>AV_RB24</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hevc_annexb2mp4_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_av1_filter_obus_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WAVPACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mkv_strip_wavpack</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error when reformatting data of "</literal>
<literal type="string">"a packet from stream %d.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PRORES</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data</name> <operator>&amp;&amp;</operator> <name>side_data_size</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>discard_padding</name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>AV_RL32(side_data + <literal type="number">4</literal>)</argument>,
<argument>(AVRational){<literal type="number">1</literal></argument>, <argument>par-&gt;sample_rate}</argument>,
<argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">1000000000</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <operator>(</operator><name>additional_id</name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>side_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>||</operator> <name>discard_padding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_group</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKGROUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blockid</name> <operator>=</operator> <name>MATROSKA_ID_BLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>blockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <name>track_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ts</name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>blockid</name> <operator>==</operator> <name>MATROSKA_ID_SIMPLEBLOCK</name> <operator>&amp;&amp;</operator> <name>keyframe</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blockid</name> <operator>==</operator> <name>MATROSKA_ID_BLOCK</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keyframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_sint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKREFERENCE</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>last_timestamp</name></name> <operator>-</operator> <name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>last_timestamp</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>discard_padding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_ebml_sint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_DISCARDPADDING</name></expr></argument>, <argument><expr><name>discard_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_additions</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKADDITIONS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_more</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKMORE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_ebml_uint</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKADDID</name></expr></argument>, <argument><expr><name>additional_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKADDITIONAL</name></expr></argument>,
<argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>block_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>block_additions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>||</operator> <name>discard_padding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>block_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_vtt_blocks</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>blockgroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id_size</name></decl>, <decl><type ref="prev"/><name>settings_size</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>id</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>write_dts</name></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_WEBVTT_IDENTIFIER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>settings_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_WEBVTT_SETTINGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>settings_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>id_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>settings_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Writing block of size %d with pts %"</literal> <name>PRId64</name> <literal type="string">", dts %"</literal> <name>PRId64</name> <literal type="string">", "</literal>
<literal type="string">"duration %"</literal> <name>PRId64</name> <literal type="string">" at relative offset %"</literal> <name>PRId64</name> <literal type="string">" in cluster "</literal>
<literal type="string">"at offset %"</literal> <name>PRId64</name> <literal type="string">". TrackNumber %d, keyframe %d\n"</literal></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockgroup</name> <operator>=</operator> <call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKGROUP</name></expr></argument>, <argument><expr><call><name>mkv_blockgroup_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_id</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_num</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ts</name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"%.*s\n%.*s\n%.*s"</literal></expr></argument>, <argument><expr><name>id_size</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>settings_size</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKDURATION</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>blockgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mkv_end_cluster</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CLUSTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_check_new_extra_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_AAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>filler</name></decl>, <decl><type ref="prev"/><name>output_sample_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_aac_sample_rates</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output_sample_rate</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>codecpriv_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkv_write_codecprivate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filler</name> <operator>=</operator> <name>MAX_PCE_SIZE</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>track</name><operator>-&gt;</operator><name>codecpriv_offset</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>filler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_rate_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOSAMPLINGFREQ</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_AUDIOOUTSAMPLINGFREQ</name></expr></argument>, <argument><expr><name>output_sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing AAC extradata, unable to determine samplerate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_FLAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpriv_par</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>!=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid FLAC STREAMINFO metadata for output stream %d\n"</literal></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>codecpriv_par</name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codecpriv_par</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name>codecpriv_par</name></expr></argument>, <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codecpriv_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>codecpriv_par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>codecpriv_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mkv_write_codecprivate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>codecpriv_par</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codecpriv_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>


<case>case <expr><name>AV_CODEC_ID_AV1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>codecpriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codecpriv_size</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_isom_write_av1c</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codecpriv_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codecpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codecpriv_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codecpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>codecpriv_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_CODECPRIVATE</name></expr></argument>, <argument><expr><name>codecpriv</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>codecpriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring new extradata in a packet for stream %d.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_packet_internal</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_cue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>write_dts</name></name></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>relative_packet_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tracknum</name> <init>= <expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name></expr> ?</condition><then> <expr><name><name>mkv</name><operator>-&gt;</operator><name>dash_track_number</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't write packet with unknown timestamp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ts</name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>ts_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_time</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>cluster_time</name> <operator>!=</operator> <name>cluster_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkv_end_cluster</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Starting new cluster due to timestamp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_CLUSTERTIMECODE</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Starting new cluster with timestamp "</literal>
<literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" at offset %"</literal> <name>PRId64</name> <literal type="string">" bytes\n"</literal></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>relative_packet_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_SIMPLEBLOCK</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>keyframe</name> <operator>||</operator> <name>add_cue</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_add_cuepoint</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name>tracknum</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>, <argument><expr><name>relative_packet_pos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>mkv_write_vtt_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ebml_master</name></type> <name>blockgroup</name> <init>= <expr><call><name>start_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKGROUP</name></expr></argument>,
<argument><expr><call><name>mkv_blockgroup_size</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CONVERGENCE_DURATION</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>convergence_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>mkv_write_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCK</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_ebml_uint</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MATROSKA_ID_BLOCKDURATION</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>blockgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_add_cuepoint</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name>tracknum</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr></argument>, <argument><expr><name>relative_packet_pos</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>ts</name> <operator>+</operator> <name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>ts</name> <operator>+</operator> <name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cluster_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cluster_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_new_cluster</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_check_new_extra_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>write_dts</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cluster_time</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cluster_time</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_pts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>cluster_time</name> <operator>+=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>.</operator><name>ts_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cluster_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name> <operator>&amp;&amp;</operator> <name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>start_new_cluster</name> <operator>=</operator> <name>keyframe</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name> <operator>&amp;&amp;</operator> <name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name>cluster_time</name> <operator>&gt;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_new_cluster</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>cluster_size</name> <operator>&gt;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_size_limit</name></name> <operator>||</operator>
<name>cluster_time</name> <operator>&gt;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cluster_time_limit</name></name> <operator>||</operator>
<operator>(</operator><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name>keyframe</name> <operator>&amp;&amp;</operator>
<name>cluster_size</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_new_cluster</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start_new_cluster</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>start_new_cluster</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkv_end_cluster</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,
<argument><expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>keyframe</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>have_video</name></name></expr> ?</condition><then> <expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><name>AVIO_DATA_MARKER_SYNC_POINT</name></expr> </then><else>: <expr><name>AVIO_DATA_MARKER_BOUNDARY_POINT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>is_dash</name></name></expr> ?</condition><then> <expr><name>start_new_cluster</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not write cached audio packet ret:%d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_flush_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_pos</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mkv_end_cluster</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Flushing cluster at offset %"</literal> <name>PRIu64</name> <literal type="string">" bytes\n"</literal></expr></argument>,
<argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>mkv_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MatroskaMuxContext</name> <modifier>*</modifier></type><name>mkv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cur_audio_pkt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Could not write cached audio packet ret:%d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cluster_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>,
<argument><expr><name>MATROSKA_ID_CLUSTER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_chapters</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>endpos</name></decl>, <decl><type ref="prev"/><name>ret64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>endpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>cues</name><operator>.</operator><name>num_entries</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>cues</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cuespos</name> <init>= <expr><name>endpos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_ebml_master_crc32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cues</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_assemble_cues</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>cues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>cues</name></name></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>cues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length_size</name> <operator>=</operator> <call><name>ebml_num_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>length_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Insufficient space reserved for Cues: "</literal>
<literal type="string">"%d &lt; %"</literal><name>PRIu64</name><literal type="string">". No Cues will be output.\n"</literal></expr></argument>,
<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>after_cues</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cuespos</name> <operator>=</operator> <name><name>mkv</name><operator>-&gt;</operator><name>cues_pos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret64</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>cues_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret64</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>==</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>length_size</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mkv_add_seekhead_entry</name><argument_list>(<argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUES</name></expr></argument>, <argument><expr><name>cuespos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cues</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_CUES</name></expr></argument>,
<argument><expr><name>length_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_ebml_void</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>endpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>after_cues</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mkv_write_seekhead</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>info_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"end duration = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_ebml_float</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_DURATION</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>info_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_INFO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tracks_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TRACKS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mkv_track</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>duration_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>duration_sec</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>duration_string</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"stream %d end duration = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>duration_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>duration_string</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%012.9f"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>duration_sec</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>duration_sec</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>,
<argument><expr><call><name>fmod</name><argument_list>(<argument><expr><name>duration_sec</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_ebml_binary</name><argument_list>(<argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGSTRING</name></expr></argument>, <argument><expr><name>duration_string</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>tags_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>end_ebml_master_crc32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mkv</name><operator>-&gt;</operator><name>tags_bc</name></name></expr></argument>, <argument><expr><name>mkv</name></expr></argument>, <argument><expr><name>MATROSKA_ID_TAGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>endpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mkv</name><operator>-&gt;</operator><name>is_live</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>end_ebml_master</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mkv</name><operator>-&gt;</operator><name>segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>mkv</name><operator>-&gt;</operator><name>reserve_cues_space</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_query_codec</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>std_compliance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_mkv_codec_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_mkv_codec_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>codec_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>std_compliance</name> <operator>&lt;</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name> <init>= <expr><call><name>avcodec_get_type</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webm_query_codec</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>std_compliance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_webm_codec_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_webm_codec_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>codec_id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <name>MAX_TRACKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"At most %d streams are supported for muxing in Matroska\n"</literal></expr></argument>,
<argument><expr><name>MAX_TRACKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ATRAC3</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_COOK</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RA_288</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SIPR</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV20</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"The Matroska muxer does not yet support muxing %s\n"</literal></expr></argument>,
<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>avoid_negative_ts_use_pts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mkv_check_bitstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfff0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"aac_adtstoasc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"vp9_superframe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>additional_audio_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_ALAC</name></expr>, <expr><literal type="number">0XFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_MLP</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_OPUS</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_QDMC</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_QDM2</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_RA_144</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_RA_288</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_COOK</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_TRUEHD</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>additional_video_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_RV10</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_RV20</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_RV30</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>additional_subtitle_tags</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_HDMV_PGS_SUBTITLE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MatroskaMuxContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"reserve_index_space"</literal></expr>, <expr><literal type="string">"Reserve a given amount of space (in bytes) at the beginning of the file for the index (cues)."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reserve_cues_space</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cluster_size_limit"</literal></expr>, <expr><literal type="string">"Store at most the provided amount of bytes in a cluster. "</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cluster_size_limit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr> , <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cluster_time_limit"</literal></expr>, <expr><literal type="string">"Store at most the provided number of milliseconds in a cluster."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cluster_time_limit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dash"</literal></expr>, <expr><literal type="string">"Create a WebM file conforming to WebM DASH specification"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>is_dash</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dash_track_number"</literal></expr>, <expr><literal type="string">"Track number for the DASH stream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dash_track_number</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"live"</literal></expr>, <expr><literal type="string">"Write files assuming it is a live stream."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>is_live</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"allow_raw_vfw"</literal></expr>, <expr><literal type="string">"allow RAW VFW mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>allow_raw_vfw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"write_crc32"</literal></expr>, <expr><literal type="string">"write a CRC32 element inside every Level 1 element"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>write_crc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MATROSKA_MUXER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>matroska_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"matroska muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_matroska_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"matroska"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Matroska"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/x-matroska"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mkv"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MatroskaMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>CONFIG_LIBVORBIS_ENCODER</name> <operator>?</operator>
<name>AV_CODEC_ID_VORBIS</name> <operator>:</operator> <name>AV_CODEC_ID_AC3</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>CONFIG_LIBX264_ENCODER</name> <operator>?</operator>
<name>AV_CODEC_ID_H264</name> <operator>:</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mkv_init</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mkv_deinit</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mkv_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mkv_write_flush_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mkv_write_trailer</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator>
<name>AVFMT_TS_NONSTRICT</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name></expr>,
<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{
<expr><name>ff_codec_bmp_tags</name></expr>, <expr><name>ff_codec_wav_tags</name></expr>,
<expr><name>additional_audio_tags</name></expr>, <expr><name>additional_video_tags</name></expr>, <expr><name>additional_subtitle_tags</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr>,
<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_ASS</name></expr>,
<expr><operator>.</operator><name>query_codec</name> <operator>=</operator> <name>mkv_query_codec</name></expr>,
<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mkv_check_bitstream</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>matroska_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WEBM_MUXER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>webm_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"webm muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_webm_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"webm"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WebM"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/webm"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"webm"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MatroskaMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>CONFIG_LIBOPUS_ENCODER</name> <operator>?</operator> <name>AV_CODEC_ID_OPUS</name> <operator>:</operator> <name>AV_CODEC_ID_VORBIS</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>CONFIG_LIBVPX_VP9_ENCODER</name><operator>?</operator> <name>AV_CODEC_ID_VP9</name> <operator>:</operator> <name>AV_CODEC_ID_VP8</name></expr>,
<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mkv_init</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mkv_deinit</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mkv_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mkv_write_flush_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mkv_write_trailer</name></expr>,
<expr><operator>.</operator><name>query_codec</name> <operator>=</operator> <name>webm_query_codec</name></expr>,
<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mkv_check_bitstream</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator>
<name>AVFMT_TS_NONSTRICT</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>webm_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MATROSKA_AUDIO_MUXER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mka_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"matroska audio muxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_matroska_audio_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"matroska"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Matroska Audio"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"audio/x-matroska"</literal></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mka"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MatroskaMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>CONFIG_LIBVORBIS_ENCODER</name> <operator>?</operator>
<name>AV_CODEC_ID_VORBIS</name> <operator>:</operator> <name>AV_CODEC_ID_AC3</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mkv_init</name></expr>,
<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mkv_deinit</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mkv_write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mkv_write_flush_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mkv_write_trailer</name></expr>,
<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mkv_check_bitstream</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name> <operator>|</operator>
<name>AVFMT_ALLOW_FLUSH</name></expr>,
<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{
<expr><name>ff_codec_wav_tags</name></expr>, <expr><name>additional_audio_tags</name></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mka_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
