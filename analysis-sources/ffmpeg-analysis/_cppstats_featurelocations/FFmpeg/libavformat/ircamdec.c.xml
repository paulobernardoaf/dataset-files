<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\ircamdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ircam.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ircam_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x64</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xA3</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x64</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xA3</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>AV_RN32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>endianess</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_le</name></decl>;</decl_stmt>
}</block> <decl><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x64A30100</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x64A30200</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x64A30300</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x64A30400</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0001A364</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0002A364</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0003A364</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ircam_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>, <decl><type ref="prev"/><name>sample_rate</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>le</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>magic</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>magic</name> <operator>==</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>le</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_le</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>le</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>av_int2float</name><argument_list>(<argument><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <name>ff_codec_ircam_le_tags</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>le</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>av_int2float</name><argument_list>(<argument><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <name>ff_codec_ircam_be_tags</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name> <operator>||</operator> <operator>!</operator><name>sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>FF_SANE_NB_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown tag %"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ircam_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ircam"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Berkeley/IRCAM/CARL Sound Format"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ircam_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ircam_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_pcm_read_packet</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>ff_pcm_read_seek</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"sf,ircam"</literal></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
