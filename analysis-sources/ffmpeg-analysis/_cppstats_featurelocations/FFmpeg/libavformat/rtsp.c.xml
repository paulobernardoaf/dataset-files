<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\rtsp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POLL_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpproto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpenc_chain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpenc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegts.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_TIMEOUT_MS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_PACKET_TIMEOUT_S</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TIMEOUTS</name></cpp:macro> <cpp:value>READ_PACKET_TIMEOUT_S * 1000 / POLL_TIMEOUT_MS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDP_MAX_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECVBUF_SIZE</name></cpp:macro> <cpp:value>10 * RTP_MAX_PACKET_LENGTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_REORDERING_DELAY</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RTSPState, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_FLAG_OPTS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>longname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, longname, OFFSET(rtsp_flags), AV_OPT_TYPE_FLAGS, {.i64 = 0}, INT_MIN, INT_MAX, DEC, "rtsp_flags" }, { "filter_src", "only receive packets from the negotiated peer IP", 0, AV_OPT_TYPE_CONST, {.i64 = RTSP_FLAG_FILTER_SRC}, 0, 0, DEC, "rtsp_flags" }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSP_MEDIATYPE_OPTS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>longname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, longname, OFFSET(media_type_mask), AV_OPT_TYPE_FLAGS, { .i64 = (1 &lt;&lt; (AVMEDIA_TYPE_SUBTITLE+1)) - 1 }, INT_MIN, INT_MAX, DEC, "allowed_media_types" }, { "video", "Video", 0, AV_OPT_TYPE_CONST, {.i64 = 1 &lt;&lt; AVMEDIA_TYPE_VIDEO}, 0, 0, DEC, "allowed_media_types" }, { "audio", "Audio", 0, AV_OPT_TYPE_CONST, {.i64 = 1 &lt;&lt; AVMEDIA_TYPE_AUDIO}, 0, 0, DEC, "allowed_media_types" }, { "data", "Data", 0, AV_OPT_TYPE_CONST, {.i64 = 1 &lt;&lt; AVMEDIA_TYPE_DATA}, 0, 0, DEC, "allowed_media_types" }, { "subtitle", "Subtitle", 0, AV_OPT_TYPE_CONST, {.i64 = 1 &lt;&lt; AVMEDIA_TYPE_SUBTITLE}, 0, 0, DEC, "allowed_media_types" }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ "reorder_queue_size", "set number of packets to buffer for handling of reordered packets", OFFSET(reordering_queue_size), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, INT_MAX, DEC }, { "buffer_size", "Underlying protocol send/receive buffer size", OFFSET(buffer_size), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, INT_MAX, DEC|ENC }, { "pkt_size", "Underlying protocol send packet size", OFFSET(pkt_size), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, INT_MAX, ENC }</cpp:value></cpp:define> 





<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name></type> <name><name>ff_rtsp_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"initial_pause"</literal></expr>, <expr><literal type="string">"do not start playing the stream immediately"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>initial_pause</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><call><name>FF_RTP_FLAG_OPTS</name><argument_list>(<argument><expr><name>RTSPState</name></expr></argument>, <argument><expr><name>rtp_muxer_flags</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"rtsp_transport"</literal></expr>, <expr><literal type="string">"set RTSP transport protocols"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lower_transport_mask</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>, \
<expr><block>{ <expr><literal type="string">"udp"</literal></expr>, <expr><literal type="string">"UDP"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>, \
<expr><block>{ <expr><literal type="string">"tcp"</literal></expr>, <expr><literal type="string">"TCP"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>, \
<expr><block>{ <expr><literal type="string">"udp_multicast"</literal></expr>, <expr><literal type="string">"UDP multicast"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http"</literal></expr>, <expr><literal type="string">"HTTP tunneling"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_HTTP</name><operator>)</operator></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"https"</literal></expr>, <expr><literal type="string">"HTTPS tunneling"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_HTTPS</name> <operator>)</operator></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_transport"</literal></expr> }</block></expr>,
<expr><call><name>RTSP_FLAG_OPTS</name><argument_list>(<argument><expr><literal type="string">"rtsp_flags"</literal></expr></argument>, <argument><expr><literal type="string">"set RTSP flags"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"listen"</literal></expr>, <expr><literal type="string">"wait for incoming connections"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_FLAG_LISTEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prefer_tcp"</literal></expr>, <expr><literal type="string">"try RTP via TCP first, if available"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_FLAG_PREFER_TCP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>, <expr><literal type="string">"rtsp_flags"</literal></expr> }</block></expr>,
<expr><call><name>RTSP_MEDIATYPE_OPTS</name><argument_list>(<argument><expr><literal type="string">"allowed_media_types"</literal></expr></argument>, <argument><expr><literal type="string">"set media types to accept from the server"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"min_port"</literal></expr>, <expr><literal type="string">"set minimum local UDP port"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rtp_port_min</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_RTP_PORT_MIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"max_port"</literal></expr>, <expr><literal type="string">"set maximum local UDP port"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rtp_port_max</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_RTP_PORT_MAX</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"listen_timeout"</literal></expr>, <expr><literal type="string">"set maximum timeout (in seconds) to wait for incoming connections (-1 is infinite, imply flag listen)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>initial_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_RTSP_OPTIONS</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="string">"set maximum timeout (in seconds) to wait for incoming connections (-1 is infinite, imply flag listen) (deprecated, use listen_timeout)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>initial_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stimeout"</literal></expr>, <expr><literal type="string">"set timeout (in microseconds) of socket TCP I/O operations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stimeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="string">"set timeout (in microseconds) of socket TCP I/O operations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stimeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>COMMON_OPTS</name><argument_list>()</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"user_agent"</literal></expr>, <expr><literal type="string">"override User-Agent header"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>LIBAVFORMAT_IDENT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_RTSP_OPTIONS</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"user-agent"</literal></expr>, <expr><literal type="string">"override User-Agent header (deprecated, use user_agent)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>LIBAVFORMAT_IDENT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sdp_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>RTSP_FLAG_OPTS</name><argument_list>(<argument><expr><literal type="string">"sdp_flags"</literal></expr></argument>, <argument><expr><literal type="string">"SDP flags"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"custom_io"</literal></expr>, <expr><literal type="string">"use custom I/O"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_FLAG_CUSTOM_IO</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtcp_to_source"</literal></expr>, <expr><literal type="string">"send RTCP packets to the source address of received packets"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>RTSP_FLAG_RTCP_TO_SOURCE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtsp_flags"</literal></expr> }</block></expr>,
<expr><call><name>RTSP_MEDIATYPE_OPTS</name><argument_list>(<argument><expr><literal type="string">"allowed_media_types"</literal></expr></argument>, <argument><expr><literal type="string">"set media types to accept from the server"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>COMMON_OPTS</name><argument_list>()</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>rtp_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>RTSP_FLAG_OPTS</name><argument_list>(<argument><expr><literal type="string">"rtp_flags"</literal></expr></argument>, <argument><expr><literal type="string">"set RTP flags"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>COMMON_OPTS</name><argument_list>()</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>map_to_opts</name><parameter_list>(<parameter><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"buffer_size"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>pkt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"pkt_size"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>opts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_word_until_chars</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>sep</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_word_sep</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>pp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word_until_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_word</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_word_until_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>rtsp_parse_range_npt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"npt="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_time</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_time</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse interval end specification '%s'\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sockaddr</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo(%s): %s\n"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>,
<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTPDEC</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_rtp_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>,
<parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><ternary><condition><expr><name>st</name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>par</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>handler</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name><name>handler</name><operator>-&gt;</operator><name>need_parsing</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handler</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>handler</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finalize_rtp_handler_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>&amp;&amp;</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>st</name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>close</name></name><argument_list>(
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sdp_parse_rtpmap</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>payload_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_name</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/ "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&lt;</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_rtp_codec_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name> <init>=
<expr><call><name>ff_rtp_handler_find_by_name</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_rtp_handler</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_rtp_codec_id</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c_name</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c_name</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio codec set to: %s\n"</literal></expr></argument>, <argument><expr><name>c_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>RTSP_DEFAULT_AUDIO_SAMPLERATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>RTSP_DEFAULT_NB_AUDIO_CHANNELS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio samplerate set to: %i\n"</literal></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio channels set to: %i\n"</literal></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"video codec set to: %s\n"</literal></expr></argument>, <argument><expr><name>c_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>finalize_rtp_handler_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>ff_rtsp_next_attr_and_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr_size</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attr_size</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SDPParseState</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>default_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_media</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_default_include_source_addrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>RTSPSource</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>default_include_source_addrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_default_exclude_source_addrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>RTSPSource</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>default_exclude_source_addrs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>seen_rtpmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_fmtp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>delayed_fmtp</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SDPParseState</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_default_source_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>RTSPSource</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>addrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>RTSPSource</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPSource</name> <modifier>*</modifier></type><name>rtsp_src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rtsp_src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtsp_src</name> <operator>=</operator> <name><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtsp_src2</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rtsp_src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtsp_src2</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rtsp_src2</name></expr></argument>, <argument><expr><name>rtsp_src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rtsp_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest_count</name></expr></argument>, <argument><expr><name>rtsp_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_fmtp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>payload_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name> <operator>==</operator> <name>payload_type</name> <operator>&amp;&amp;</operator>
<name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>&amp;&amp;</operator>
<name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>parse_sdp_a_line</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>parse_sdp_a_line</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdp_parse_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SDPParseState</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>st_type</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>payload_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPSource</name> <modifier>*</modifier></type><name>rtsp_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sdp_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sdp: %c='%s'\n"</literal></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>skip_media</name></name> <operator>&amp;&amp;</operator> <name>letter</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>letter</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IP4"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IP6"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_sockaddr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdp_ip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>default_ip</name></name> <operator>=</operator> <name>sdp_ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>default_ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ip</name></name> <operator>=</operator> <name>sdp_ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>skip_media</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>seen_fmtp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>seen_rtpmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>st_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>st_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>st_type</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>st_type</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>st_type</name></expr></argument>, <argument><expr><literal type="string">"application"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>st_type</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_UNKNOWN</name> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>media_type_mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>codec_type</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_streams</name></name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>skip_media</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTSPStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtsp_st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ip</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>default_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ttl</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>default_ttl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_default_source_addrs</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>default_include_source_addrs</name></name></expr></argument>,
<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>nb_default_include_source_addrs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>include_source_addrs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_include_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_default_source_addrs</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>default_exclude_source_addrs</name></name></expr></argument>,
<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>nb_default_exclude_source_addrs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>exclude_source_addrs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_exclude_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>RTSP_TRANSPORT_RAW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"/AVPF"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"/SAVPF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>feedback</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>ff_rtp_enc_name</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MP2T"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RAW</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>avpriv_mpegts_parse_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>ff_rtp_handler_find_by_id</name><argument_list>(
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rtp_handler</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finalize_rtp_handler_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator>
<name>codec_type</name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition> <block>{<block_content>


</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>codec_type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name> <operator>&lt;</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rtp_get_codec_info</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>ff_rtp_handler_find_by_id</name><argument_list>(
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rtp_handler</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>finalize_rtp_handler_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>default_lang</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>default_lang</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"control:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"rtsp://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>proto</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proto</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"rtpmap:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_type</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdp_parse_rtpmap</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>seen_rtpmap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>seen_fmtp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_fmtp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>delayed_fmtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"fmtp:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"framesize:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>payload_type</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>seen_rtpmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_fmtp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>seen_fmtp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>delayed_fmtp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>delayed_fmtp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ssrc:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"range:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rtsp_parse_range_npt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>end</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then>
<expr><name>AV_NOPTS_VALUE</name></expr> </then><else>: <expr><name>end</name> <operator>-</operator> <name>start</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"lang:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>default_lang</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>default_lang</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"IsRealDataType:integer;"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>RTSP_TRANSPORT_RDT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"SampleRate:integer;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"crypto:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_suite</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_suite</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"inline:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_params</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_params</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"source-filter:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exclude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"incl"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"excl"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>exclude</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"excl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IP4"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"IP6"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtsp_src</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rtsp_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtsp_src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name><name>rtsp_src</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_src</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exclude</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_exclude_source_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_default_exclude_source_addrs</name></name></expr></argument>, <argument><expr><name>rtsp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>exclude_source_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_exclude_source_addrs</name></name></expr></argument>, <argument><expr><name>rtsp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_include_source_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>nb_default_include_source_addrs</name></name></expr></argument>, <argument><expr><name>rtsp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>include_source_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_include_source_addrs</name></name></expr></argument>, <argument><expr><name>rtsp_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_wms_parse_sdp_a_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_real_parse_sdp_a_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>&amp;&amp;</operator>
<name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>parse_sdp_a_line</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>parse_sdp_a_line</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_sdp_parse</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>letter</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDPParseState</name></type> <name>sdp_parse_state</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>&amp;</operator><name>sdp_parse_state</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>letter</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>next_line</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdp_parse_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>next_line</name>:</label>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_default_include_source_addrs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_include_source_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_include_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s1</name><operator>-&gt;</operator><name>nb_default_exclude_source_addrs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_exclude_source_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>default_exclude_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_rtsp_undo_setup</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_packets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtsp_st</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name>rtpctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CONFIG_RTSP_MUXER</name> <operator>&amp;&amp;</operator> <name><name>rtpctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <name>send_packets</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtsp_tcp_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtpctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtpctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name>rtpctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rdt_parse_close</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtp_parse_close</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_rtsp_close_streams</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rtsp_undo_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rtsp_st</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name> <operator>&amp;&amp;</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name><operator>-&gt;</operator><name>close</name></name><argument_list>(
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_include_source_addrs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>include_source_addrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>include_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_exclude_source_addrs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>exclude_source_addrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>exclude_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rtsp_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>asf_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>asf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_mpegts_parse_close</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_open_transport_ctx</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reordering_queue_size</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>reordering_queue_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>reordering_queue_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reordering_queue_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reordering_queue_size</name> <operator>=</operator> <name>RTP_REORDER_QUEUE_DEFAULT_SIZE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_RTSP_MUXER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <name>st</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_rtp_chain_mux_open</name><argument_list>(<argument><expr><operator>(</operator><name>AVFormatContext</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>,
<argument><expr><name>RTSP_TCP_MAX_PACKET_SIZE</name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVFormatContext</name><operator>*</operator><operator>)</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name><operator>)</operator><operator>-&gt;</operator><name><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RAW</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name> <operator>&amp;&amp;</operator> <name>st</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name> <operator>=</operator> <call><name>ff_rdt_parse_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name> <operator>=</operator> <call><name>ff_rtp_parse_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_payload_type</name></name></expr></argument>,
<argument><expr><name>reordering_queue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>ssrc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtp_parse_set_dynamic_protocol</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>dynamic_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_suite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtp_parse_set_crypto</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_suite</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>crypto_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTSP_DEMUXER</name> <operator>||</operator> <name>CONFIG_RTSP_MUXER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rtsp_parse_range</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>min_ptr</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>max_ptr</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>min_ptr</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>max_ptr</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rtsp_parse_transport</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>transport_protocol</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>profile</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lower_transport</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>parameter</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPTransportField</name> <modifier>*</modifier></type><name>th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>nb_transports</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>&amp;</operator><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><name><name>reply</name><operator>-&gt;</operator><name>nb_transports</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name> <argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/;,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lower_transport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>lower_transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lower_transport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">";,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>RTSP_TRANSPORT_RTP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name> <argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>, <argument><expr><literal type="string">"x-pn-tng"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>av_strcasecmp</name> <argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>, <argument><expr><literal type="string">"x-real-rdt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>lower_transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lower_transport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/;,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>profile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>RTSP_TRANSPORT_RDT</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>transport_protocol</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/;,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lower_transport</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>lower_transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lower_transport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">";,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>RTSP_TRANSPORT_RAW</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>lower_transport</name></expr></argument>, <argument><expr><literal type="string">"TCP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parameter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"=;,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_parse_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>port_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>port_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"client_port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_parse_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>client_port_min</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>client_port_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"server_port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_parse_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>server_port_min</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>server_port_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"interleaved"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rtsp_parse_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interleaved_min</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>interleaved_max</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"multicast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>th</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"destination"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_sockaddr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>th</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";, "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"record"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>th</name><operator>-&gt;</operator><name>mode_record</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>nb_transports</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>nb_transports</name></name> <operator>&gt;=</operator> <name>RTSP_MAX_TRANSPORTS</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_rtp_info</name><parameter_list>(<parameter><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>seq</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rtptime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtptime</name> <operator>||</operator> <operator>!</operator><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtpctx</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>base_timestamp</name></name> <operator>=</operator> <name>rtptime</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtsp_parse_rtp_info</name><parameter_list>(<parameter><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>value</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rtptime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";, "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"rtptime"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rtptime</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_rtp_info</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>rtptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seq</name> <operator>=</operator> <name>rtptime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>handle_rtp_info</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name>rtptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtsp_parse_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Session:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_word_sep</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">";timeout="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>t</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Transport:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtsp_parse_transport</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CSeq:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Range:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rtsp_parse_range_npt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reply</name><operator>-&gt;</operator><name>range_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reply</name><operator>-&gt;</operator><name>range_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"RealChallenge1:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Server:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Notice:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"X-Notice:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Location:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"WWW-Authenticate:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_http_auth_handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><literal type="string">"WWW-Authenticate"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Authentication-Info:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_http_auth_handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><literal type="string">"Authentication-Info"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Content-Base:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"DESCRIBE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"RTP-Info:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>method</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"PLAY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rtsp_parse_rtp_info</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Public:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"GET_PARAMETER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>method</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>get_parameter_supported</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"x-Accept-Dynamic-Rate:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>accept_dynamic_rate</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Content-Type:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_rtsp_skip_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>len1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"skipping RTP packet len=%d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>len1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_read_reply</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>content_ptr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>return_on_interleaved_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>content_length</name></decl>, <decl><type ref="prev"/><name>line_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>request</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<label><name>start</name>:</label>
<expr_stmt><expr><name>line_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"ret=%d c=%02x [%c]\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>return_on_interleaved_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtsp_skip_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"line='%s'\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"RTSP/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_word</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>request</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_parse_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>line_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>request</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>content_length</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>content_length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>content_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>content_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>content</name><index>[<expr><name>content_length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>content_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>content_ptr</name> <operator>=</operator> <name>content</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>request</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>base64buf</name><index>[<expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RTSP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>seq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CSeq: %d\r\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Session: %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RTSP/1.0 501 Not Implemented\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>==</operator> <name>RTSP_MODE_TUNNEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>base64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>base64buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>last_cmd_time</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>content_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>content_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>method</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>start</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name> <operator>!=</operator> <name><name>reply</name><operator>-&gt;</operator><name>seq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"CSeq %d expected, %d received.\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>==</operator> <literal type="number">2101</literal> <operator>||</operator>
<name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>==</operator> <literal type="number">2104</literal> <operator>||</operator>
<name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>==</operator> <literal type="number">2306</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>&gt;=</operator> <literal type="number">4400</literal> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>&lt;</operator> <literal type="number">5500</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>==</operator> <literal type="number">2401</literal> <operator>||</operator>
<operator>(</operator><name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>&gt;=</operator> <literal type="number">5500</literal> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>notice</name></name> <operator>&lt;</operator> <literal type="number">5600</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>int</name></type> <name>rtsp_send_cmd_with_content_async</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>send_content</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>send_content_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>base64buf</name><index>[<expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTCONN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s RTSP/1.0\r\n"</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>headers</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CSeq: %d\r\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"User-Agent: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>headers</name> <operator>||</operator>
<operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="string">"\nIf-Match:"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Session: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>auth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ff_http_auth_create_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>send_content_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>send_content</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Content-Length: %d\r\n"</literal></expr></argument>, <argument><expr><name>send_content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>==</operator> <name>RTSP_MODE_TUNNEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>base64buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>base64buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name>base64buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Sending:\n%s--\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>send_content_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>send_content</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>==</operator> <name>RTSP_MODE_TUNNEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Tunneling of RTSP requests with content data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name>send_content</name></expr></argument>, <argument><expr><name>send_content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>last_cmd_time</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_send_cmd_async</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rtsp_send_cmd_with_content_async</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_send_cmd</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>headers</name></decl></parameter>, <parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>content_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_rtsp_send_cmd_with_content</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>,
<argument><expr><name>content_ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_send_cmd_with_content</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,
<parameter><decl><type><name>RTSPMessageHeader</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>content_ptr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>send_content</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>send_content_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPAuthType</name></type> <name>cur_auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>attempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>
<expr_stmt><expr><name>cur_auth_type</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rtsp_send_cmd_with_content_async</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
<argument><expr><name>send_content</name></expr></argument>,
<argument><expr><name>send_content_length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_read_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>content_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>attempts</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>==</operator> <literal type="number">401</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>cur_auth_type</name> <operator>==</operator> <name>HTTP_AUTH_NONE</name> <operator>||</operator> <name><name>rt</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>stale</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>rt</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name> <operator>&amp;&amp;</operator> <name>attempts</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>&gt;</operator> <literal type="number">400</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"method %s failed: %d%s\n"</literal></expr></argument>,
<argument><expr><name>method</name></expr></argument>,
<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>,
<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>last_reply</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_make_setup_request</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lower_transport</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_challenge</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>interleave</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>port_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trans_pref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_pref</name> <operator>=</operator> <literal type="string">"x-pn-tng"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RAW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_pref</name> <operator>=</operator> <literal type="string">"RAW/RAW"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>trans_pref</name> <operator>=</operator> <literal type="string">"RTP/AVP"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>port_off</name> <operator>=</operator> <call><name>av_get_random_seed</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_min</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>port_off</name> <operator>-=</operator> <name>port_off</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_min</name></name> <operator>+</operator> <name>port_off</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>transport</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>lower_transport</name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name> <operator>&amp;&amp;</operator>
<name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>rtx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rtx</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>rtx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>rtx</name></expr>]</index></name><operator>-&gt;</operator><name>control_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>rtx</name></expr>]</index></name><operator>-&gt;</operator><name>control_url</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="string">"/rtx"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>rtx</name> <operator>==</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>rtx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <name>rtx</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>lower_transport</name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client_port_min</name></expr>;</expr_stmt>
<goto>goto <name>have_port</name>;</goto>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>map_to_opts</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"?localport=%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>rtp_opened</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open an input RTP port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>

<label><name>rtp_opened</name>:</label>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ff_rtp_get_local_rtp_port</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>have_port</name>:</label>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s/UDP;"</literal></expr></argument>, <argument><expr><name>trans_pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>!=</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"unicast;"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"client_port=%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-%d"</literal></expr></argument>, <argument><expr><name>port</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>lower_transport</name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator>
<name>AVMEDIA_TYPE_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s/TCP;"</literal></expr></argument>, <argument><expr><name>trans_pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>!=</operator> <name>RTSP_TRANSPORT_RDT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"unicast;"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"interleaved=%d-%d"</literal></expr></argument>,
<argument><expr><name>interleave</name></expr></argument>, <argument><expr><name>interleave</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>interleave</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>lower_transport</name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s/UDP;multicast"</literal></expr></argument>, <argument><expr><name>trans_pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">";mode=record"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name> <operator>||</operator>
<name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">";mode=play"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Transport: %s\r\n"</literal></expr></argument>,
<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>accept_dynamic_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"x-Dynamic-Rate: 0\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>real_res</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>real_csum</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_rdt_calc_response_and_checksum</name><argument_list>(<argument><expr><name>real_res</name></expr></argument>, <argument><expr><name>real_csum</name></expr></argument>,
<argument><expr><name>real_challenge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"If-Match: %s\r\n"</literal>
<literal type="string">"RealChallenge2: %s, sd=%s\r\n"</literal></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name></name></expr></argument>, <argument><expr><name>real_res</name></expr></argument>, <argument><expr><name>real_csum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"SETUP"</literal></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>control_url</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>==</operator> <literal type="number">461</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name> <operator>||</operator>
<name><name>reply</name><operator>-&gt;</operator><name>nb_transports</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lower_transport</name> <operator>!=</operator> <name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>||</operator>
<name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>transport</name> <operator>!=</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lower_transport</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>transport</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lower_transport</name> <operator>!=</operator> <name>lower_transport</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Nonmatching transport in server reply\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lower_transport</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_min</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>interleaved_max</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>interleaved_max</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>options</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>host</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_FILTER_SRC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"?connect=1"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>peer</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>,
<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>server_port_min</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_WMS</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ff_rtp_set_remote_url</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>namebuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>optbuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>ttl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>destination</name><operator>.</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>destination</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>transports</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ttl</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ttl</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>optbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"?ttl=%d"</literal></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>,
<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_rtsp_open_transport_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>need_subscription</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_rtsp_undo_setup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtsp_close_connections</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name> <operator>!=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_connect</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>proto</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tcpname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cmd</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>auth</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lower_rtsp_proto</name> <init>= <expr><literal type="string">"tcp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>tcp_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reply</name> <init>= <expr><operator>&amp;</operator><name>reply1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lower_transport_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_port</name> <init>= <expr><name>RTSP_DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>https_tunnel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>real_challenge</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>peer_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtp_port_min</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid UDP port range, max port %d less "</literal>
<literal type="string">"than min port %d\n"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtp_port_max</name></name></expr></argument>,
<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtp_port_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_network_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr> ?</condition><then> <expr><name>DEFAULT_REORDERING_DELAY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>=</operator> <name>RTSP_MODE_PLAIN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_HTTP</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_HTTPS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>https_tunnel</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_HTTPS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>=</operator> <name>RTSP_MODE_TUNNEL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_NB</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>redirect</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"rtsps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lower_rtsp_proto</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>default_port</name> <operator>=</operator> <name>RTSPS_DEFAULT_PORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>auth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>default_port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lower_transport_mask</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lower_transport_mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lower_transport_mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_NB</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lower_transport_mask</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_UDP</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lower_transport_mask</name> <operator>||</operator> <name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>==</operator> <name>RTSP_MODE_TUNNEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported lower transport method, "</literal>
<literal type="string">"only UDP and TCP are supported for output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>control_transport</name></name> <operator>==</operator> <name>RTSP_MODE_TUNNEL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>httpname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sessioncookie</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>headers</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>stimeout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>httpname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>httpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><name>https_tunnel</name></expr> ?</condition><then> <expr><literal type="string">"https"</literal></expr> </then><else>: <expr><literal type="string">"http"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sessioncookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sessioncookie</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%08x%08x"</literal></expr></argument>,
<argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ffurl_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>httpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"x-sessioncookie: %s\r\n"</literal>
<literal type="string">"Accept: application/x-rtsp-tunnelled\r\n"</literal>
<literal type="string">"Pragma: no-cache\r\n"</literal>
<literal type="string">"Cache-Control: no-cache\r\n"</literal></expr></argument>,
<argument><expr><name>sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ffurl_connect</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ffurl_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name>httpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"x-sessioncookie: %s\r\n"</literal>
<literal type="string">"Content-Type: application/x-rtsp-tunnelled\r\n"</literal>
<literal type="string">"Pragma: no-cache\r\n"</literal>
<literal type="string">"Cache-Control: no-cache\r\n"</literal>
<literal type="string">"Content-Length: 32767\r\n"</literal>
<literal type="string">"Expires: Sun, 9 Jan 1972 00:00:00 GMT\r\n"</literal></expr></argument>,
<argument><expr><name>sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"chunked_post"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"send_expect_100"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

















<expr_stmt><expr><call><name>ff_http_init_auth_state</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ffurl_connect</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>tcpname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tcpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lower_rtsp_proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><literal type="string">"?timeout=%d"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>stimeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>, <argument><expr><name>tcpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd_out</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tcp_fd</name> <operator>=</operator> <call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tcp_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>tcp_fd</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getpeername</name><argument_list>(<argument><expr><name>tcp_fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name>peer_len</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>=</operator> <name>RTSP_SERVER_RTP</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,









<argument><expr><literal type="string">"ClientChallenge: 9e26d33f2984236010ef6253fb1887f7\r\n"</literal>
<literal type="string">"PlayerStarttime: [28/03/2003:22:50:23 00:00]\r\n"</literal>
<literal type="string">"CompanyID: KnKV4M4I/B2FjJ1TToLycw==\r\n"</literal>
<literal type="string">"GUID: 00000000-0000-0000-0000-000000000000\r\n"</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtsp_send_cmd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>control_uri</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <name>RTSP_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_rtsp_averror</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>AVERROR_INVALIDDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>!=</operator> <name>RTSP_SERVER_REAL</name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>real_challenge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>=</operator> <name>RTSP_SERVER_REAL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="string">"WMServer/"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>=</operator> <name>RTSP_SERVER_WMS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>real_challenge</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>CONFIG_RTSP_DEMUXER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_rtsp_setup_input_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>CONFIG_RTSP_MUXER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_rtsp_setup_output_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lower_transport</name> <init>= <expr><name><name>ff_log2_tab</name><index>[<expr><name>lower_transport_mask</name> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>lower_transport_mask</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lower_transport_mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_PREFER_TCP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lower_transport</name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_TCP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_rtsp_make_setup_request</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>lower_transport</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>rt</name><operator>-&gt;</operator><name>server_type</name></name> <operator>==</operator> <name>RTSP_SERVER_REAL</name></expr> ?</condition><then>
<expr><name>real_challenge</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lower_transport_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lower_transport</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lower_transport_mask</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>err</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport_mask</name></name> <operator>=</operator> <name>lower_transport_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>, <argument><expr><name>real_challenge</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>real_challenge</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>RTSP_STATE_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>seek_timestamp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_rtsp_close_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_rtsp_close_connections</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>&gt;=</operator><literal type="number">300</literal> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name> <operator>&lt;</operator> <literal type="number">400</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_url</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_url</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail2</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>session_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Status %d: Redirecting to %s\n"</literal></expr></argument>,
<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redirect</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>fail2</name>:</label>
<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTPDEC</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_rtsp_message</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_LISTEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_rtsp_parse_streaming_commands</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unable to answer to TEARDOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>RTSPMessageHeader</name></type> <name>reply</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtsp_read_reply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>RTSP_STATE_STREAMING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>udp_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>prtsp_st</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>wait_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>timeout_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>fdsnum</name></decl>, <decl><type ref="prev"/><name>fdsidx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>max_p</name></name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>max_p</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>ffurl_get_multi_file_handle</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdsnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to recover rtp ports\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fdsnum</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Number of fds %d not supported\n"</literal></expr></argument>, <argument><expr><name>fdsnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>fdsidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fdsidx</name> <operator>&lt;</operator> <name>fdsnum</name></expr>;</condition> <incr><expr><name>fdsidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>max_p</name></name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>fds</name><index>[<expr><name>fdsidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>max_p</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wait_end</name> <operator>&amp;&amp;</operator> <name>wait_end</name> <operator>-</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>max_p</name></name></expr></argument>, <argument><expr><name>POLL_TIMEOUT_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>timeout_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name> <operator>||</operator> <name><name>p</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>prtsp_st</name> <operator>=</operator> <name>rtsp_st</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTSP_DEMUXER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_hd</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_rtsp_message</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>timeout_cnt</name> <operator>&gt;=</operator> <name>MAX_TIMEOUTS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pick_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>no_ssrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>transport_priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtpctx</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtpctx</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>==</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtpctx</name><operator>-&gt;</operator><name>ssrc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no_ssrc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>no_ssrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unable to pick stream for packet - SSRC not known for "</literal>
<literal type="string">"all streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sdp_payload_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to pick stream for packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>rtsp_st</name></decl></parameter>, <parameter><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>first_queue_st</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>wait_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTSP_DEMUXER</name></expr></cpp:if>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_TCP</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ff_rtsp_tcp_read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>RECVBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_UDP</name></expr>:</case>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>udp_read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>RECVBUF_SIZE</name></expr></argument>, <argument><expr><name>wait_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>rtsp_st</name><operator>)</operator><operator>-&gt;</operator><name>transport_priv</name></name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtp_check_and_send_back_rr</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>rtsp_st</name><operator>)</operator><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>rtsp_st</name><operator>)</operator><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>RTSP_LOWER_TRANSPORT_CUSTOM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>first_queue_st</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name> <operator>&amp;&amp;</operator>
<name>wait_end</name> <operator>&amp;&amp;</operator> <name>wait_end</name> <operator>&lt;</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_read_partial</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>RECVBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pick_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>rtsp_st</name><operator>)</operator><operator>-&gt;</operator><name>transport_priv</name></name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_rtp_check_and_send_back_rr</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>rtsp_st</name><operator>)</operator><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtsp_fetch_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first_queue_st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>wait_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_byes</name></name> <operator>==</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rdt_parse_packet</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtp_parse_packet</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegts_parse_packet</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name> <operator>+</operator> <name><name>rt</name><operator>-&gt;</operator><name>recvbuf_pos</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf_len</name></name> <operator>-</operator> <name><name>rt</name><operator>-&gt;</operator><name>recvbuf_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf_pos</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>recvbuf_pos</name></name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>recvbuf_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>redo</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_queue_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>transport_priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>queue_time</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtpctx</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>queue_time</name> <operator>=</operator> <call><name>ff_rtp_queued_packet_time</name><argument_list>(<argument><expr><name>rtpctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>queue_time</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>queue_time</name> <operator>-</operator> <name>first_queue_time</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>!</operator><name>first_queue_time</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_queue_time</name> <operator>=</operator> <name>queue_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_queue_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>first_queue_time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wait_end</name> <operator>=</operator> <name>first_queue_time</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wait_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>first_queue_st</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>RECVBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtsp_st</name></expr></argument>, <argument><expr><name>first_queue_st</name></expr></argument>, <argument><expr><name>wait_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>first_queue_st</name> <operator>&amp;&amp;</operator>
<name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"max delay reached. need to consume packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name>first_queue_st</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtp_parse_packet</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RDT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rdt_parse_packet</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>RTSP_TRANSPORT_RTP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rtp_parse_packet</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>feedback</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>==</operator> <name>RTSP_LOWER_TRANSPORT_CUSTOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtp_send_rtcp_feedback</name><argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx</name> <init>= <expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtpctx</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>rtpctx2</name> <init>= <expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>transport_priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rtpctx2</name> <operator>&amp;&amp;</operator> <name>st</name> <operator>&amp;&amp;</operator> <name>st2</name> <operator>&amp;&amp;</operator>
<name><name>rtpctx2</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rtpctx2</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>=</operator> <name><name>rtpctx</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtpctx2</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(
<argument><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,
<argument><expr><name><name>st2</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_time_realtime</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_time_realtime</name></name> <operator>=</operator> <call><name>av_rescale</name> <argument_list>(<argument><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>-</operator> <operator>(</operator><name>NTP_OFFSET</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtpctx</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_time_realtime</name></name> <operator>-=</operator>
<call><name>av_rescale</name> <argument_list>(<argument><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>rtpctx</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>,
<argument><expr><name><name>rtpctx</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><name>RTCP_BYE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>nb_byes</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received BYE for stream %d (%d/%d)\n"</literal></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>nb_byes</name></name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>nb_byes</name></name> <operator>==</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RTPDEC</name> <operator>&amp;&amp;</operator> <name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegts_parse_packet</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>recvbuf_pos</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>cur_transport_priv</name></name> <operator>=</operator> <name><name>rtsp_st</name><operator>-&gt;</operator><name>transport_priv</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SDP_DEMUXER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sdp_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p1</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name> <init>= <expr><name><name>p1</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p1</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>p_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"c=IN IP"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>p_end</name> <operator>-</operator> <name>p</name> <operator>&amp;&amp;</operator>
<call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"c=IN IP"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>p_end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>p</name> <operator>&gt;=</operator> <name>p_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_source_addrs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>RTSPSource</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"&amp;%s=%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">",%s"</literal></expr></argument>, <argument><expr><name><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdp_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPStream</name> <modifier>*</modifier></type><name>rtsp_st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_network_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>=</operator> <name>DEFAULT_REORDERING_DELAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_CUSTOM_IO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>lower_transport</name></name> <operator>=</operator> <name>RTSP_LOWER_TRANSPORT_CUSTOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>content</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>SDP_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>SDP_MAX_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>content</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_sdp_parse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rt</name><operator>-&gt;</operator><name>nb_rtsp_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>rtsp_st</name> <operator>=</operator> <name><name>rt</name><operator>-&gt;</operator><name>rtsp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_CUSTOM_IO</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><call><name>map_to_opts</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ip</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"getnameinfo: %s\n"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_port</name></name></expr></argument>,
<argument><expr><literal type="string">"?localport=%d&amp;ttl=%d&amp;connect=%d&amp;write_to_source=%d"</literal></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_port</name></name></expr></argument>, <argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>sdp_ttl</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_FILTER_SRC</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>rt</name><operator>-&gt;</operator><name>rtsp_flags</name></name> <operator>&amp;</operator> <name>RTSP_FLAG_RTCP_TO_SOURCE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>append_source_addrs</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sources"</literal></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_include_source_addrs</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>include_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_source_addrs</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>nb_exclude_source_addrs</name></name></expr></argument>,
<argument><expr><name><name>rtsp_st</name><operator>-&gt;</operator><name>exclude_source_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtsp_st</name><operator>-&gt;</operator><name>rtp_handle</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_rtsp_open_transport_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rtsp_st</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_rtsp_close_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdp_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_rtsp_close_streams</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>sdp_demuxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"SDP demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>sdp_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_sdp_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sdp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SDP"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RTSPState</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>sdp_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>sdp_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_rtsp_fetch_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>sdp_read_close</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sdp_demuxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTP_DEMUXER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"rtp:"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>recvbuf</name><index>[<expr><name>RTP_MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sdp</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>filters_buf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>sdp_length</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>payload_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RTSPState</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_network_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>recvbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recvbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Received too short packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>recvbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported RTP version packet "</literal>
<literal type="string">"received\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>recvbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>payload_type</name> <operator>=</operator> <name><name>recvbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>
<expr_stmt><expr><call><name>getsockname</name><argument_list>(<argument><expr><call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>par</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_rtp_get_codec_info</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to receive RTP payload type %d "</literal>
<literal type="string">"without an SDP file describing it\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Guessing on RTP content - if not received "</literal>
<literal type="string">"properly you need an SDP file "</literal>
<literal type="string">"describing it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sdp_length</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sdp</name> <operator>+</operator> <name>sdp_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sdp_length</name></expr></argument>,
<argument><expr><literal type="string">"v=0\r\nc=IN IP%d %s\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>addr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>filters</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="string">"sources"</literal></expr>, <expr><literal type="string">"incl"</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"block"</literal></expr>, <expr><literal type="string">"excl"</literal></expr>}</block></expr>, <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>filters_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filters_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>filters_buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sdp</name> <operator>+</operator> <name>sdp_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sdp_length</name></expr></argument>,
<argument><expr><literal type="string">"a=source-filter:%s IN IP%d %s %s\r\n"</literal></expr></argument>,
<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>addr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr></argument>, <argument><expr><name>host</name></expr></argument>,
<argument><expr><name>filters_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nc</name> <operator>+</operator> <name>sdp_length</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_nobuf</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sdp_length</name> <operator>+=</operator> <name>nc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sdp</name> <operator>+</operator> <name>sdp_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sdp_length</name></expr></argument>,
<argument><expr><literal type="string">"m=%s %d RTP/AVP %d\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr> ?</condition><then> <expr><literal type="string">"application"</literal></expr> </then><else>:
<expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name>port</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nc</name> <operator>+</operator> <name>sdp_length</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_nobuf</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sdp_length</name> <operator>+=</operator> <name>nc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <operator>&amp;</operator><name>pb</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>media_type_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>AVMEDIA_TYPE_SUBTITLE</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sdp_read_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<label><name>fail_nobuf</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOBUFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"rtp_read_header(): not enough buffer space for sdp-headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_network_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>rtp_demuxer_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"RTP demuxer"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>rtp_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_rtp_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtp"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RTP input"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RTSPState</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>rtp_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>rtp_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_rtsp_fetch_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>sdp_read_close</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rtp_demuxer_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
