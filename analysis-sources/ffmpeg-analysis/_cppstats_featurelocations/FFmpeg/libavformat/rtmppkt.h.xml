<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\rtmppkt.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_RTMPPKT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFORMAT_RTMPPKT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_CHANNELS</name></cpp:macro> <cpp:value>65599</cpp:value></cpp:define>





<enum>enum <name>RTMPChannel</name> <block>{
<decl><name>RTMP_NETWORK_CHANNEL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>RTMP_SYSTEM_CHANNEL</name></decl>, 
<decl><name>RTMP_AUDIO_CHANNEL</name></decl>, 
<decl><name>RTMP_VIDEO_CHANNEL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>RTMP_SOURCE_CHANNEL</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
}</block>;</enum>




<typedef>typedef <type><enum>enum <name>RTMPPacketType</name> <block>{
<decl><name>RTMP_PT_CHUNK_SIZE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>RTMP_PT_BYTES_READ</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>RTMP_PT_USER_CONTROL</name></decl>, 
<decl><name>RTMP_PT_WINDOW_ACK_SIZE</name></decl>, 
<decl><name>RTMP_PT_SET_PEER_BW</name></decl>, 
<decl><name>RTMP_PT_AUDIO</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>RTMP_PT_VIDEO</name></decl>, 
<decl><name>RTMP_PT_FLEX_STREAM</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 
<decl><name>RTMP_PT_FLEX_OBJECT</name></decl>, 
<decl><name>RTMP_PT_FLEX_MESSAGE</name></decl>, 
<decl><name>RTMP_PT_NOTIFY</name></decl>, 
<decl><name>RTMP_PT_SHARED_OBJ</name></decl>, 
<decl><name>RTMP_PT_INVOKE</name></decl>, 
<decl><name>RTMP_PT_METADATA</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>, 
}</block></enum></type> <name>RTMPPacketType</name>;</typedef>




<enum>enum <name>RTMPPacketSize</name> <block>{
<decl><name>RTMP_PS_TWELVEBYTES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>RTMP_PS_EIGHTBYTES</name></decl>, 
<decl><name>RTMP_PS_FOURBYTES</name></decl>, 
<decl><name>RTMP_PS_ONEBYTE</name></decl> 
}</block>;</enum>




<typedef>typedef <type><struct>struct <name>RTMPPacket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>channel_id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RTMPPacketType</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ts_field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>extra</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RTMPPacket</name>;</typedef>











<function_decl><type><name>int</name></type> <name>ff_rtmp_packet_create</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel_id</name></decl></parameter>, <parameter><decl><type><name>RTMPPacketType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>ff_rtmp_packet_destroy</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>ff_rtmp_packet_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chunk_size</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_prev_pkt</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>ff_rtmp_packet_read_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunk_size</name></decl></parameter>,
<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_prev_pkt</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>ff_rtmp_packet_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chunk_size</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_prev_pkt</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ff_rtmp_packet_dump</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>ff_rtmp_check_alloc_array</name><parameter_list>(<parameter><decl><type><name>RTMPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>prev_pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_prev_pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>int</name></type> <name>ff_amf_tag_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_end</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> <name>ff_amf_get_field_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ff_amf_write_bool</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ff_amf_write_number</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ff_amf_write_string</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>ff_amf_write_string2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>ff_amf_write_null</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>ff_amf_write_object_start</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ff_amf_write_field_name</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>ff_amf_write_object_end</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>ff_amf_read_bool</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>ff_amf_read_number</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>int</name></type> <name>ff_amf_get_string</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>strsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> <name>ff_amf_read_string</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>strsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>ff_amf_read_null</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>ff_amf_match_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
