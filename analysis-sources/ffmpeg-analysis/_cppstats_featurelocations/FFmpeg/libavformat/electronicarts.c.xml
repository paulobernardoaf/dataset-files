<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\electronicarts.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHl_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'C', 'H', 'l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEAD_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'E', 'A', 'D')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNDC_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'N', 'D', 'C')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'E', 'N', 'D')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHEN_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'H', 'E', 'N')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDEN_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'D', 'E', 'N')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEN_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'E', 'E', 'N')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISNh_TAG</name></cpp:macro> <cpp:value>MKTAG('1', 'S', 'N', 'h')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACS_TAG</name></cpp:macro> <cpp:value>MKTAG('E', 'A', 'C', 'S')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISNd_TAG</name></cpp:macro> <cpp:value>MKTAG('1', 'S', 'N', 'd')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISNe_TAG</name></cpp:macro> <cpp:value>MKTAG('1', 'S', 'N', 'e')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT00_TAG</name></cpp:macro> <cpp:value>MKTAG('P', 'T', 0x0, 0x0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GSTR_TAG</name></cpp:macro> <cpp:value>MKTAG('G', 'S', 'T', 'R')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCDl_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'C', 'D', 'l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCEl_TAG</name></cpp:macro> <cpp:value>MKTAG('S', 'C', 'E', 'l')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kVGT_TAG</name></cpp:macro> <cpp:value>MKTAG('k', 'V', 'G', 'T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fVGT_TAG</name></cpp:macro> <cpp:value>MKTAG('f', 'V', 'G', 'T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mTCD_TAG</name></cpp:macro> <cpp:value>MKTAG('m', 'T', 'C', 'D')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADk_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'A', 'D', 'k')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADm_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'A', 'D', 'm')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADe_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'A', 'D', 'e')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPCh_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'P', 'C', 'h')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TGQs_TAG</name></cpp:macro> <cpp:value>MKTAG('T', 'G', 'Q', 's')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pQGT_TAG</name></cpp:macro> <cpp:value>MKTAG('p', 'Q', 'G', 'T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pIQT_TAG</name></cpp:macro> <cpp:value>MKTAG('p', 'I', 'Q', 'T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVhd_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'V', 'h', 'd')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV0K_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'V', '0', 'K')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV0F_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'V', '0', 'F')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVhd_TAG</name></cpp:macro> <cpp:value>MKTAG('A', 'V', 'h', 'd')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV0K_TAG</name></cpp:macro> <cpp:value>MKTAG('A', 'V', '0', 'K')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV0F_TAG</name></cpp:macro> <cpp:value>MKTAG('A', 'V', '0', 'F')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVIh_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'V', 'I', 'h')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVIf_TAG</name></cpp:macro> <cpp:value>MKTAG('M', 'V', 'I', 'f')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVP6_TAG</name></cpp:macro> <cpp:value>MKTAG('A', 'V', 'P', '6')</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VideoProperties</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>VideoProperties</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EaDemuxContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>big_endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VideoProperties</name></type> <name>video</name></decl>, <name>alpha</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>audio_codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>audio_stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>platform</name></decl>;</decl_stmt>
}</block></struct></type> <name>EaDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>read_arbitrary</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>word</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>word</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> <operator>|=</operator> <name>byte</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>word</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_audio_header_elements</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_header</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compression_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>revision</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>revision2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>in_header</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_subheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>byte</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0xFD</literal></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"entered audio subheader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_subheader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>in_subheader</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subbyte</name></decl>;</decl_stmt>
<expr_stmt><expr><name>subbyte</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>subbyte</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x80</literal></expr>:</case>
<expr_stmt><expr><name>revision</name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"revision (element 0x80) set to 0x%08x\n"</literal></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x82</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"num_channels (element 0x82) set to 0x%08x\n"</literal></expr></argument>,
<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x83</literal></expr>:</case>
<expr_stmt><expr><name>compression_type</name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"compression_type (element 0x83) set to 0x%08x\n"</literal></expr></argument>,
<argument><expr><name>compression_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x84</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"sample_rate (element 0x84) set to %i\n"</literal></expr></argument>,
<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"num_samples (element 0x85) set to 0x%08x\n"</literal></expr></argument>,
<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>num_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0x8A</literal></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"element 0x%02x set to 0x%08"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>subbyte</name></expr></argument>, <argument><expr><call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"exited audio subheader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_subheader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xA0</literal></expr>:</case>
<expr_stmt><expr><name>revision2</name> <operator>=</operator> <call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"revision2 (element 0xA0) set to 0x%08x\n"</literal></expr></argument>,
<argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0xFF</literal></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"end of header block reached (within audio subheader)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_subheader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"element 0x%02x set to 0x%08"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>subbyte</name></expr></argument>, <argument><expr><call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><literal type="number">0xFF</literal></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"end of header block reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"header element 0x%02x set to 0x%08"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>byte</name></expr></argument>, <argument><expr><call><name>read_arbitrary</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<switch>switch <condition>(<expr><name>compression_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<switch>switch <condition>(<expr><name>revision</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"stream type; revision=%i"</literal></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<switch>switch <condition>(<expr><name>revision2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<switch>switch <condition>(<expr><name>revision</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"stream type; revision=%i, revision2=%i"</literal></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"stream type; revision2=%i"</literal></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"stream type; compression_type=%i"</literal></expr></argument>,
<argument><expr><name>compression_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator> <name><name>ea</name><operator>-&gt;</operator><name>platform</name></name> <operator>==</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_PSX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <ternary><condition><expr><name>revision</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">48000</literal></expr> </then><else>: <expr><literal type="number">22050</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_audio_header_eacs</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>compression_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ea</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compression_type</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>compression_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_MULAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><literal type="string">"stream type; audio compression_type=%i"</literal></expr></argument>,
<argument><expr><name>compression_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_audio_header_sead</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_video_header_mdec</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VideoProperties</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_MDEC</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_video_header_vp6</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VideoProperties</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Timebase is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_VP6</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_video_header_cmv</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VideoProperties</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fps</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><name>fps</name></expr> }</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_CMV</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>process_ea_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>blockid</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>||</operator> <operator>!</operator><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>startpos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blockid</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>big_endian</name></name> <operator>=</operator> <name>size</name> <operator>&gt;</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>big_endian</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chunk size too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>blockid</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ISNh_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EACS_TAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown 1SNh headerid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>process_audio_header_eacs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SCHl_TAG</name></expr>:</case>
<case>case <expr><name>SHEN_TAG</name></expr>:</case>
<expr_stmt><expr><name>blockid</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blockid</name> <operator>==</operator> <name>GSTR_TAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>blockid</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>PT00_TAG</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blockid</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>platform</name></name> <operator>=</operator> <operator>(</operator><name>blockid</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>process_audio_header_elements</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SEAD_TAG</name></expr>:</case>
<expr_stmt><expr><call><name>process_audio_header_sead</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MVIh_TAG</name></expr>:</case>
<expr_stmt><expr><call><name>process_video_header_cmv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kVGT_TAG</name></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_TGV</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>mTCD_TAG</name></expr>:</case>
<expr_stmt><expr><call><name>process_video_header_mdec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MPCh_TAG</name></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>pQGT_TAG</name></expr>:</case>
<case>case <expr><name>TGQs_TAG</name></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_TGQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>pIQT_TAG</name></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_TQI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MADk_TAG</name></expr>:</case>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_MAD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1000</literal></expr> }</block></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MVhd_TAG</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>process_video_header_vp6</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVhd_TAG</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>process_video_header_vp6</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error parsing header: %i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>startpos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ea_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>big_endian</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ISNh_TAG</name></expr>:</case>
<case>case <expr><name>SCHl_TAG</name></expr>:</case>
<case>case <expr><name>SEAD_TAG</name></expr>:</case>
<case>case <expr><name>SHEN_TAG</name></expr>:</case>
<case>case <expr><name>kVGT_TAG</name></expr>:</case>
<case>case <expr><name>MADk_TAG</name></expr>:</case>
<case>case <expr><name>MPCh_TAG</name></expr>:</case>
<case>case <expr><name>MVhd_TAG</name></expr>:</case>
<case>case <expr><name>MVIh_TAG</name></expr>:</case>
<case>case <expr><name>AVP6_TAG</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>big_endian</name> <operator>=</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0x000FFFFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>big_endian</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0xfffff</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_video_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VideoProperties</name> <modifier>*</modifier></type><name>video</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>video</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>codec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_HEADERS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r_frame_rate</name></name> <operator>=</operator>
<name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ea_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>process_ea_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_video_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>init_video_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ea</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported number of channels: %d\n"</literal></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported sample rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid number of bytes per sample: %d\n"</literal></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>audio_stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ea_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EaDemuxContext</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>partial_packet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hit_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_type</name></decl>, <decl><type ref="prev"/><name>chunk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>packet_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>num_samples</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>!</operator><name>packet_read</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hit_end</name><operator>)</operator> <operator>||</operator> <name>partial_packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <ternary><condition><expr><name><name>ea</name><operator>-&gt;</operator><name>big_endian</name></name></expr> ?</condition><then> <expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ISNh_TAG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<case>case <expr><name>ISNd_TAG</name></expr>:</case>
<case>case <expr><name>SCDl_TAG</name></expr>:</case>
<case>case <expr><name>SNDC_TAG</name></expr>:</case>
<case>case <expr><name>SDEN_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S16LE_PLANAR</name> <operator>||</operator>
<name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_samples</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_PSX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partial_packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"video header followed by audio packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>partial_packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chunk_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>audio_stream_index</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ea</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_EA_R3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_MP3</name></expr>:</case>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>num_samples</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_PSX</name></expr>:</case>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>chunk_size</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name><operator>)</operator> <operator>*</operator> <literal type="number">28</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>chunk_size</name> <operator>/</operator> <operator>(</operator><name><name>ea</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name><name>ea</name><operator>-&gt;</operator><name>num_channels</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>packet_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><name>ISNe_TAG</name></expr>:</case>
<case>case <expr><name>SCEl_TAG</name></expr>:</case>
<case>case <expr><name>SEND_TAG</name></expr>:</case>
<case>case <expr><name>SEEN_TAG</name></expr>:</case>
<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>ISNh_TAG</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>SCHl_TAG</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>SEAD_TAG</name> <operator>||</operator>
<name>tag</name> <operator>==</operator> <name>SHEN_TAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hit_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MVIh_TAG</name></expr>:</case>
<case>case <expr><name>kVGT_TAG</name></expr>:</case>
<case>case <expr><name>pQGT_TAG</name></expr>:</case>
<case>case <expr><name>TGQs_TAG</name></expr>:</case>
<case>case <expr><name>MADk_TAG</name></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<case>case <expr><name>MVIf_TAG</name></expr>:</case>
<case>case <expr><name>fVGT_TAG</name></expr>:</case>
<case>case <expr><name>MADm_TAG</name></expr>:</case>
<case>case <expr><name>MADe_TAG</name></expr>:</case>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>chunk_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<goto>goto <name>get_video_packet</name>;</goto>

<case>case <expr><name>mTCD_TAG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<goto>goto <name>get_video_packet</name>;</goto>

<case>case <expr><name>MV0K_TAG</name></expr>:</case>
<case>case <expr><name>AV0K_TAG</name></expr>:</case>
<case>case <expr><name>MPCh_TAG</name></expr>:</case>
<case>case <expr><name>pIQT_TAG</name></expr>:</case>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<case>case <expr><name>MV0F_TAG</name></expr>:</case>
<case>case <expr><name>AV0F_TAG</name></expr>:</case>
<label><name>get_video_packet</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chunk_size</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>partial_packet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_append_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>packet_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>partial_packet</name> <operator>=</operator> <name>chunk_type</name> <operator>==</operator> <name>MVIh_TAG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_type</name> <operator>==</operator> <name>AV0K_TAG</name> <operator>||</operator> <name>chunk_type</name> <operator>==</operator> <name>AV0F_TAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>alpha</name><operator>.</operator><name>stream_index</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ea</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>stream_index</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hit_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>packet_read</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ea_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ea"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Electronic Arts Multimedia"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EaDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ea_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ea_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ea_read_packet</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
