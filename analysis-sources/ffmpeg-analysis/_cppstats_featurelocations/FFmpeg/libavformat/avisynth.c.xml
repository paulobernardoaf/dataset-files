<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\avisynth.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_NO_DECLSPEC</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/w32dlfcn.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTERN_C</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/avisynth/avisynth_c.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVISYNTH_LIB</name></cpp:macro> <cpp:value>"avisynth"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_AVISYNTH</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/avisynth/avxsynth_c.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVISYNTH_NAME</name></cpp:macro> <cpp:value>"libavxsynth"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVISYNTH_LIB</name></cpp:macro> <cpp:value>AVISYNTH_NAME SLIBSUF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>AviSynthLibrary</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>library</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_DECLARE_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name ##_func name</cpp:value></cpp:define>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bit_blt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_clip_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_create_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_delete_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_video_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_invoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_video_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_take_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bits_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_height_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_pitch_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_read_ptr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_row_size_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_DECLARE_FUNC</name></cpp:undef>
}</block></struct></type> <name>AviSynthLibrary</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AviSynthContext</name> <block>{
<decl_stmt><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_Clip</name> <modifier>*</modifier></type><name>clip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type><name>vi</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>n_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curr_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curr_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>curr_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>AviSynthContext</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>AviSynthContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_packed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_grey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVS_PLANAR_Y</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVS_PLANAR_Y</name></expr>, <expr><name>AVS_PLANAR_U</name></expr>,
<expr><name>AVS_PLANAR_V</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVS_PLANAR_G</name></expr>, <expr><name>AVS_PLANAR_B</name></expr>,
<expr><name>AVS_PLANAR_R</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_yuva</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVS_PLANAR_Y</name></expr>, <expr><name>AVS_PLANAR_U</name></expr>,
<expr><name>AVS_PLANAR_V</name></expr>, <expr><name>AVS_PLANAR_A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>avs_planes_rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AVS_PLANAR_G</name></expr>, <expr><name>AVS_PLANAR_B</name></expr>,
<expr><name>AVS_PLANAR_R</name></expr>, <expr><name>AVS_PLANAR_A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>AviSynthLibrary</name></type> <name>avs_library</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>avs_atexit_called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>AviSynthContext</name> <modifier>*</modifier></type><name>avs_ctx_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>avisynth_atexit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>avisynth_load_library</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>avs_library</name><operator>.</operator><name>library</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>AVISYNTH_LIB</name></expr></argument>, <argument><expr><name>RTLD_NOW</name> <operator>|</operator> <name>RTLD_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avs_library</name><operator>.</operator><name>library</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_AVS_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>continue_on_fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>avs_library.name = (name ##_func) dlsym(avs_library.library, #name); if (!continue_on_fail &amp;&amp; !avs_library.name) goto fail;</cpp:value></cpp:define>





<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_bit_blt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_clip_get_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_create_script_environment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_delete_script_environment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_audio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_error</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_video_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_invoke</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_release_clip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_release_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_release_video_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_take_clip</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_bits_per_pixel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_height_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_pitch_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_read_ptr_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_get_row_size_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_AVS_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgba</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_AVS_FUNC</name></cpp:undef>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>avisynth_atexit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>avs_library</name><operator>.</operator><name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>avisynth_context_create</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avs_library</name><operator>.</operator><name>library</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_load_library</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_create_script_environment</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avs_library</name><operator>.</operator><name>avs_get_error</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name><name>avs_library</name><operator>.</operator><name>avs_get_error</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avs_ctx_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>avs_ctx_list</name> <operator>=</operator> <name>avs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>avs_ctx_list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avs_ctx_list</name> <operator>=</operator> <name>avs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>avisynth_context_destroy</name><parameter_list>(<parameter><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>avs_atexit_called</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>avs</name> <operator>==</operator> <name>avs_ctx_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>avs_ctx_list</name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>avs_ctx_list</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>avs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_release_clip</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_delete_script_environment</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>avisynth_atexit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name>avs_ctx_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>avs</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>avs</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avisynth_context_destroy</name><argument_list>(<argument><expr><name>avs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>avs_library</name><operator>.</operator><name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avs_atexit_called</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_create_stream_video</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_numerator</name></name></expr>,
<expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_denominator</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_denominator</name></name></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_numerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>pixel_type</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AVS_CS_YUV444P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV422P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV420P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV444P12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV422P12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV420P12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV444P14</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV422P14</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV420P14</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV444P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV422P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUV420P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_YUVA444</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA422</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA420</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA444P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA422P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA420P10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA422P12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA444P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA422P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUVA420P16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_RGBP</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBP10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBP12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBP14</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBP16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_RGBPS</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRPF32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_RGBAP</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBAP10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBAP12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_RGBAP16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_RGBAPS</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAPF32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_Y10</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_Y12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_Y14</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY14</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_Y16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_Y32</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAYF32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_YV24</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YV16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YV411</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_Y8</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVS_CS_BGR48</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR48</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_BGR64</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGRA64</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AVS_CS_BGR24</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_BGR32</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YUY2</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUYV422</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_YV12</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_CS_I420</name></expr>:</case> 
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unknown AviSynth colorspace %d\n"</literal></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>pixel_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>planar</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_rgba</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_yuva</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_rgb</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_grey</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_yuv</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <name>avs_planes_packed</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_create_stream_audio</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_audio_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>sample_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_SAMPLE_INT8</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_U8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_SAMPLE_INT16</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_SAMPLE_INT24</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S24LE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_SAMPLE_INT32</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S32LE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVS_SAMPLE_FLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_F32LE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unknown AviSynth sample type %d\n"</literal></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>sample_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_create_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avs_has_video</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_create_stream_video</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avs_has_audio</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_create_stream_audio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_open_file</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_Value</name></type> <name>arg</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename_ansi</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>filename_wc</name><index>[<expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_context_create</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>filename_wc</name></expr></argument>, <argument><expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_THREAD_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename_wc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>filename_ansi</name></expr></argument>,
<argument><expr><name>MAX_PATH</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>avs_new_value_string</name><argument_list>(<argument><expr><name>filename_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>avs_new_value_string</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_invoke</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="string">"Import"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avs_is_error</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>avs_as_error</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avs_is_clip</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AviSynth script did not return a clip\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_take_clip</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_video_info</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><call><name><name>avs_library</name><operator>.</operator><name>avs_get_version</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"AviSynth version is too old. Please upgrade to either AviSynth 2.6 &gt;= RC1 or AviSynth+ &gt;= r1718.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_release_value</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_create_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>avisynth_context_destroy</name><argument_list>(<argument><expr><name>avs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avisynth_next_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>discard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_stream</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_stream</name></name> <operator>%=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>avs</name><operator>-&gt;</operator><name>curr_stream</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>st</name><operator>)</operator><operator>-&gt;</operator><name>discard</name></name> <operator>==</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>discard</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>discard</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_read_packet_video</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>discard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>rowsize</name></decl>, <decl><type ref="prev"/><name>planeheight</name></decl>, <decl><type ref="prev"/><name>pitch</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>avsplus</name></type> <name>av_unused</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>&gt;=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>discard</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>avs_library</name><operator>.</operator><name>library</name></name></expr></argument>, <argument><expr><literal type="string">"avs_is_planar_rgb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>avsplus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>avsplus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_bits_per_pixel</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>avs_bits_per_pixel</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>*</operator> <name>bits</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>curr_stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_frame</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_clip_get_error</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_p</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avs</name><operator>-&gt;</operator><name>n_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>plane</name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>src_p</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_read_ptr_p</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_pitch_p</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rowsize</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_row_size_p</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>planeheight</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_get_height_p</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>src_p</name> <operator>=</operator> <call><name>avs_get_read_ptr_p</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch</name> <operator>=</operator> <call><name>avs_get_pitch_p</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rowsize</name> <operator>=</operator> <call><name>avs_get_row_size_p</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>planeheight</name> <operator>=</operator> <call><name>avs_get_height_p</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>avs_is_rgb24</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>avs_is_rgb</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_p</name> <operator>=</operator> <name>src_p</name> <operator>+</operator> <operator>(</operator><name>planeheight</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch</name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USING_AVISYNTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>avsplus</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>avs_library</name><operator>.</operator><name>avs_is_planar_rgb</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name><name>avs_library</name><operator>.</operator><name>avs_is_planar_rgba</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_p</name> <operator>=</operator> <name>src_p</name> <operator>+</operator> <operator>(</operator><name>planeheight</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pitch</name> <operator>=</operator> <operator>-</operator><name>pitch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_bit_blt</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>dst_p</name></expr></argument>, <argument><expr><name>rowsize</name></expr></argument>, <argument><expr><name>src_p</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>,
<argument><expr><name>rowsize</name></expr></argument>, <argument><expr><name>planeheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_p</name> <operator>+=</operator> <name>rowsize</name> <operator>*</operator> <name>planeheight</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_release_video_frame</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_read_packet_audio</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>discard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>fps</name></decl>, <decl><type ref="prev"/><name>samplerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>&gt;=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_audio_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fps</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_numerator</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fps</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_denominator</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samplerate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samplerate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avs_has_video</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>&lt;</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call> <operator>-</operator>
<name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>+</operator> <name>samples</name> <operator>&gt;</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_audio_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_audio_samples</name></name> <operator>-</operator> <name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>+=</operator> <name>samples</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>discard</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>avs_bytes_per_channel_sample</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<name>samples</name> <operator>*</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>avs</name><operator>-&gt;</operator><name>curr_stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>avs_library</name><operator>.</operator><name>avs_get_audio</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>avs_library</name><operator>.</operator><name>avs_clip_get_error</name></name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>clip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>avisynth_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>ff_lock_avformat</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>avisynth_open_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_unlock_avformat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_unlock_avformat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>avisynth_next_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>discard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avisynth_read_packet_video</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>discard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <call><name>avs_has_audio</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avisynth_next_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>discard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>avisynth_read_packet_audio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>discard</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avisynth_read_packet_audio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>discard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <call><name>avs_has_video</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avisynth_next_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>discard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>avisynth_read_packet_video</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>discard</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>avisynth_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_lock_avformat</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avisynth_context_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_unlock_avformat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avisynth_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AviSynthContext</name> <modifier>*</modifier></type><name>avs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>fps</name></decl>, <decl><type ref="prev"/><name>samplerate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avs</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_numerator</name></name></expr>,
<expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>fps_denominator</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>samplerate</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timestamp</name> <operator>&gt;=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_frames</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>timestamp</name> <operator>&gt;</operator> <name>INT_MAX</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>timestamp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avs_has_audio</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>timestamp</name> <operator>&gt;=</operator> <name><name>avs</name><operator>-&gt;</operator><name>vi</name><operator>-&gt;</operator><name>num_audio_samples</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>timestamp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avs_has_video</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>samplerate</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>avs</name><operator>-&gt;</operator><name>curr_sample</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_avisynth_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"avisynth"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AviSynth script"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AviSynthContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>avisynth_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>avisynth_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>avisynth_read_close</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>avisynth_read_seek</name></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"avs"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
