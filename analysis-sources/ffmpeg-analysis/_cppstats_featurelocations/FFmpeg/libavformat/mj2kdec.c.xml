<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mj2kdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MJPEG_2000_DEMUXER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mjpeg2000_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>marker</name></decl>, <decl><type ref="prev"/><name>marker_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff4fff51</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>marker_size</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>AV_RB8</name><argument_list>(<argument><expr><name>b</name><operator>+</operator><literal type="number">4</literal><operator>+</operator><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frames</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>invalid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>invalid</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>frames</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>invalid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frames</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<macro><name>FF_DEF_RAWVIDEO_DEMUXER2</name><argument_list>(<argument>mjpeg_2000</argument>, <argument><literal type="string">"raw MJPEG 2000 video"</literal></argument>, <argument>mjpeg2000_probe</argument>, <argument><literal type="string">"j2k"</literal></argument>, <argument>AV_CODEC_ID_JPEG2000</argument>, <argument>AVFMT_GENERIC_INDEX|AVFMT_NOTIMESTAMPS</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
