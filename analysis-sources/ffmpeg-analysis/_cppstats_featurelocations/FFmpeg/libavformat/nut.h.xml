<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\nut.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_NUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFORMAT_NUT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metadata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_STARTCODE</name></cpp:macro> <cpp:value>(0x7A561F5F04ADULL + (((uint64_t)('N'&lt;&lt;8) + 'M')&lt;&lt;48))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_STARTCODE</name></cpp:macro> <cpp:value>(0x11405BF2F9DBULL + (((uint64_t)('N'&lt;&lt;8) + 'S')&lt;&lt;48))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNCPOINT_STARTCODE</name></cpp:macro> <cpp:value>(0xE4ADEECA4569ULL + (((uint64_t)('N'&lt;&lt;8) + 'K')&lt;&lt;48))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_STARTCODE</name></cpp:macro> <cpp:value>(0xDD672F23E64EULL + (((uint64_t)('N'&lt;&lt;8) + 'X')&lt;&lt;48))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_STARTCODE</name></cpp:macro> <cpp:value>(0xAB68B596BA78ULL + (((uint64_t)('N'&lt;&lt;8) + 'I')&lt;&lt;48))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_STRING</name></cpp:macro> <cpp:value>"nut/multimedia container\0"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DISTANCE</name></cpp:macro> <cpp:value>(1024*32-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUT_MAX_VERSION</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUT_STABLE_VERSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUT_MIN_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum<block>{
<decl><name>FLAG_KEY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>FLAG_EOR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>FLAG_CODED_PTS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>FLAG_STREAM_ID</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 
<decl><name>FLAG_SIZE_MSB</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, 
<decl><name>FLAG_CHECKSUM</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, 
<decl><name>FLAG_RESERVED</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, 
<decl><name>FLAG_SM_DATA</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>, 
<decl><name>FLAG_HEADER_IDX</name> <init>=<expr><literal type="number">1024</literal></expr></init></decl>, 
<decl><name>FLAG_MATCH_TIME</name> <init>=<expr><literal type="number">2048</literal></expr></init></decl>, 
<decl><name>FLAG_CODED</name> <init>=<expr><literal type="number">4096</literal></expr></init></decl>, 
<decl><name>FLAG_INVALID</name> <init>=<expr><literal type="number">8192</literal></expr></init></decl>, 
}</block></enum></type> <name>Flag</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Syncpoint</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>back_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>
}</block></struct></type> <name>Syncpoint</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FrameCode</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size_mul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size_lsb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>pts_delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>reserved_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>header_idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>FrameCode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>StreamContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>last_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_until_key_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time_base_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>time_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msb_pts_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_pts_distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode_delay</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>keyframe_pts</name></decl>;</decl_stmt>
}</block></struct></type> <name>StreamContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ChapterContext</name> <block>{
<decl_stmt><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>time_base</name></decl>;</decl_stmt>
}</block></struct></type> <name>ChapterContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NUTContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FrameCode</name></type> <name><name>frame_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header_len</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>header</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_startcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChapterContext</name> <modifier>*</modifier></type><name>chapter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_distance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time_base_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_syncpoint_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_resync_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>time_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AVTreeNode</name></name> <modifier>*</modifier></type><name>syncpoints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>write_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>max_pts_tb</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUT_BROADCAST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUT_PIPE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>minor_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>NUTContext</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_nut_subtitle_tags</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_nut_video_tags</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_nut_audio_tags</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_nut_audio_extra_tags</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_nut_data_tags</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ff_nut_codec_tags</name><index>[]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>Dispositions</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
}</block></struct></type> <name>Dispositions</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_nut_reset_ts</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>ff_lsb2full</name><parameter_list>(<parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>lsb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_nut_sp_pos_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_nut_sp_pts_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_nut_add_sp</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>back_ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_nut_free_sp</name><parameter_list>(<parameter><decl><type><name>NUTContext</name> <modifier>*</modifier></type><name>nut</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>Dispositions</name></type> <name><name>ff_nut_dispositions</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVMetadataConv</name></type> <name><name>ff_nut_metadata_conv</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
