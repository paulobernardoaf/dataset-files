<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\srtp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hmac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srtp.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_srtp_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRTPContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_hmac_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encrypt_counter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>outpos</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>outpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>outpos</name> <operator>&lt;</operator> <name>outlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>keystream</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iv</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>aes</name></expr></argument>, <argument><expr><name>keystream</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>outpos</name> <operator>&lt;</operator> <name>outlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>outpos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>outpos</name></expr>]</index></name> <operator>^=</operator> <name><name>keystream</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>derive_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>aes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>label</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">14</literal> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>^=</operator> <name>label</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name>aes</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_srtp_set_crypto</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRTPContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>suite</name></expr></argument>, <argument><expr><literal type="string">"AES_CM_128_HMAC_SHA1_80"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>suite</name></expr></argument>, <argument><expr><literal type="string">"SRTP_AES128_CM_HMAC_SHA1_80"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_hmac_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp_hmac_size</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>suite</name></expr></argument>, <argument><expr><literal type="string">"AES_CM_128_HMAC_SHA1_32"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_hmac_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp_hmac_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>suite</name></expr></argument>, <argument><expr><literal type="string">"SRTP_AES128_CM_HMAC_SHA1_32"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_hmac_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_hmac_size</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SRTP Crypto suite %s not supported\n"</literal></expr></argument>,
<argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_base64_decode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Incorrect amount of SRTP params\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <call><name>av_hmac_alloc</name><argument_list>(<argument><expr><name>AV_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>aes</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_key</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_key</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_salt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_salt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_salt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>derive_key</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>master_salt</name></name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_auth</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_iv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>indexbuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>indexbuf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>indexbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>salt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_srtp_decrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRTPContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lenptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>hmac</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>seq_largest</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>roc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtcp</name></decl>, <decl><type ref="prev"/><name>hmac_size</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtcp</name> <operator>=</operator> <call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hmac_size</name> <operator>=</operator> <ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_hmac_size</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_hmac_size</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>hmac_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_hmac_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_auth</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_hmac_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>hmac_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtcp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rocbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>seq_largest</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>seq_initialized</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>seq_largest</name></name></expr> </then><else>: <expr><name>seq</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>roc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>roc</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seq_largest</name> <operator>&lt;</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>-</operator> <name>seq_largest</name> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>roc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>seq_largest</name> <operator>-</operator> <literal type="number">32768</literal> <operator>&gt;</operator> <name>seq</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>roc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>roc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seq_largest</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>seq_largest</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <name>roc</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>seq_largest</name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>roc</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>seq</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>rocbuf</name></expr></argument>, <argument><expr><name>roc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hmac_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>rocbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_hmac_final</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hmac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>hmac_size</name></expr></argument>, <argument><expr><name>hmac_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"HMAC mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>hmac_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rtcp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>srtcp_index</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>srtcp_index</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>srtcp_index</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>, <decl><type ref="prev"/><name>csrc</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_largest</name></name> <operator>=</operator> <name>seq_largest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>roc</name></name> <operator>=</operator> <name>roc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>csrc</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ext</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>ext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>create_iv</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_salt</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_salt</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_key</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_key</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_srtp_encrypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SRTPContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>hmac</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtcp</name></decl>, <decl><type ref="prev"/><name>hmac_size</name></decl>, <decl><type ref="prev"/><name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rtcp</name> <operator>=</operator> <call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hmac_size</name> <operator>=</operator> <ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_hmac_size</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_hmac_size</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name>hmac_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rtcp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>padding</name> <operator>&gt;</operator> <name>outlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rtcp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp_index</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>, <decl><type ref="prev"/><name>csrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>seq_largest</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>roc</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq_largest</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name>seq</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>roc</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>csrc</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ext</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ext</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>ext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>create_iv</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_salt</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_salt</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>ssrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_key</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_key</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt_counter</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rtcp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0x80000000</literal> <operator>|</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_hmac_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rtcp</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_auth</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></else></ternary></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hmac_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rtcp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rocbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>rocbuf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>roc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hmac_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>rocbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_hmac_final</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hmac</name></name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hmac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>hmac_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>hmac_size</name></expr>;</expr_stmt>
<return>return <expr><name>buf</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
