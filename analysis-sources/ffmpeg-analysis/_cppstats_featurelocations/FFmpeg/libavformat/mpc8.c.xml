<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mpc8.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/unary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apetag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKMPCTAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) | ((b) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_MPCK</name></cpp:macro> <cpp:value>MKTAG('M','P','C','K')</cpp:value></cpp:define>


<enum>enum <name>MPCPacketTags</name><block>{
<decl><name>TAG_STREAMHDR</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>TAG_STREAMEND</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>TAG_AUDIOPACKET</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>TAG_SEEKTBLOFF</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>TAG_SEEKTABLE</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>TAG_REPLAYGAIN</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>TAG_ENCINFO</name> <init>= <expr><call><name>MKMPCTAG</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mpc8_rate</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">37800</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>MPCContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>header_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>apetag_start</name></decl>;</decl_stmt>
}</block></struct></type> <name>MPCContext</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>bs_get_v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>bs</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>bs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>br</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<return>return <expr><name>v</name> <operator>-</operator> <name>br</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc8_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bs_end</name> <init>= <expr><name>bs</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TAG_MPCK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>bs</name> <operator>&lt;</operator> <name>bs_end</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>header_found</name> <init>= <expr><operator>(</operator><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'Z'</literal> <operator>||</operator> <name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bs</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bs_get_v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>bs_end</name> <operator>-</operator> <name>bs</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>header_found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">11</literal> <operator>||</operator> <name>size</name></expr></argument> &gt;</argument_list></name> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>+=</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>gb_get_v</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bits</name> <operator>&lt;</operator> <literal type="number">64</literal><operator>-</operator><literal type="number">7</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc8_get_chunk_header</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>ffio_read_varlen</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>-=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc8_parse_seektable</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name><name>ppos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>seekd</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No stream added before parsing seek table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc8_get_chunk_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>!=</operator> <name>TAG_SEEKTABLE</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No seek table at given position\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">10</literal> <operator>||</operator> <name>size</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad seek table size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"seek table truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>gb_get_v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <name>UINT_MAX</name><operator>/</operator><literal type="number">4</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>samples</name></name><operator>/</operator><literal type="number">1152</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Seek table is too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>seekd</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>gb_get_v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>header_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppos</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>ppos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <name><name>ppos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;&lt;</operator> <name>seekd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ppos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpc8_handle_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>chunk_pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition><block>{<block_content>
<case>case <expr><name>TAG_SEEKTBLOFF</name></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>ffio_read_varlen</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc8_parse_seektable</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>chunk_pos</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc8_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TAG_MPCK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not a Musepack8 file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mpc8_get_chunk_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chunk length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>==</operator> <name>TAG_STREAMHDR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mpc8_handle_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>!=</operator> <name>TAG_STREAMHDR</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stream header not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ver</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Stream version %d"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>ffio_read_varlen</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_read_varlen</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MUSEPACK8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_extradata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>mpc8_rate</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1152</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>samples</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1152</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apetag_start</name></name> <operator>=</operator> <call><name>ff_ape_parse_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc8_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>apetag_start</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>apetag_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mpc8_get_chunk_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>==</operator> <name>TAG_AUDIOPACKET</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>==</operator> <name>TAG_STREAMEND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mpc8_handle_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpc8_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_update_cur_dts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_mpc8_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpc8"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Musepack SV8"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MPCContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>mpc8_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>mpc8_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>mpc8_read_packet</name></expr>,
<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>mpc8_read_seek</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
