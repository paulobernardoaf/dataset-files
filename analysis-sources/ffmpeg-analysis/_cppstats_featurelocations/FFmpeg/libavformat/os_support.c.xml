<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\os_support.c">






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SVID_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_POLL_H</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINSOCK2_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SYS_SELECT_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_GETADDRINFO</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_INET_ATON</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inet_aton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>add1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>add2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>add3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>add4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>add1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add4</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>add1</name> <operator>||</operator> <operator>(</operator><name>add1</name> <operator>|</operator> <name>add2</name> <operator>|</operator> <name>add3</name> <operator>|</operator> <name>add4</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>add1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>add2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>add3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>add4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>ff_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sin</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sin</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_aton</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hints</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_NUMERICHOST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EAI_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EAI_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hints</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_PASSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_LOOPBACK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>service</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EAI_FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOCK_STREAM</name></expr>:</case>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SOCK_DGRAM</name></expr>:</case>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hints</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_CANONNAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <ternary><condition><expr><name>h</name></expr> ?</condition><then> <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hostlen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAI_FAMILY</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>serv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <name>hostlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICHOST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NAMERQD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>EAI_NONAME</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>serv</name> <operator>&amp;&amp;</operator> <name>servlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICSERV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAI_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_GETADDRINFO</name> <operator>||</operator> <name>HAVE_WINSOCK2_H</name></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ecode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EAI_AGAIN</name></expr>:</case>
<return>return <expr><literal type="string">"Temporary failure in name resolution"</literal></expr>;</return>
<case>case <expr><name>EAI_BADFLAGS</name></expr>:</case>
<return>return <expr><literal type="string">"Invalid flags for ai_flags"</literal></expr>;</return>
<case>case <expr><name>EAI_FAIL</name></expr>:</case>
<return>return <expr><literal type="string">"A non-recoverable error occurred"</literal></expr>;</return>
<case>case <expr><name>EAI_FAMILY</name></expr>:</case>
<return>return <expr><literal type="string">"The address family was not recognized or the address "</literal>
<literal type="string">"length was invalid for the specified family"</literal></expr>;</return>
<case>case <expr><name>EAI_MEMORY</name></expr>:</case>
<return>return <expr><literal type="string">"Memory allocation failure"</literal></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EAI_NODATA</name> <operator>!=</operator> <name>EAI_NONAME</name></expr></cpp:if>
<case>case <expr><name>EAI_NODATA</name></expr>:</case>
<return>return <expr><literal type="string">"No address associated with hostname"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<case>case <expr><name>EAI_NONAME</name></expr>:</case>
<return>return <expr><literal type="string">"The name does not resolve for the supplied parameters"</literal></expr>;</return>
<case>case <expr><name>EAI_SERVICE</name></expr>:</case>
<return>return <expr><literal type="string">"servname not supported for ai_socktype"</literal></expr>;</return>
<case>case <expr><name>EAI_SOCKTYPE</name></expr>:</case>
<return>return <expr><literal type="string">"ai_socktype not supported"</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>ff_socket_nonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINSOCK2_H</name></expr></cpp:if>
<decl_stmt><decl><type><name>u_long</name></type> <name>param</name> <init>= <expr><name>enable</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_POLL_H</name></expr></cpp:if>
<function><type><name>int</name></type> <name>ff_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>numfds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>read_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>write_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>exception_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfds_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINSOCK2_H</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>numfds</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>write_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exception_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_WINSOCK2_H</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exception_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exception_set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exception_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exception_set</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
