<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\dash.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dash.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>DASHTmplId</name></type> <name>dash_read_tmpl_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>identifier</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format_tag</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>format_tag_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHTmplId</name></type> <name>id_type</name> <init>= <expr><name>DASH_TMPL_ID_UNDEFINED</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><literal type="string">"$$"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_ESCAPE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>next_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><literal type="string">"$RepresentationID$"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_REP_ID</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>format_tag</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>format_tag_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>next_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><literal type="string">"$Number"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_NUMBER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><literal type="string">"$Bandwidth"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_BANDWIDTH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><literal type="string">"$Time"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_TIME</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_UNDEFINED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>id_type</name> <operator>!=</operator> <name>DASH_TMPL_ID_UNDEFINED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>number_format</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>id_type</name> <operator>==</operator> <name>DASH_TMPL_ID_TIME</name><operator>)</operator></expr> ?</condition><then> <expr><name>PRId64</name></expr> </then><else>: <expr><literal type="string">"d"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>format_tag_size</name></expr></argument>, <argument><expr><literal type="string">"%%%s"</literal></expr></argument>, <argument><expr><name>number_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>next_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>width_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>next_ptr</name></expr></argument>, <argument><expr><literal type="string">"%0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>width_ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_isdigit</name><argument_list>(<argument><expr><name><name>width_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_strstart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>width_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"d$"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>format_tag_size</name></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><literal type="string">"%0"</literal></expr></argument>, <argument><expr><name><name>width_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>number_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>next_ptr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse format-tag beginning with %s. Expected either a "</literal>
<literal type="string">"closing '$' character or a format-string like '%%0[width]d', "</literal>
<literal type="string">"where width must be a single digit\n"</literal></expr></argument>, <argument><expr><name>next_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_type</name> <operator>=</operator> <name>DASH_TMPL_ID_UNDEFINED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>id_type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dash_fill_tmpl_params</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rep_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_rate</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t_cur</name> <init>= <expr><name>template</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>dst_pos</name> <operator>&lt;</operator> <name>buffer_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>t_cur</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>format_tag</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DASHTmplId</name></type> <name>id_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t_next</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>t_cur</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>t_next</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_copy_bytes</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>t_next</name> <operator>-</operator> <name>t_cur</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>num_copy_bytes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_pos</name> <operator>+=</operator> <name>num_copy_bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_cur</name> <operator>=</operator> <name>t_next</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_pos</name> <operator>&gt;=</operator> <name>buffer_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>t_cur</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>id_type</name> <operator>=</operator> <call><name>dash_read_tmpl_id</name><argument_list>(<argument><expr><name>t_cur</name></expr></argument>, <argument><expr><name>format_tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format_tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>id_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DASH_TMPL_ID_ESCAPE</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"$"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DASH_TMPL_ID_REP_ID</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name></expr></argument>, <argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>rep_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DASH_TMPL_ID_NUMBER</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name></expr></argument>, <argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DASH_TMPL_ID_BANDWIDTH</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name></expr></argument>, <argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>bit_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DASH_TMPL_ID_TIME</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name></expr></argument>, <argument><expr><name>format_tag</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DASH_TMPL_ID_UNDEFINED</name></expr>:</case>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>t_cur</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t_next</name> <operator>=</operator> <operator>&amp;</operator><name><name>t_cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>





<expr_stmt><expr><name>dst_pos</name> <operator>+=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buffer_size</name> <operator>-</operator> <name>dst_pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_cur</name> <operator>=</operator> <name>t_next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


</unit>
