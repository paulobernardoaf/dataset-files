<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\wv.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wv.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_wv_parse_header</name><parameter_list>(<parameter><decl><type><name>WvHeader</name> <modifier>*</modifier></type><name>wv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wv</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>||</operator> <name><name>wv</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;</operator> <name>WV_BLOCK_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>block_idx</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>initial</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>wv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLAG_INITIAL_BLOCK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wv</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>wv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLAG_FINAL_BLOCK</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
