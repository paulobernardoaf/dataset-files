<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\rtpenc_vc2hq.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dirac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpenc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_VC2HQ_PL_HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_DATA_UNIT_HEADER_SIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_PIC_NR_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_RTP_PCODE_HQ_PIC_FRAGMENT</name></cpp:macro> <cpp:value>0xEC</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>parse_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>info_hdr_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtp_m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTPMuxContext</name> <modifier>*</modifier></type><name>rtp_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB8</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">0x03</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">0x02</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>AV_WB8</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>parse_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>info_hdr_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_rtp_send_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>RTP_VC2HQ_PL_HEADER_SIZE</name> <operator>+</operator> <name>info_hdr_size</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>rtp_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_picture</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interlaced</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RTPMuxContext</name> <modifier>*</modifier></type><name>rtp_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lvl</name></decl>, <decl><type ref="prev"/><name>second_field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pic_nr</name></decl>, <decl><type ref="prev"/><name>wavelet_depth</name></decl>, <decl><type ref="prev"/><name>prefix_bytes</name></decl>, <decl><type ref="prev"/><name>size_scaler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>frag_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info_hdr</name> <init>= <expr><operator>&amp;</operator><name><name>rtp_ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pic_nr</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>DIRAC_PIC_NR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>DIRAC_PIC_NR_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>second_field</name> <operator>=</operator> <name>interlaced</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pic_nr</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>wavelet_depth</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>prefix_bytes</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_scaler</name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>lvl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lvl</name> <operator>&lt;</operator> <name>wavelet_depth</name></expr>;</condition> <incr><expr><name>lvl</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>frag_len</name> <operator>=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pic_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>prefix_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size_scaler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>DIRAC_RTP_PCODE_HQ_PIC_FRAGMENT</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>frag_len</name></expr></argument>, <argument><expr><name>interlaced</name></expr></argument>, <argument><expr><name>second_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>frag_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>frag_len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frag_len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>rtp_ctx</name><operator>-&gt;</operator><name>max_payload_size</name></name> <operator>-</operator> <literal type="number">20</literal></expr></argument> , <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info_hdr</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>frag_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>DIRAC_RTP_PCODE_HQ_PIC_FRAGMENT</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>frag_len</name></expr></argument>, <argument><expr><name>interlaced</name></expr></argument>, <argument><expr><name>second_field</name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>frag_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_send_vc2hq</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interlaced</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>frame_buf</name> <operator>+</operator> <name>frame_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name>frame_buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parse_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>unit_size</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>unit</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parse_code</name> <operator>=</operator> <name><name>unit</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>unit_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>parse_code</name></expr>)</condition> <block>{<block_content>


<case>case <expr><name>DIRAC_PCODE_SEQ_HEADER</name></expr>:</case>
<case>case <expr><name>DIRAC_PCODE_END_SEQ</name></expr>:</case>
<expr_stmt><expr><call><name>send_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>parse_code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>unit</name> <operator>+</operator> <name>DIRAC_DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument><expr><name>unit_size</name> <operator>-</operator> <name>DIRAC_DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DIRAC_PCODE_PICTURE_HQ</name></expr>:</case>
<expr_stmt><expr><call><name>send_picture</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name> <operator>+</operator> <name>DIRAC_DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument><expr><name>unit_size</name> <operator>-</operator> <name>DIRAC_DATA_UNIT_HEADER_SIZE</name></expr></argument>, <argument><expr><name>interlaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DIRAC_PCODE_AUX</name></expr>:</case>
<case>case <expr><name>DIRAC_PCODE_PAD</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"VC-2 parse code %d"</literal></expr></argument>, <argument><expr><name>parse_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>unit</name> <operator>+=</operator> <name>unit_size</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
