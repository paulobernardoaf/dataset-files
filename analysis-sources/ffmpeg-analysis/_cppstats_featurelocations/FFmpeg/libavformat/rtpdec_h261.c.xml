<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\rtpdec_h261.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_H261_PAYLOAD_HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>PayloadContext</name> <block>{
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>endbyte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endbyte_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h261_close_context</name><parameter_list>(<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>pl_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pl_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pl_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h261_handle_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rtp_h261_ctx</name></decl></parameter>,
<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sbit</name></decl>, <decl><type ref="prev"/><name>ebit</name></decl>, <decl><type ref="prev"/><name>gobn</name></decl>, <decl><type ref="prev"/><name>mbap</name></decl>, <decl><type ref="prev"/><name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>!=</operator> <operator>*</operator><name>timestamp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>RTP_H261_PAYLOAD_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too short RTP/H.261 packet, got %d bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>





















<expr_stmt><expr><name>sbit</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ebit</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gobn</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mbap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1e</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_H261_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_H261_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gobn</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sbit</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mbap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quant</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <operator>*</operator><name>timestamp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>||</operator> <name>sbit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>==</operator> <name>sbit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&gt;&gt;</operator> <name>sbit</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name>ebit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>sbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
<operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ebit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ebit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>ebit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <name>ebit</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTP_FLAG_MARKER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>endbyte_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_rtp_finalize_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtp_h261_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_h261_dynamic_handler</name> <init>= <expr><block>{
<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"H261"</literal></expr>,
<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_H261</name></expr>,
<expr><operator>.</operator><name>need_parsing</name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PayloadContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>h261_close_context</name></expr>,
<expr><operator>.</operator><name>parse_packet</name> <operator>=</operator> <name>h261_handle_packet</name></expr>,
<expr><operator>.</operator><name>static_payload_id</name> <operator>=</operator> <literal type="number">31</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
