<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\mpegts.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFORMAT_MPEGTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFORMAT_MPEGTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_FEC_PACKET_SIZE</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_DVHS_PACKET_SIZE</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PACKET_SIZE</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_MAX_PACKET_SIZE</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PID_MAX</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USUAL_SECTION_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SECTION_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT_PID</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_PID</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDT_PID</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPMP_PID</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIT_PID</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDT_PID</name></cpp:macro> <cpp:value>0x0011</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAT_PID</name></cpp:macro> <cpp:value>0x0011</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIT_PID</name></cpp:macro> <cpp:value>0x0012</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RST_PID</name></cpp:macro> <cpp:value>0x0013</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDT_PID</name></cpp:macro> <cpp:value>0x0014</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOT_PID</name></cpp:macro> <cpp:value>0x0014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NET_SYNC_PID</name></cpp:macro> <cpp:value>0x0015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNT_PID</name></cpp:macro> <cpp:value>0x0016</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINK_LOCAL_PID</name></cpp:macro> <cpp:value>0x001C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEASUREMENT_PID</name></cpp:macro> <cpp:value>0x001D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIT_PID</name></cpp:macro> <cpp:value>0x001E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIT_PID</name></cpp:macro> <cpp:value>0x001F</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_OTHER_PID</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_OTHER_PID</name></cpp:macro> <cpp:value>0x1FFA</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_PID</name></cpp:macro> <cpp:value>0x1FFF</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAT_TID</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_TID</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMT_TID</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDT_TID</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M4OD_TID</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIT_TID</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONIT_TID</name></cpp:macro> <cpp:value>0x41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDT_TID</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSDT_TID</name></cpp:macro> <cpp:value>0x46</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAT_TID</name></cpp:macro> <cpp:value>0x4A</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNT_TID</name></cpp:macro> <cpp:value>0x4B</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFI_TID</name></cpp:macro> <cpp:value>0x4C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EIT_TID</name></cpp:macro> <cpp:value>0x4E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEIT_TID</name></cpp:macro> <cpp:value>0x4F</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EITS_START_TID</name></cpp:macro> <cpp:value>0x50</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EITS_END_TID</name></cpp:macro> <cpp:value>0x5F</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEITS_START_TID</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEITS_END_TID</name></cpp:macro> <cpp:value>0x6F</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDT_TID</name></cpp:macro> <cpp:value>0x70</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RST_TID</name></cpp:macro> <cpp:value>0x71</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_TID</name></cpp:macro> <cpp:value>0x72</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOT_TID</name></cpp:macro> <cpp:value>0x73</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AIT_TID</name></cpp:macro> <cpp:value>0x74</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TID</name></cpp:macro> <cpp:value>0x75</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCT_TID</name></cpp:macro> <cpp:value>0x76</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIT_TID</name></cpp:macro> <cpp:value>0x77</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPE_FEC_TID</name></cpp:macro> <cpp:value>0x78</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPNT_TID</name></cpp:macro> <cpp:value>0x79</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPE_IFEC_TID</name></cpp:macro> <cpp:value>0x7A</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTMT_TID</name></cpp:macro> <cpp:value>0x7B</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIT_TID</name></cpp:macro> <cpp:value>0x7E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIT_TID</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_MPEG1</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_MPEG2</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_MPEG1</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_MPEG2</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_PRIVATE_SECTION</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_PRIVATE_DATA</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_AAC</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_AAC_LATM</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_MPEG4</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_METADATA</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_H264</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_HEVC</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_CAVS</name></cpp:macro> <cpp:value>0x42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_VC1</name></cpp:macro> <cpp:value>0xea</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_VIDEO_DIRAC</name></cpp:macro> <cpp:value>0xd1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_AC3</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_DTS</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_TRUEHD</name></cpp:macro> <cpp:value>0x83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_TYPE_AUDIO_EAC3</name></cpp:macro> <cpp:value>0x87</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>MpegTSContext</name></name></type> <name>MpegTSContext</name>;</typedef>

<function_decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>avpriv_mpegts_parse_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>avpriv_mpegts_parse_packet</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>avpriv_mpegts_parse_close</name><parameter_list>(<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>SLConfigDescr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>use_au_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_au_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_rand_acc_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_timestamps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_idle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timestamp_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timestamp_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ocr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>au_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inst_bitrate_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>degr_prior_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>au_seq_num_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_seq_num_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLConfigDescr</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Mp4Descr</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>es_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dec_config_descr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dec_config_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SLConfigDescr</name></type> <name>sl</name></decl>;</decl_stmt>
}</block></struct></type> <name>Mp4Descr</name>;</typedef>










<function_decl><type><name>int</name></type> <name>ff_parse_mpeg2_descriptor</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>desc_list_end</name></decl></parameter>,
<parameter><decl><type><name>Mp4Descr</name> <modifier>*</modifier></type><name>mp4_descr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp4_descr_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>,
<parameter><decl><type><name>MpegTSContext</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ff_check_h264_startcode</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
