<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\sdp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/xiph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpeg4audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtp.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RTP_MUXER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXTRADATA_SIZE</name></cpp:macro> <cpp:value>((INT_MAX - 10) / 2)</cpp:value></cpp:define>

<struct>struct <name>sdp_session_level</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sdp_version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>start_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ttl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_addr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdp_write_address</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dest_addr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dest_type</name> <operator>=</operator> <literal type="string">"IP4"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dest_type</name></expr></argument>, <argument><expr><literal type="string">"IP4"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"c=IN %s %s/%d\r\n"</literal></expr></argument>, <argument><expr><name>dest_type</name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"c=IN %s %s\r\n"</literal></expr></argument>, <argument><expr><name>dest_type</name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdp_write_header</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sdp_session_level</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"v=%d\r\n"</literal>
<literal type="string">"o=- %d %d IN %s %s\r\n"</literal>
<literal type="string">"s=%s\r\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sdp_version</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>src_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>src_addr</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdp_write_address</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst_addr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dst_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"t=%d %d\r\n"</literal>
<literal type="string">"a=tool:libavformat "</literal> <call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>LIBAVFORMAT_VERSION</name></expr></argument>)</argument_list></call> <literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>resolve_destination</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_multicast</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"IP4"</literal></expr></argument>, <argument><expr><name>type_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dest_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"IP6"</literal></expr></argument>, <argument><expr><name>type_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>is_multicast</name> <operator>=</operator> <call><name>ff_is_multicast_address</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>is_multicast</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>resolve_destination</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdp_get_address</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ttl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>proto</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"rtp"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"srtp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ttl"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ttl</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ttl</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>port</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PSET_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>extradata2psets</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psets</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pset_string</name><index>[]</index></name> <init>= <expr><literal type="string">"; sprop-parameter-sets="</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>profile_string</name><index>[]</index></name> <init>= <expr><literal type="string">"; profile-level-id="</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sps_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <name>MAX_EXTRADATA_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too much extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_avc_write_annexb_extradata</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>extradata_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psets</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>MAX_PSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for the parameter sets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>psets</name></expr></argument>, <argument><expr><name>pset_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pset_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>psets</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pset_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ff_avc_find_startcode</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>, <argument><expr><name>extradata</name> <operator>+</operator> <name>extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>extradata</name> <operator>+</operator> <name>extradata_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal_type</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>r</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>nal_type</name> <operator>=</operator> <operator>*</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>ff_avc_find_startcode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>extradata</name> <operator>+</operator> <name>extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nal_type</name> <operator>!=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>nal_type</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <operator>(</operator><name>psets</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pset_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sps</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sps_end</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>psets</name><operator>)</operator></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r1</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot Base64-encode %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"!\n"</literal></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>psets</name><operator>)</operator></expr></argument>, <argument><expr><name>r1</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>psets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>sps</name> <operator>&amp;&amp;</operator> <name>sps_end</name> <operator>-</operator> <name>sps</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>profile_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>profile_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sps</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psets</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>extradata2psets_hevc</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ps_pos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ps_names</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"vps"</literal></expr>, <expr><literal type="string">"sps"</literal></expr>, <expr><literal type="string">"pps"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_arrays</name></decl>, <decl><type ref="prev"/><name>num_nalus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_isom_write_hvcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extradata_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extradata_size</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_arrays</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_arrays</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_nalus</name></decl>, <decl><type ref="prev"/><name>nalu_type</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>extradata_size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nalu_type</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>nalu_type</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>ps_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nalu_type</name> <operator>==</operator> <literal type="number">33</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>ps_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nalu_type</name> <operator>==</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>ps_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>num_nalus</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extradata</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_nalus</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>extradata_size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extradata</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>extradata_size</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ps_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>ps_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psets</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>MAX_PSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psets</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>psets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>ps_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>psets</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>psets</name></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name></expr></argument>, <argument><expr><literal type="string">"sprop-%s="</literal></expr></argument>, <argument><expr><name><name>ps_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>num_nalus</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extradata</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_nalus</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extradata</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strpos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>psets</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>strpos</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>psets</name> <operator>+</operator> <name>strpos</name></expr></argument>, <argument><expr><name>MAX_PSET_SIZE</name> <operator>-</operator> <name>strpos</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>extradata</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>psets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psets</name></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>extradata2config</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <name>MAX_EXTRADATA_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too much extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for the config info.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"; config="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>config</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>xiph_extradata2config</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>header_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>headers_len</name></decl>, <decl><type ref="prev"/><name><name>header_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>config_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_header_size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_THEORA</name></expr>:</case>
<expr_stmt><expr><name>first_header_size</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VORBIS</name></expr>:</case>
<expr_stmt><expr><name>first_header_size</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported Xiph codec ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_split_xiph_headers</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>,
<argument><expr><name>first_header_size</name></expr></argument>, <argument><expr><name>header_start</name></expr></argument>,
<argument><expr><name>header_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata corrupt.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>headers_len</name> <operator>=</operator> <name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>header_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>config_len</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> 
<literal type="number">3</literal> <operator>+</operator> 
<literal type="number">2</literal> <operator>+</operator> 
<literal type="number">1</literal> <operator>+</operator> 
<literal type="number">2</literal> <operator>+</operator> 
<name>headers_len</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>config_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>xiph_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encoded_config</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name>config_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoded_config</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>xiph_fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>config</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>config</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RTP_XIPH_IDENT</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RTP_XIPH_IDENT</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RTP_XIPH_IDENT</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>headers_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>headers_len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>config</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>header_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>config</name> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>encoded_config</name></expr></argument>, <argument><expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name>config_len</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>config</name></expr></argument>, <argument><expr><name>config_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>encoded_config</name></expr>;</return>

<label><name>xiph_fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Not enough memory for configuration string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>latm_context2profilelevel</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>profile_level</name> <init>= <expr><literal type="number">0x2B</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">24000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <literal type="number">0x28</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">48000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <literal type="number">0x29</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <literal type="number">0x2A</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">96000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <literal type="number">0x2B</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>profile_level</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>latm_context2config</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>config_byte</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rate_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>rate_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rate_index</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>rate_index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>avpriv_mpeg4audio_sample_rates</name><index>[<expr><name>rate_index</name></expr>]</index></name> <operator>==</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>rate_index</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x20</literal> <operator>|</operator> <name>rate_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config_byte</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for the config info.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>config_byte</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>config</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sdp_write_media_attributes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>payload_type</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_DIRAC</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d VC2/90000\r\n"</literal></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator>
<call><name>av_opt_flag_is_set</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"rtpflags"</literal></expr></argument>, <argument><expr><literal type="string">"h264_mode0"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>extradata2psets</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d H264/90000\r\n"</literal>
<literal type="string">"a=fmtp:%d packetization-mode=%d%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><ternary><condition><expr><name>config</name></expr> ?</condition><then> <expr><name>config</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_H261</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pic_fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">176</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">144</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pic_fmt</name> <operator>=</operator> <literal type="string">"QCIF=1"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">352</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">288</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pic_fmt</name> <operator>=</operator> <literal type="string">"CIF=1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d H261/90000\r\n"</literal></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pic_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=fmtp:%d %s\r\n"</literal></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>pic_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name> <operator>||</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>||</operator>
<operator>!</operator><call><name>av_opt_flag_is_set</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"rtpflags"</literal></expr></argument>, <argument><expr><literal type="string">"rfc2190"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d H263-2000/90000\r\n"</literal>
<literal type="string">"a=framesize:%d %d-%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>extradata2psets_hevc</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d H265/90000\r\n"</literal></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=fmtp:%d %s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>extradata2config</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d MP4V-ES/90000\r\n"</literal>
<literal type="string">"a=fmtp:%d profile-level-id=1%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><ternary><condition><expr><name>config</name></expr> ?</condition><then> <expr><name>config</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_AAC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator>
<call><name>av_opt_flag_is_set</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"rtpflags"</literal></expr></argument>, <argument><expr><literal type="string">"latm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>latm_context2config</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d MP4A-LATM/%d/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d profile-level-id=%d;cpresent=0;config=%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><call><name>latm_context2profilelevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>extradata2config</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AAC with no global headers is currently not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d MPEG4-GENERIC/%d/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d profile-level-id=1;"</literal>
<literal type="string">"mode=AAC-hbr;sizelength=13;indexlength=3;"</literal>
<literal type="string">"indexdeltalength=3%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d L16/%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d L24/%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d PCMU/%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d PCMA/%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_AMR_NB</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d AMR/%d/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d octet-align=1\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_AMR_WB</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d AMR-WB/%d/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d octet-align=1\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VORBIS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>xiph_extradata2config</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Vorbis configuration info missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d vorbis/%d/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d configuration=%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_THEORA</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pix_fmt</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <literal type="string">"YCbCr-4:2:0"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <literal type="string">"YCbCr-4:2:2"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <literal type="string">"YCbCr-4:4:4"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>xiph_extradata2config</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Theora configuration info missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d theora/90000\r\n"</literal>
<literal type="string">"a=fmtp:%d delivery-method=inline; "</literal>
<literal type="string">"width=%d; height=%d; sampling=%s; "</literal>
<literal type="string">"configuration=%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d VP8/90000\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d VP9/90000\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d JPEG/90000\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_G722</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d G722/%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><literal type="number">8000</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_G726</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d AAL2-G726-%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_G726LE</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>payload_type</name> <operator>&gt;=</operator> <name>RTP_PT_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d G726-%d/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ILBC</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d iLBC/%d\r\n"</literal>
<literal type="string">"a=fmtp:%d mode=%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">38</literal></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">30</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_SPEEX</name></expr>:</case>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d speex/%d\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vad_option</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"on"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><literal type="string">"vad"</literal></expr></argument>, <argument><expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vad_option</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>vad_option</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"vad"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"off"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=fmtp:%d vbr=%s\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_OPUS</name></expr>:</case>






<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=rtpmap:%d opus/48000/2\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"a=fmtp:%d sprop-stereo=1\r\n"</literal></expr></argument>,
<argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_sdp_write_media</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>payload_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>payload_type</name> <operator>=</operator> <call><name>ff_rtp_get_payload_type</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr> :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"video"</literal></expr> ;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr> :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"audio"</literal></expr> ;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"text"</literal></expr> ;</expr_stmt> <break>break;</break>
<default>default :</default> <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"application"</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"m=%s %d RTP/AVP %d\r\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sdp_write_address</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>dest_addr</name></expr></argument>, <argument><expr><name>dest_type</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"b=AS:%"</literal><name>PRId64</name><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sdp_write_media_attributes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_sdp_create</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name><name>ac</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_files</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>ac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sdp_session_level</name></name></type> <name>s</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>ttl</name></decl>, <decl><type ref="prev"/><name>is_multicast</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dst_type</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>user</name></name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>src_addr</name></name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>src_type</name></name> <operator>=</operator> <literal type="string">"IP4"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>title</name></expr> ?</condition><then> <expr><name><name>title</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><literal type="string">"No Name"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_files</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>sdp_get_address</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr> ?</condition><then> <expr><name><name>ac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_multicast</name> <operator>=</operator> <call><name>resolve_destination</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_multicast</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dst_addr</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>dst_type</name></name> <operator>=</operator> <name>dst_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dst_type</name></expr></argument>, <argument><expr><literal type="string">"IP6"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>src_addr</name></name> <operator>=</operator> <literal type="string">"::1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>src_type</name></name> <operator>=</operator> <literal type="string">"IP6"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sdp_write_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_files</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>sdp_get_address</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttl</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr> ?</condition><then> <expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>url</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_multicast</name> <operator>=</operator> <call><name>resolve_destination</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_multicast</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ttl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nb_streams</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_sdp_write_media</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>dst_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>port</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>port</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><literal type="string">"a=control:streamid=%d\r\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pb</name> <operator>&amp;&amp;</operator> <name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pb</name><operator>-&gt;</operator><name>av_class</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>crypto_suite</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>crypto_params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="string">"srtp_out_suite"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>crypto_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="string">"srtp_out_params"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>crypto_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>crypto_suite</name> <operator>&amp;&amp;</operator> <name><name>crypto_suite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><literal type="string">"a=crypto:1 %s inline:%s\r\n"</literal></expr></argument>,
<argument><expr><name>crypto_suite</name></expr></argument>, <argument><expr><name>crypto_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>crypto_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>crypto_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>av_sdp_create</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name><name>ac</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_files</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_sdp_write_media</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
