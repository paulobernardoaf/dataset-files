<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\http.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpauth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>MAX_URL_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REDIRECTS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SINGLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MUTLI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXPIRY</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITESPACES</name></cpp:macro> <cpp:value>" \n\t\r"</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>LOWER_PROTO</name></decl>,
<decl><name>READ_HEADERS</name></decl>,
<decl><name>WRITE_REPLY_HEADERS</name></decl>,
<decl><name>FINISH</name></decl>
}</block></enum></type><name>HandshakeState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HTTPContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><name>buf_ptr</name>, <modifier>*</modifier><name>buf_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chunksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chunkend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name></decl>, <name>end_off</name>, <name>filesize</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPAuthState</name></type> <name>auth_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPAuthState</name></type> <name>proxy_auth_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mime_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>http_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>referer</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HTTP_USER_AGENT</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent_deprecated</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content_type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>willclose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seekable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>chunked_post</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_chunked_post</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multiple_requests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>post_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>post_datalen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_akamai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_mediagateway</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookies</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>cookie_dict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>icy_data_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>icy_metaint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>icy_metadata_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>icy_metadata_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>compressed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>z_stream</name></type> <name>inflate_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inflate_buffer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>chained_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>send_expect_100</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect_at_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect_streamed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect_delay_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reply_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_multi_client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HandshakeState</name></type> <name>handshake_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_connected_server</name></decl>;</decl_stmt>
}</block></struct></type> <name>HTTPContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HTTPContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_USER_AGENT</name></cpp:macro> <cpp:value>"Lavf/" AV_STRINGIFY(LIBAVFORMAT_VERSION)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"seekable"</literal></expr>, <expr><literal type="string">"control seekability of connection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>seekable</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chunked_post"</literal></expr>, <expr><literal type="string">"use chunked transfer-encoding for posts"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chunked_post</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http_proxy"</literal></expr>, <expr><literal type="string">"set HTTP proxy to tunnel through"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_proxy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"headers"</literal></expr>, <expr><literal type="string">"set custom HTTP headers, can override built in default headers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"content_type"</literal></expr>, <expr><literal type="string">"set a specific content type for the POST messages"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"user_agent"</literal></expr>, <expr><literal type="string">"override User-Agent header"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>DEFAULT_USER_AGENT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"referer"</literal></expr>, <expr><literal type="string">"override referer header"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>referer</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HTTP_USER_AGENT</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"user-agent"</literal></expr>, <expr><literal type="string">"use the \"user_agent\" option instead"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent_deprecated</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>DEFAULT_USER_AGENT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name><operator>|</operator><name>AV_OPT_FLAG_DEPRECATED</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"multiple_requests"</literal></expr>, <expr><literal type="string">"use persistent connections"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>multiple_requests</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"post_data"</literal></expr>, <expr><literal type="string">"set custom HTTP post data"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>post_data</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mime_type"</literal></expr>, <expr><literal type="string">"export the MIME type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_EXPORT</name> <operator>|</operator> <name>AV_OPT_FLAG_READONLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http_version"</literal></expr>, <expr><literal type="string">"export the http response version"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_version</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_EXPORT</name> <operator>|</operator> <name>AV_OPT_FLAG_READONLY</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cookies"</literal></expr>, <expr><literal type="string">"set cookies to be sent in applicable future requests, use newline delimited Set-Cookie HTTP field value syntax"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icy"</literal></expr>, <expr><literal type="string">"request ICY metadata"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>icy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icy_metadata_headers"</literal></expr>, <expr><literal type="string">"return ICY metadata headers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>icy_metadata_headers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_EXPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"icy_metadata_packet"</literal></expr>, <expr><literal type="string">"return current ICY metadata packet"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>icy_metadata_packet</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_EXPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><literal type="string">"metadata read from the bitstream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_EXPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"auth_type"</literal></expr>, <expr><literal type="string">"HTTP authentication type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>auth_state</name><operator>.</operator><name>auth_type</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HTTP_AUTH_NONE</name></expr> }</block></expr>, <expr><name>HTTP_AUTH_NONE</name></expr>, <expr><name>HTTP_AUTH_BASIC</name></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr>, <expr><literal type="string">"auth_type"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"No auth method set, autodetect"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HTTP_AUTH_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr>, <expr><literal type="string">"auth_type"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"basic"</literal></expr>, <expr><literal type="string">"HTTP basic authentication"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HTTP_AUTH_BASIC</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr>, <expr><literal type="string">"auth_type"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"send_expect_100"</literal></expr>, <expr><literal type="string">"Force sending an Expect: 100-continue header for POST"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>send_expect_100</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"location"</literal></expr>, <expr><literal type="string">"The actual location of the data received"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset"</literal></expr>, <expr><literal type="string">"initial byte offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"end_offset"</literal></expr>, <expr><literal type="string">"try to limit the request to bytes preceding this offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>end_off</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"method"</literal></expr>, <expr><literal type="string">"Override the HTTP method or set the expected HTTP method from a client"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reconnect"</literal></expr>, <expr><literal type="string">"auto reconnect after disconnect before EOF"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reconnect</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reconnect_at_eof"</literal></expr>, <expr><literal type="string">"auto reconnect at EOF"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reconnect_at_eof</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reconnect_streamed"</literal></expr>, <expr><literal type="string">"auto reconnect streamed / non seekable streams"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reconnect_streamed</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reconnect_delay_max"</literal></expr>, <expr><literal type="string">"max reconnect delay in seconds after which to give up"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reconnect_delay_max</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">120</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name><operator>/</operator><literal type="number">1000</literal><operator>/</operator><literal type="number">1000</literal></expr>, <expr><name>D</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"listen"</literal></expr>, <expr><literal type="string">"listen on HTTP"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>listen</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"resource"</literal></expr>, <expr><literal type="string">"The resource requested by a client"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reply_code"</literal></expr>, <expr><literal type="string">"The http status code to return to a client"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reply_code</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">200</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><literal type="number">599</literal></expr>, <expr><name>E</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_connect</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hoststr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxyauth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_read_header</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_shutdown</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>ff_http_init_auth_state</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>URLContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>HTTPContext</name> <operator>*</operator><operator>)</operator><name><name>dest</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>auth_state</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>HTTPContext</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>auth_state</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTPAuthState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>HTTPContext</name> <operator>*</operator><operator>)</operator><name><name>dest</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>proxy_auth_state</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>HTTPContext</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>proxy_auth_state</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTPAuthState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_open_cnx_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proxy_path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lower_proto</name> <init>= <expr><literal type="string">"tcp"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>local_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashmark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hoststr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proto</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>auth</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proxyauth</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>path1</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sanitized_path</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>urlbuf</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>use_proxy</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>location_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><name>path1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>hoststr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>proxy_path</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>http_proxy</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>http_proxy</name></name></expr> </then><else>: <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"http_proxy"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>use_proxy</name> <operator>=</operator> <operator>!</operator><call><name>ff_http_match_no_proxy</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"no_proxy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>proxy_path</name> <operator>&amp;&amp;</operator> <call><name>av_strstart</name><argument_list>(<argument><expr><name>proxy_path</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lower_proto</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_proxy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">443</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hashmark</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashmark</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>hashmark</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sanitized_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sanitized_path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>sanitized_path</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>path1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>local_path</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_proxy</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>urlbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>urlbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>proxyauth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxyauth</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>proxy_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lower_proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>http_connect</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>local_path</name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>,
<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>proxyauth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>location_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>location_changed</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>http_open_cnx</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPAuthType</name></type> <name>cur_auth_type</name></decl>, <decl><type ref="prev"/><name>cur_proxy_auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>location_changed</name></decl>, <decl><type ref="prev"/><name>attempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>redirects</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<label><name>redo</name>:</label>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chained_options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_auth_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_proxy_auth_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>location_changed</name> <operator>=</operator> <call><name>http_open_cnx_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>location_changed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attempts</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">401</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_auth_type</name> <operator>==</operator> <name>HTTP_AUTH_NONE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>stale</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name> <operator>&amp;&amp;</operator> <name>attempts</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redo</name>;</goto>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">407</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_proxy_auth_type</name> <operator>==</operator> <name>HTTP_AUTH_NONE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>stale</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name> <operator>&amp;&amp;</operator> <name>attempts</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redo</name>;</goto>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">301</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">302</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">303</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">307</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name>location_changed</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>redirects</name><operator>++</operator> <operator>&gt;=</operator> <name>MAX_REDIRECTS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attempts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>location_changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>redo</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>location_changed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>location_changed</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_http_averror</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>ff_http_get_shutdown_status</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>read_ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_http_do_new_request</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ff_http_do_new_request2</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_http_do_new_request2</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hostname2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proto1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proto2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port1</name></decl>, <decl><type ref="prev"/><name>port2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>prot</name></name> <operator>||</operator>
<operator>!</operator><operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>prot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>prot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>hostname1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port1</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>hostname2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port1</name> <operator>!=</operator> <name>port2</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>hostname1</name></expr></argument>, <argument><expr><name>hostname2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot reuse HTTP connection for different host: %s:%d != %s:%d\n"</literal></expr></argument>,
<argument><expr><name>hostname1</name></expr></argument>, <argument><expr><name>port1</name></expr></argument>,
<argument><expr><name>hostname2</name></expr></argument>, <argument><expr><name>port2</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_shutdown</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunkend</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Opening \'%s\' for %s\n"</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr> ?</condition><then> <expr><literal type="string">"writing"</literal></expr> </then><else>: <expr><literal type="string">"reading"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_open_cnx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_http_averror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_averror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>status_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">400</literal></expr>:</case> <return>return <expr><name>AVERROR_HTTP_BAD_REQUEST</name></expr>;</return>
<case>case <expr><literal type="number">401</literal></expr>:</case> <return>return <expr><name>AVERROR_HTTP_UNAUTHORIZED</name></expr>;</return>
<case>case <expr><literal type="number">403</literal></expr>:</case> <return>return <expr><name>AVERROR_HTTP_FORBIDDEN</name></expr>;</return>
<case>case <expr><literal type="number">404</literal></expr>:</case> <return>return <expr><name>AVERROR_HTTP_NOT_FOUND</name></expr>;</return>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>status_code</name> <operator>&gt;=</operator> <literal type="number">400</literal> <operator>&amp;&amp;</operator> <name>status_code</name> <operator>&lt;=</operator> <literal type="number">499</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_HTTP_OTHER_4XX</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>status_code</name> <operator>&gt;=</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_HTTP_SERVER_ERROR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>default_averror</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_write_reply</name><parameter_list>(<parameter><decl><type><name>URLContext</name><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>body</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>reply_code</name></decl>, <decl><type ref="prev"/><name>message_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reply_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>content_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>content_type</name> <operator>=</operator> <literal type="string">"text/plain"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status_code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>body</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>status_code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVERROR_HTTP_BAD_REQUEST</name></expr>:</case>
<case>case <expr><literal type="number">400</literal></expr>:</case>
<expr_stmt><expr><name>reply_code</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_text</name> <operator>=</operator> <literal type="string">"Bad Request"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVERROR_HTTP_FORBIDDEN</name></expr>:</case>
<case>case <expr><literal type="number">403</literal></expr>:</case>
<expr_stmt><expr><name>reply_code</name> <operator>=</operator> <literal type="number">403</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_text</name> <operator>=</operator> <literal type="string">"Forbidden"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVERROR_HTTP_NOT_FOUND</name></expr>:</case>
<case>case <expr><literal type="number">404</literal></expr>:</case>
<expr_stmt><expr><name>reply_code</name> <operator>=</operator> <literal type="number">404</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_text</name> <operator>=</operator> <literal type="string">"Not Found"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">200</literal></expr>:</case>
<expr_stmt><expr><name>reply_code</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_text</name> <operator>=</operator> <literal type="string">"OK"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>content_type</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr> </then><else>: <expr><literal type="string">"application/octet-stream"</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVERROR_HTTP_SERVER_ERROR</name></expr>:</case>
<case>case <expr><literal type="number">500</literal></expr>:</case>
<expr_stmt><expr><name>reply_code</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reply_text</name> <operator>=</operator> <literal type="string">"Internal server error"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>body</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>message_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"HTTP/1.1 %03d %s\r\n"</literal>
<literal type="string">"Content-Type: %s\r\n"</literal>
<literal type="string">"Content-Length: %"</literal><name>SIZE_SPECIFIER</name><literal type="string">"\r\n"</literal>
<literal type="string">"%s"</literal>
<literal type="string">"\r\n"</literal>
<literal type="string">"%03d %s\r\n"</literal></expr></argument>,
<argument><expr><name>reply_code</name></expr></argument>,
<argument><expr><name>reply_text</name></expr></argument>,
<argument><expr><name>content_type</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>reply_text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">6</literal></expr></argument>, 
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>reply_code</name></expr></argument>,
<argument><expr><name>reply_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>message_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"HTTP/1.1 %03d %s\r\n"</literal>
<literal type="string">"Content-Type: %s\r\n"</literal>
<literal type="string">"Transfer-Encoding: chunked\r\n"</literal>
<literal type="string">"%s"</literal>
<literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name>reply_code</name></expr></argument>,
<argument><expr><name>reply_text</name></expr></argument>,
<argument><expr><name>content_type</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"HTTP reply header: \n%s----\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>message_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_http_errors</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>http_write_reply</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_handshake</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>new_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>cl</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>hd</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>handshake_step</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOWER_PROTO</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Lower protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_handshake</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal> <operator>+</operator> <name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>handshake_step</name></name> <operator>=</operator> <name>READ_HEADERS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>is_connected_server</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>READ_HEADERS</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Read headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>http_read_header</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_location</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>handle_http_errors</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>handshake_step</name></name> <operator>=</operator> <name>WRITE_REPLY_HEADERS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>WRITE_REPLY_HEADERS</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Reply code: %d\n"</literal></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>reply_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>http_write_reply</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>reply_code</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>handshake_step</name></name> <operator>=</operator> <name>FINISH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FINISH</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_listen</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proto</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lower_url</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lower_proto</name> <init>= <expr><literal type="string">"tcp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lower_proto</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>lower_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lower_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lower_proto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dict_set_int</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"listen"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>listen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>lower_url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>
)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>handshake_step</name></name> <operator>=</operator> <name>LOWER_PROTO</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>listen</name></name> <operator>==</operator> <name>HTTP_SINGLE</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reply_code</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>http_handshake</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chained_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chained_options</name></name></expr></argument>, <argument><expr><operator>*</operator><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"No trailing CRLF found in HTTP header. Adding it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>listen</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>http_listen</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_open_cnx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chained_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_accept</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>hd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>cl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>listen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_alloc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_accept</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hd</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>is_multi_client</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_getc</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_get_line</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>http_getc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ch</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>line</name> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>&lt;</operator> <name>line_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_http_code</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>http_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>http_code</name> <operator>&gt;=</operator> <literal type="number">400</literal> <operator>&amp;&amp;</operator> <name>http_code</name> <operator>&lt;</operator> <literal type="number">600</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>http_code</name> <operator>!=</operator> <literal type="number">401</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>http_code</name> <operator>!=</operator> <literal type="number">407</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>SPACE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"HTTP error %d %s\n"</literal></expr></argument>, <argument><expr><name>http_code</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_http_averror</name><argument_list>(<argument><expr><name>http_code</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_location</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>redirected_location</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_loc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_make_absolute_url</name><argument_list>(<argument><expr><name>redirected_location</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>redirected_location</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_loc</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>redirected_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_loc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>new_loc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_content_range</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bytes "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>slash</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_akamai</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>!=</operator> <literal type="number">2147483647</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_content_encoding</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"gzip"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"deflate"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Error during zlib initialisation: %s\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>zlibCompileFlags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Your zlib was compiled without gzip support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Compressed (%s) content, need zlib with gzip support\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown content coding: %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_icy</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_first</name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>icy_metadata_headers</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_set_cookie_expiry_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>exp_buf</name><index>[<expr><name>MAX_EXPIRY</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>exp_buf_len</name> <init>= <expr><name>MAX_EXPIRY</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expiry</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>exp_buf_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>exp_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>exp_str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>exp_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expiry</name> <operator>=</operator> <name>exp_buf</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name><name>expiry</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>expiry</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>expiry</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expiry</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><ternary><condition><expr><call><name>av_small_strptime</name><argument_list>(<argument><expr><name>expiry</name></expr></argument>, <argument><expr><literal type="string">"%d%b%Y%H%M%S"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_set_cookie</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_cookie</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_param</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>back</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>set_cookie</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cstr</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>set_cookie</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>back</name> <operator>=</operator> <operator>&amp;</operator><name><name>cstr</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>WHITESPACES</name></expr></argument>, <argument><expr><operator>*</operator><name>back</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>back</name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>back</name> <operator>==</operator> <name>cstr</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>back</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>next_param</name> <operator>=</operator> <name>cstr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>param</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>next_param</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_param</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>param</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_cookie</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>cookies</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>new_params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cookie_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eql</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>parse_set_cookie</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>cookie_entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>new_params</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cookie_entry</name> <operator>||</operator> <operator>!</operator><name><name>cookie_entry</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>new_params</name></expr></argument>, <argument><expr><literal type="string">"expires"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>new_tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_set_cookie_expiry_time</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_tm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>cookies</name></expr></argument>, <argument><expr><name><name>cookie_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&amp;&amp;</operator> <name><name>e2</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>old_params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_set_cookie</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_params</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>old_params</name></expr></argument>, <argument><expr><literal type="string">"expires"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&amp;&amp;</operator> <name><name>e2</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>old_tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_set_cookie_expiry_time</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_tm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>eql</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>av_strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>eql</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>eql</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cookie_string</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cookies</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cookies</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>*</operator><name>cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cookies</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cookies</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cookies</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><operator>*</operator><name>cookies</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_line</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auto_method</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name></expr> ?</condition><then> <expr><literal type="string">"POST"</literal></expr> </then><else>: <expr><literal type="string">"GET"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>method</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>resource</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_connected_server</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Received method: %s\n"</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Received and expected HTTP method do not match. (%s expected, %s received)\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_http_averror</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Autodetected %s HTTP method\n"</literal></expr></argument>, <argument><expr><name>auto_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>auto_method</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Received and autodetected HTTP method did not match "</literal>
<literal type="string">"(%s autodetected %s received)\n"</literal></expr></argument>, <argument><expr><name>auto_method</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_http_averror</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>resource</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Requested resource: %s\n"</literal></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>resource</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"HTTP/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Malformed HTTP version string.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_http_averror</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"HTTP version string: %s\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>http_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>http_version</name></name> <operator>=</operator> <call><name>av_strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"http_code=%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>check_http_code</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Location"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_location</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>new_location</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Content-Range"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>parse_content_range</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Accept-Ranges"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"WWW-Authenticate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_http_auth_handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Authentication-Info"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_http_auth_handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Authenticate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_http_auth_handle_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Server"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"AkamaiGHost"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_akamai</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"MediaGateway"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_mediagateway</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mime_type</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Set-Cookie"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_cookie</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cookie_dict</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s'\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Icy-MetaInt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>icy_metaint</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Icy-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_icy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Content-Encoding"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_content_encoding</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cookies</name><parameter_list>(<parameter><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cookies</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookie</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>set_cookies</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cookie_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>set_cookies</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cookies</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cookie</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>cookie_params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>cookie_entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>parse_cookie</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cookie_dict</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s'\n"</literal></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>parse_set_cookie</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cookie_params</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>cookie_entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>cookie_params</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cookie_entry</name> <operator>||</operator> <operator>!</operator><name><name>cookie_entry</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>cookie_params</name></expr></argument>, <argument><expr><literal type="string">"expires"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm_buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_set_cookie_expiry_time</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm_buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>cookie_params</name></expr></argument>, <argument><expr><literal type="string">"domain"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>domain_offset</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>domain_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>domain</name><index>[<expr><name>domain_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>cookie_params</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>||</operator> <call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_cookie</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cookies</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cookies</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name><name>cookie_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>cookie_entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>*</operator><name>cookies</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cookies</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s; %s=%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>cookie_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>cookie_entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cookies</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>skip_cookie</name>:</label>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cookie_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>set_cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>has_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>header</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_read_header</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>http_get_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"header='%s'\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>process_line</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_count</name></name></expr></argument>, <argument><expr><name>new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_mediagateway</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">2000000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 


<expr_stmt><expr><call><name>cookie_string</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cookie_dict</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cookie_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>bprint_escaped_path</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEEDS_ESCAPE</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch) &lt;= ' ' || (ch) &gt;= '\x7f' || (ch) == '"' || (ch) == '%' || (ch) == '&lt;' || (ch) == '&gt;' || (ch) == '\\' || (ch) == '^' || (ch) == '`' || (ch) == '{' || (ch) == '}' || (ch) == '|')</cpp:value></cpp:define>



<while>while <condition>(<expr><operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <call><name>av_isxdigit</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_isxdigit</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>path</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>path</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>path</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>NEEDS_ESCAPE</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%%%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>path</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>path</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_connect</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_path</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hoststr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxyauth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>post</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authstr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>proxyauthstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>off</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_expect_100</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init_for_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>post</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>post_data</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>post</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>method</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>method</name> <operator>=</operator> <ternary><condition><expr><name>post</name></expr> ?</condition><then> <expr><literal type="string">"POST"</literal></expr> </then><else>: <expr><literal type="string">"GET"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>authstr</name> <operator>=</operator> <call><name>ff_http_auth_create_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>auth_state</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>,
<argument><expr><name>local_path</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxyauthstr</name> <operator>=</operator> <call><name>ff_http_auth_create_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name></name></expr></argument>, <argument><expr><name>proxyauth</name></expr></argument>,
<argument><expr><name>local_path</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>post</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>post_data</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>send_expect_100</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>send_expect_100</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>send_expect_100</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>send_expect_100</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>auth</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>auth</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>==</operator> <name>HTTP_AUTH_NONE</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>!=</operator> <literal type="number">401</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>send_expect_100</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HTTP_USER_AGENT</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent_deprecated</name></name></expr></argument>, <argument><expr><name>DEFAULT_USER_AGENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent_deprecated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bprint_escaped_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.1\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>post</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding: chunked\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nUser-Agent: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"User-Agent: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>referer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nReferer: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Referer: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nAccept: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Accept: */*\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nRange: "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>post</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>end_off</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Range: bytes=%"</literal><name>PRIu64</name><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>send_expect_100</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nExpect: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Expect: 100-continue\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nConnection: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Connection: %s\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>multiple_requests</name></name></expr> ?</condition><then> <expr><literal type="string">"keep-alive"</literal></expr> </then><else>: <expr><literal type="string">"close"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nHost: "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Host: %s\r\n"</literal></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nContent-Length: "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>post_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Content-Length: %d\r\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>post_datalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nContent-Type: "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Content-Type: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nCookie: "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cookies</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_cookies</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cookies</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>hoststr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>cookies</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Cookie: %s\r\n"</literal></expr></argument>, <argument><expr><name>cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="string">"\r\nIcy-MetaData: "</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>icy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Icy-MetaData: 1\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>authstr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>authstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>proxyauthstr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"Proxy-%s"</literal></expr></argument>, <argument><expr><name>proxyauthstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"request: %s\n"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"overlong headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>post_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>post_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>post_datalen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>post</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>post_data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>send_expect_100</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>http_read_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new_location</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>off</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>proxyauthstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_buf_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chunkend</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>http_get_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>*</operator><name>line</name></expr>)</condition>;</do> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>,
<argument><expr><literal type="string">"Chunked encoding data size: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>multiple_requests</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>http_get_line</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunkend</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Last chunk received, closing conn\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chunk size %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>target_end</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>==</operator> <name>UINT64_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name>target_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>willclose</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>==</operator> <name>UINT64_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name>target_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Stream ends prematurely at %"</literal><name>PRIu64</name><literal type="string">", should be %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>target_end</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>&gt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunksize</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECOMPRESS_BUF_SIZE</name></cpp:macro> <cpp:value>(256 * 1024)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http_buf_read_compressed</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>DECOMPRESS_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>http_buf_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name></expr></argument>, <argument><expr><name>DECOMPRESS_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>read</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name></name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"inflate return value: %d, %s\n"</literal></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>size</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name><operator>.</operator><name>avail_out</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>http_seek_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_reconnect</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_read_stream</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>new_location</name></decl>, <decl><type ref="prev"/><name>read_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>end_header</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>http_read_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compressed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>http_buf_read_compressed</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>http_buf_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>read_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>target</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>read_ret</name> <operator>==</operator> <name>AVERROR_EXIT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>reconnect_streamed</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>reconnect</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>reconnect_at_eof</name></name> <operator>&amp;&amp;</operator> <name>read_ret</name> <operator>==</operator> <name>AVERROR_EOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reconnect_delay</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>reconnect_delay_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Will reconnect at %"</literal><name>PRIu64</name><literal type="string">" in %d second(s), error=%s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>reconnect_delay</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>read_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_network_sleep_interruptible</name><argument_list>(<argument><expr><literal type="number">1000U</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><name>reconnect_delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reconnect_delay</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>reconnect_delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seek_ret</name> <operator>=</operator> <call><name>http_seek_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>seek_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>seek_ret</name> <operator>!=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reconnect at %"</literal><name>PRIu64</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>read_ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>http_buf_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>read_ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>http_read_stream_all</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>http_read_stream</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_metadata</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"='"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"';"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Metadata update for %s: %s\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>store_icy</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>icy_metaint</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>icy_metaint</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remaining</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>uint8_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>http_read_stream_all</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">255</literal> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ch</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_read_stream_all</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"icy_metadata_packet"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>update_metadata</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>icy_metaint</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>icy_metaint</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>store_icy</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>http_read_stream</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>icy_data_read</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>http_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>crlf</name><index>[]</index></name> <init>= <expr><literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%x\r\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>crlf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>crlf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_shutdown</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>footer</name><index>[]</index></name> <init>= <expr><literal type="string">"0\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chunked_post</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>listen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>footer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AVIO_FLAG_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read_ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVIO_FLAG_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>read_ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"URL read error: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>read_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>read_ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>
<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflate_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>end_chunked_post</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_shutdown</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chained_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>http_seek_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_reconnect</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>old_hd</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_off</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>old_buf</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_buf_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>AVSEEK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>force_reconnect</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>whence</name> <operator>==</operator> <name>SEEK_SET</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>==</operator> <name>UINT64_MAX</name> <operator>&amp;&amp;</operator> <name>whence</name> <operator>==</operator> <name>SEEK_END</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>!=</operator> <name>SEEK_SET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>end_pos</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>end_off</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>old_buf_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>old_buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name></expr></argument>, <argument><expr><name>old_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>http_open_cnx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>old_buf</name></expr></argument>, <argument><expr><name>old_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>old_buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name> <operator>=</operator> <name>old_hd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>old_off</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name>old_hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>http_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>http_seek_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_get_short_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffurl_get_short_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CLASS</name><parameter_list>(<parameter><type><name>flavor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass flavor ##_context_class = { .class_name = #flavor, .item_name = av_default_item_name, .option = options, .version = LIBAVUTIL_VERSION_INT, }</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTP_PROTOCOL</name></expr></cpp:if>
<expr_stmt><expr><call><name>HTTP_CLASS</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_http_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"http"</literal></expr>,
<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>http_open</name></expr>,
<expr><operator>.</operator><name>url_accept</name> <operator>=</operator> <name>http_accept</name></expr>,
<expr><operator>.</operator><name>url_handshake</name> <operator>=</operator> <name>http_handshake</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>http_read</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>http_write</name></expr>,
<expr><operator>.</operator><name>url_seek</name> <operator>=</operator> <name>http_seek</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>http_close</name></expr>,
<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>http_get_file_handle</name></expr>,
<expr><operator>.</operator><name>url_get_short_seek</name> <operator>=</operator> <name>http_get_short_seek</name></expr>,
<expr><operator>.</operator><name>url_shutdown</name> <operator>=</operator> <name>http_shutdown</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>http_context_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
<expr><operator>.</operator><name>default_whitelist</name> <operator>=</operator> <literal type="string">"http,https,tls,rtp,tcp,udp,crypto,httpproxy,data"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTPS_PROTOCOL</name></expr></cpp:if>
<expr_stmt><expr><call><name>HTTP_CLASS</name><argument_list>(<argument><expr><name>https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_https_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"https"</literal></expr>,
<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>http_open</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>http_read</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>http_write</name></expr>,
<expr><operator>.</operator><name>url_seek</name> <operator>=</operator> <name>http_seek</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>http_close</name></expr>,
<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>http_get_file_handle</name></expr>,
<expr><operator>.</operator><name>url_get_short_seek</name> <operator>=</operator> <name>http_get_short_seek</name></expr>,
<expr><operator>.</operator><name>url_shutdown</name> <operator>=</operator> <name>http_shutdown</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>https_context_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
<expr><operator>.</operator><name>default_whitelist</name> <operator>=</operator> <literal type="string">"http,https,tls,rtp,tcp,udp,crypto,httpproxy"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTPPROXY_PROTOCOL</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hoststr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>auth</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pathbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lower_url</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>attempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HTTPAuthType</name></type> <name>cur_auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_loc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>seekable</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>,
<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>hoststr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hoststr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>pathbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>lower_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lower_url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>redo</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>lower_url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>authstr</name> <operator>=</operator> <call><name>ff_http_auth_create_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"CONNECT %s HTTP/1.1\r\n"</literal>
<literal type="string">"Host: %s\r\n"</literal>
<literal type="string">"Connection: close\r\n"</literal>
<literal type="string">"%s%s"</literal>
<literal type="string">"\r\n"</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>hoststr</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>authstr</name></expr> ?</condition><then> <expr><literal type="string">"Proxy-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>authstr</name></expr> ?</condition><then> <expr><name>authstr</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_auth_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>auth_type</name></name></expr>;</expr_stmt>










<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_read_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attempts</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>==</operator> <literal type="number">407</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>cur_auth_type</name> <operator>==</operator> <name>HTTP_AUTH_NONE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>stale</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>proxy_auth_state</name><operator>.</operator><name>auth_type</name></name> <operator>!=</operator> <name>HTTP_AUTH_NONE</name> <operator>&amp;&amp;</operator> <name>attempts</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>redo</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name> <operator>&lt;</operator> <literal type="number">400</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_http_averror</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>http_code</name></name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>http_proxy_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HTTPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_httpproxy_protocol</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"httpproxy"</literal></expr>,
<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>http_proxy_open</name></expr>,
<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>http_buf_read</name></expr>,
<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>http_proxy_write</name></expr>,
<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>http_proxy_close</name></expr>,
<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>http_get_file_handle</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
