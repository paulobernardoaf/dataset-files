<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\xmv.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_MIN_HEADER_SIZE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_AUDIO_ADPCM51_FRONTLEFTRIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_AUDIO_ADPCM51_FRONTCENTERLOW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_AUDIO_ADPCM51_REARLEFTRIGHT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_AUDIO_ADPCM51</name></cpp:macro> <cpp:value>(XMV_AUDIO_ADPCM51_FRONTLEFTRIGHT | XMV_AUDIO_ADPCM51_FRONTCENTERLOW | XMV_AUDIO_ADPCM51_REARLEFTRIGHT)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMV_BLOCK_ALIGN_SIZE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>XMVVideoPacket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_extradata</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>extradata</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XMVVideoPacket</name>;</typedef>


<typedef>typedef <type><struct>struct <name>XMVAudioPacket</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint16_t</name></type> <name>compression</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>sample_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bits_per_sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>block_align</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>block_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>block_count</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XMVAudioPacket</name>;</typedef>


<typedef>typedef <type><struct>struct <name>XMVDemuxContext</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>audio_track_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>this_packet_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_packet_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>this_packet_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_packet_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>current_stream</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>stream_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>video_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XMVVideoPacket</name></type> <name>video</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>XMVAudioPacket</name> <modifier>*</modifier></type><name>audio</name></decl>;</decl_stmt> 
}</block></struct></type> <name>XMVDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>file_version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <name>XMV_MIN_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_version</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_version</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>file_version</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"xobX"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xmv</name><operator>-&gt;</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>file_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>this_packet_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>audio_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>this_packet_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>file_version</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>file_version</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>file_version</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Uncommon version %"</literal><name>PRIu32</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>file_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video_width</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video_height</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video_duration</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>audio</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XMVAudioPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xmv</name><operator>-&gt;</operator><name>audio</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>audio_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>audio_track</name> <operator>&lt;</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name></expr>;</condition> <incr><expr><name>audio_track</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>XMVAudioPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>&amp;</operator><name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>audio_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>packet</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>*</operator>
<name><name>packet</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator>
<name><name>packet</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name>XMV_BLOCK_ALIGN_SIZE</name> <operator>*</operator> <name><name>packet</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_wav_codec_get_id</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>,
<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>block_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>XMV_AUDIO_ADPCM51</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported 5.1 ADPCM audio stream "</literal>
<literal type="string">"(0x%04X)\n"</literal></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator> <name><name>packet</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>packet</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <name>UINT16_MAX</name> <operator>/</operator> <name>XMV_BLOCK_ALIGN_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameters for audio track %"</literal><name>PRIu16</name><literal type="string">".\n"</literal></expr></argument>,
<argument><expr><name>audio_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>next_packet_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>next_packet_size</name></name> <operator>=</operator> <name>this_packet_size</name> <operator>-</operator> <name><name>xmv</name><operator>-&gt;</operator><name>next_packet_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>stream_count</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>xmv_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xmv_read_extradata</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name> <init>= <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mspel_bit</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loop_filter</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abt_flag</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j_type_bit</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_left_mv_flag</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>per_mb_rl_bit</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name> <init>= <expr><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>mspel_bit</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>loop_filter</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>abt_flag</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>j_type_bit</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>top_left_mv_flag</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>per_mb_rl_bit</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>|=</operator> <name>slice_count</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_process_packet_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>audio_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>next_packet_size</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x007FFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>current_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name> <operator>=</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>has_extradata</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>created</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>vst</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vst</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>vst</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_WMV2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name><name>vst</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>created</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_size</name></name> <operator>-=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>stream_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>audio_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>audio_track</name> <operator>&lt;</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name></expr>;</condition> <incr><expr><name>audio_track</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>XMVAudioPacket</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><operator>&amp;</operator><name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>audio_track</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>packet</name><operator>-&gt;</operator><name>created</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ast</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>compression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <literal type="number">36</literal> <operator>*</operator> <name><name>packet</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>ast</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>created</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x007FFFFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>packet</name><operator>-&gt;</operator><name>data_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>audio_track</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>audio_track</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>packet</name><operator>-&gt;</operator><name>data_size</name></name> <operator>/</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-=</operator> <name><name>packet</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>%</operator> <name><name>packet</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_offset</name></name> <operator>=</operator> <name>data_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_offset</name> <operator>+=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>audio_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>audio_track</name> <operator>&lt;</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name></expr>;</condition> <incr><expr><name>audio_track</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>audio_track</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>=</operator> <name>data_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_offset</name> <operator>+=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>audio_track</name></expr>]</index></name><operator>.</operator><name>data_size</name></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>has_extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmv_read_extradata</name><argument_list>(<argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_size</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>data_offset</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>vst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>stream_index</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>extradata</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_fetch_new_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>this_packet_offset</name></name> <operator>==</operator> <name><name>xmv</name><operator>-&gt;</operator><name>next_packet_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>this_packet_offset</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>next_packet_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>this_packet_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>this_packet_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>this_packet_size</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>next_packet_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>this_packet_size</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>+</operator> <name><name>xmv</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmv_process_packet_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>next_packet_offset</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>this_packet_offset</name></name> <operator>+</operator> <name><name>xmv</name><operator>-&gt;</operator><name>this_packet_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_fetch_audio_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XMVAudioPacket</name> <modifier>*</modifier></type><name>audio</name> <init>= <expr><operator>&amp;</operator><name><name>xmv</name><operator>-&gt;</operator><name>audio</name><index>[<expr><name>stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>audio</name><operator>-&gt;</operator><name>data_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>current_frame</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>audio</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name><name>audio</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>block_count</name> <operator>=</operator> <name>data_size</name> <operator>/</operator> <name><name>audio</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>block_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>audio</name><operator>-&gt;</operator><name>block_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>block_count</name></name> <operator>+=</operator> <name>block_count</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>audio</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_fetch_video_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XMVVideoPacket</name> <modifier>*</modifier></type><name>video</name> <init>= <expr><operator>&amp;</operator><name><name>xmv</name><operator>-&gt;</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_size</name></decl>, <decl><type ref="prev"/><name>frame_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>video</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>video</name><operator>-&gt;</operator><name>data_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>frame_header</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <operator>(</operator><name>frame_header</name> <operator>&amp;</operator> <literal type="number">0x1FFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_timestamp</name> <operator>=</operator> <operator>(</operator><name>frame_header</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>frame_size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <name><name>video</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>frame_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>





<for>for <control>(<init><expr><name>data</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>frame_size</name></expr>;</init> <condition><expr><name>data</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name>frame_timestamp</name> <operator>+</operator> <name><name>video</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>video</name><operator>-&gt;</operator><name>last_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>frame_timestamp</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AV_PKT_FLAG_KEY</name></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-=</operator> <name>frame_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+=</operator> <name>frame_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xmv_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XMVDemuxContext</name> <modifier>*</modifier></type><name>xmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>current_frame</name></name> <operator>==</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmv_fetch_new_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmv_fetch_video_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmv_fetch_audio_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>current_frame</name></name> <operator>=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>frame_count</name></name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>&gt;=</operator> <name><name>xmv</name><operator>-&gt;</operator><name>stream_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>current_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xmv</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>current_frame</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_xmv_demuxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xmv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Microsoft XMV"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"xmv"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XMVDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>xmv_probe</name></expr>,
<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>xmv_read_header</name></expr>,
<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>xmv_read_packet</name></expr>,
<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>xmv_read_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
