<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\vpcc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vpcc.h"</cpp:file></cpp:include>

<enum>enum <name>VPX_CHROMA_SUBSAMPLING</name>
<block>{
<decl><name>VPX_SUBSAMPLING_420_VERTICAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>VPX_SUBSAMPLING_422</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>VPX_SUBSAMPLING_444</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_vpx_chroma_subsampling</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixel_format</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_w</name></decl>, <decl><type ref="prev"/><name>chroma_h</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name>pixel_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_h</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_w</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>chroma_h</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>chroma_location</name> <operator>==</operator> <name>AVCHROMA_LOC_LEFT</name><operator>)</operator></expr>
?</condition><then> <expr><name>VPX_SUBSAMPLING_420_VERTICAL</name></expr>
</then><else>: <expr><name>VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma_w</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>chroma_h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VPX_SUBSAMPLING_422</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma_w</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>chroma_h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>VPX_SUBSAMPLING_444</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format (%d)\n"</literal></expr></argument>, <argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_bit_depth</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixel_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format (%d)\n"</literal></expr></argument>,
<argument><expr><name>pixel_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_vpx_video_full_range_flag</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>color_range</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>get_vp9_level</name><parameter_list>(<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>frame_rate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>picture_size</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_rate</name> <operator>||</operator> <operator>!</operator><name><name>frame_rate</name><operator>-&gt;</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>picture_size</name> <operator>*</operator> <name><name>frame_rate</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>frame_rate</name><operator>-&gt;</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">829440</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">36864</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">10</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">2764800</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">73728</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">11</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">4608000</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">122880</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">20</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">9216000</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">245760</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">21</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">20736000</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">552960</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">30</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">36864000</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">983040</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">31</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">83558400</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">2228224</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">40</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">160432128</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">2228224</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">41</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">311951360</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">8912896</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">50</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">588251136</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">8912896</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">51</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">1176502272</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">8912896</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">52</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">1176502272</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">35651584</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">60</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">2353004544</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">35651584</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">61</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">4706009088</literal> <operator>&amp;&amp;</operator> <name>picture_size</name> <operator>&lt;=</operator> <literal type="number">35651584</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">62</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_isom_get_vpcc_features</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>frame_rate</name></decl></parameter>, <parameter><decl><type><name>VPCC</name> <modifier>*</modifier></type><name>vpcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>profile</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr> ?</condition><then>
<expr><call><name>get_vp9_level</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>par</name><operator>-&gt;</operator><name>level</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name> <init>= <expr><call><name>get_bit_depth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vpx_chroma_subsampling</name> <init>=
<expr><call><name>get_vpx_chroma_subsampling</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>chroma_location</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vpx_video_full_range_flag</name> <init>=
<expr><call><name>get_vpx_video_full_range_flag</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>vpx_chroma_subsampling</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vpx_chroma_subsampling</name> <operator>==</operator> <name>VPX_SUBSAMPLING_420_VERTICAL</name> <operator>||</operator>
<name>vpx_chroma_subsampling</name> <operator>==</operator> <name>VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FF_PROFILE_VP9_0</name></expr> </then><else>: <expr><name>FF_PROFILE_VP9_2</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FF_PROFILE_VP9_1</name></expr> </then><else>: <expr><name>FF_PROFILE_VP9_3</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vpcc</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>profile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpcc</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpcc</name><operator>-&gt;</operator><name>bitdepth</name></name> <operator>=</operator> <name>bit_depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpcc</name><operator>-&gt;</operator><name>chroma_subsampling</name></name> <operator>=</operator> <name>vpx_chroma_subsampling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpcc</name><operator>-&gt;</operator><name>full_range_flag</name></name> <operator>=</operator> <name>vpx_video_full_range_flag</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_isom_write_vpcc</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPCC</name></type> <name>vpcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_isom_get_vpcc_features</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vpcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>vpcc</name><operator>.</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>vpcc</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name><name>vpcc</name><operator>.</operator><name>bitdepth</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>vpcc</name><operator>.</operator><name>chroma_subsampling</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name><name>vpcc</name><operator>.</operator><name>full_range_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>color_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
