<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavformat\wtvenc.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wtv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WTV_BIGSECTOR_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; WTV_BIGSECTOR_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_BASE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NB_INDEX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>, 0,</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>timeline_table_0_header_events</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="char">'t'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'m'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'n'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'b'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'0'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'h'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'d'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'E'</literal><name>_</name><literal type="char">'v'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'n'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>table_0_header_legacy_attrib</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="char">'t'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'b'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'0'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'h'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'d'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'g'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'c'</literal><name>_</name><literal type="char">'y'</literal><name>_</name><literal type="char">'_'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'b'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>table_0_redirector_legacy_attrib</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="char">'t'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'b'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'0'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'d'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'c'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'o'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'g'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'c'</literal><name>_</name><literal type="char">'y'</literal><name>_</name><literal type="char">'_'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'b'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>table_0_header_time</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="char">'t'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'b'</literal><name>_</name><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'0'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'h'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'d'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'.'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'m'</literal><name>_</name><literal type="char">'e'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>legacy_attrib</name><index>[]</index></name> <init>=
<expr><block>{<expr><literal type="char">'l'</literal><name>_</name><literal type="char">'e'</literal><name>_</name><literal type="char">'g'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'c'</literal><name>_</name><literal type="char">'y'</literal><name>_</name><literal type="char">'_'</literal><name>_</name><literal type="char">'a'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'t'</literal><name>_</name><literal type="char">'r'</literal><name>_</name><literal type="char">'i'</literal><name>_</name><literal type="char">'b'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>sub_wtv_guid</name> <init>=
<expr><block>{<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0x8D</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>WtvFileIndex</name> <block>{
<decl><name>WTV_TIMELINE_TABLE_0_HEADER_EVENTS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>WTV_TIMELINE_TABLE_0_ENTRIES_EVENTS</name></decl>,
<decl><name>WTV_TIMELINE</name></decl>,
<decl><name>WTV_TABLE_0_HEADER_LEGACY_ATTRIB</name></decl>,
<decl><name>WTV_TABLE_0_ENTRIES_LEGACY_ATTRIB</name></decl>,
<decl><name>WTV_TABLE_0_REDIRECTOR_LEGACY_ATTRIB</name></decl>,
<decl><name>WTV_TABLE_0_HEADER_TIME</name></decl>,
<decl><name>WTV_TABLE_0_ENTRIES_TIME</name></decl>,
<decl><name>WTV_FILES</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_sector</name></decl>;</decl_stmt>
}</block></struct></type> <name>WtvFile</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ff_asf_guid</name> <modifier>*</modifier></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>WtvChunkEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>serial</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>WtvSyncEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>timeline_start_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvFile</name></type> <name><name>file</name><index>[<expr><name>WTV_FILES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>serial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_chunk_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_timestamp_pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_index_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WtvChunkEntry</name></type> <name><name>index</name><index>[<expr><name>MAX_NB_INDEX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_video_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WtvSyncEntry</name> <modifier>*</modifier></type><name>st_pairs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_st_pairs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvSyncEntry</name> <modifier>*</modifier></type><name>sp_pairs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_sp_pairs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_serial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>thumbnail</name></decl>;</decl_stmt>
}</block></struct></type> <name>WtvContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>add_serial_pair</name><parameter_list>(<parameter><decl><type><name>WtvSyncEntry</name> <modifier>*</modifier><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_count</name> <init>= <expr><operator>*</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvSyncEntry</name> <modifier>*</modifier></type><name>new_list</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><name>new_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WtvSyncEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_list</name><index>[<expr><operator>*</operator><name>count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>WtvSyncEntry</name><operator>)</operator><block>{<expr><name>serial</name></expr>, <expr><name>value</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>new_list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> <name>WTVHeaderWriteFunc</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WTVHeaderWriteFunc</name> <modifier>*</modifier></type><name>write_header</name></decl>;</decl_stmt>
}</block></struct></type> <name>WTVRootEntryTable</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write_pad</name><parameter_list>(<parameter><type><name>pb</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ffio_fill(pb, 0, size)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>write_chunk_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ff_asf_guid</name> <modifier>*</modifier></type><name>guid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>wctx</name><operator>-&gt;</operator><name>timeline_start_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stream_id</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>guid</name> <operator>!=</operator> <operator>&amp;</operator><name>ff_index_guid</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WtvChunkEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name> <operator>&lt;</operator> <name>MAX_NB_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>guid</name></name> <operator>=</operator> <name>guid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_chunk_header2</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ff_asf_guid</name> <modifier>*</modifier></type><name>guid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_chunk_pos</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>last_chunk_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_chunk_noindex</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>chunk_len</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name> <operator>+</operator> <name><name>wctx</name><operator>-&gt;</operator><name>timeline_start_pos</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>chunk_len</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>chunk_len</name> <operator>-</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_chunk_header2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_index_guid</name></expr></argument>, <argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>WtvChunkEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>finish_chunk_noindex</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wctx</name><operator>-&gt;</operator><name>first_index_pos</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>first_index_pos</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>finish_chunk_noindex</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name> <operator>==</operator> <name>MAX_NB_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_videoinfoheader2</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>dar</name> <init>= <macro><name>av_mul_q</name><argument_list>(<argument>st-&gt;sample_aspect_ratio</argument>, <argument>(AVRational){st-&gt;codecpar-&gt;width</argument>, <argument>st-&gt;codecpar-&gt;height}</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr> ?</condition><then> <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_bmp_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_stream_codec_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ff_asf_guid</name> <modifier>*</modifier></type><name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>media_type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>format_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>hdr_pos_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hdr_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>ff_get_codec_guid</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>ff_video_guids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media_type</name> <operator>=</operator> <operator>&amp;</operator><name>ff_mediatype_video</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format_type</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ff_format_mpeg2_video</name></expr> </then><else>: <expr><operator>&amp;</operator><name>ff_format_videoinfo2</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <name>ff_codec_bmp_tags</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>ff_get_codec_guid</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name>ff_codec_wav_guids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>media_type</name> <operator>=</operator> <operator>&amp;</operator><name>ff_mediatype_audio</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format_type</name> <operator>=</operator> <operator>&amp;</operator><name>ff_format_waveformatex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <name>ff_codec_wav_tags</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown codec_type (0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>media_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_mediasubtype_cpfilters_processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ff_format_cpfilters_processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>hdr_pos_start</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_videoinfoheader2</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_put_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>format_type</name> <operator>=</operator> <operator>&amp;</operator><name>ff_format_none</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hdr_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>hdr_pos_start</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>hdr_size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hdr_size</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hdr_size</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported codec_id (0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>avio_write</name><argument_list>(<argument>pb</argument>, <argument>(const uint8_t[]){FF_MEDIASUBTYPE_BASE_GUID}</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>format_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_stream_codec</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type> <name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_chunk_header2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_stream1_guid</name></expr></argument>, <argument><expr><literal type="number">0x80000000</literal> <operator>|</operator> <literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_stream_codec_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"write stream codec info failed codec_type(0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>finish_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_sync</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_chunk_pos</name> <init>= <expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_sync_guid</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>first_index_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_timestamp_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_serial_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>sp_pairs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>nb_sp_pairs</name></name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name> <operator>=</operator> <name>last_chunk_pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_stream_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_chunk_header2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_SBE2_STREAM_DESC_EVENT</name></expr></argument>, <argument><expr><literal type="number">0x80000000</literal> <operator>|</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>INDEX_BASE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>INDEX_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_stream_codec_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"write stream codec info failed codec_type(0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>finish_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pad</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_timestamp_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_wtv_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub_wtv_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>WTV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>WTV_BIGSECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>WTV_SECTOR_BITS</name><operator>)</operator> <operator>-</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>timeline_start_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>first_video_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_stream_codec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"write stream codec failed codec_type(0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_sync</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_stream_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"write stream data failed codec_type(0x%x)\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_index</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_timestamp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_timestamp_guid</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal> <operator>|</operator> <operator>(</operator><name>INDEX_BASE</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_timestamp_pos</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>last_chunk_pos</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_check_h264_startcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_sp_pairs</name></name></expr> ?</condition><then> <expr><name><name>wctx</name><operator>-&gt;</operator><name>sp_pairs</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_sp_pairs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>serial</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_sync</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_st_pairs</name></name></expr> ?</condition><then> <expr><name><name>wctx</name><operator>-&gt;</operator><name>st_pairs</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>nb_st_pairs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <literal type="number">5000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_serial_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>st_pairs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>nb_st_pairs</name></name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>last_pts</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_serial</name></name> <operator>=</operator> <name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>write_timestamp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_chunk_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_data_guid</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>INDEX_BASE</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wctx</name><operator>-&gt;</operator><name>serial</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_table0_header_events</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">96</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_table0_header_legacy_attrib</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>legacy_attrib</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <call><name>WTV_PAD8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">48</literal> <operator>+</operator> <call><name>WTV_PAD8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_table0_header_time</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">76</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">88</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WTVRootEntryTable</name></type> <name><name>wtv_root_entry_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>timeline_table_0_header_events</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeline_table_0_header_events</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>write_table0_header_events</name></expr>}</block></expr>,
<expr><block>{ <expr><name>ff_timeline_table_0_entries_Events_le16</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_timeline_table_0_entries_Events_le16</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><name>ff_timeline_le16</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_timeline_le16</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><name>table_0_header_legacy_attrib</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>table_0_header_legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>write_table0_header_legacy_attrib</name></expr>}</block></expr>,
<expr><block>{ <expr><name>ff_table_0_entries_legacy_attrib_le16</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_table_0_entries_legacy_attrib_le16</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><name>table_0_redirector_legacy_attrib</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>table_0_redirector_legacy_attrib</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<expr><block>{ <expr><name>table_0_header_time</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>table_0_header_time</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>write_table0_header_time</name></expr>}</block></expr>,
<expr><block>{ <expr><name>ff_table_0_entries_time_le16</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_table_0_entries_time_le16</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_root_table</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sector_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WTVRootEntryTable</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>wtv_root_entry_table</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wtv_root_entry_table</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WTVRootEntryTable</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filename_padding</name> <init>= <expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>header_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WTVHeaderWriteFunc</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>write_header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>len_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dir_entry_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name>filename_padding</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name>filename_padding</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>filename_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name>filename_padding</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>|</operator><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">62</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name>filename_padding</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>first_sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>sector_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>WTV_SECTOR_SIZE</name><operator>-</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_fat</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_sector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_sectors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_sectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>start_sector</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>WTV_SECTOR_SIZE</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>nb_sectors</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>WTV_SECTOR_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>write_fat_sector</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>start_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_sectors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sector_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_sector</name> <init>= <expr><name>start_pos</name> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>sector_bits</name> <operator>-</operator> <name>WTV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fat</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_fat</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>start_sector</name></expr></argument>, <argument><expr><name>nb_sectors</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_sector1</name> <init>= <expr><name>fat</name> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_sectors1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>nb_sectors</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>WTV_SECTOR_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>WTV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>fat1</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_fat</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>start_sector1</name></expr></argument>, <argument><expr><name>nb_sectors1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fat1</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>fat</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_table_entries_events</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_sp_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>sp_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>sp_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_table_entries_time</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wctx</name><operator>-&gt;</operator><name>nb_st_pairs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>st_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>st_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>last_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_metadata_header</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_metadata_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metadata_header_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_tag_int32</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>write_metadata_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>write_metadata_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>attachment_value_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_table_entries_attrib</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_standardize_creation_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_metadata_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>ff_asf_metadata_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_metadata_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"WM/Picture"</literal></expr></argument>, <argument><expr><call><name>attachment_value_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tag</name></expr> ?</condition><then> <expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_tag_int32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"WM/MediaThumbType"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_table_redirector_legacy_attrib</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>metadata_header_size</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name><operator>.</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>metadata_header_size</name><argument_list>(<argument><expr><literal type="string">"WM/Picture"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>attachment_value_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name></name></expr></argument>, <argument><expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>metadata_header_size</name><argument_list>(<argument><expr><literal type="string">"WM/MediaThumbType"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>finish_file</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>WtvFileIndex</name></name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>start_pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>file</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>end_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sector_bits</name></decl>, <decl><type ref="prev"/><name>nb_sectors</name></decl>, <decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>WTV_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>end_pos</name> <operator>-</operator> <name>start_pos</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <name>WTV_SECTOR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sector_bits</name> <operator>=</operator> <name>WTV_SECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>WTV_SECTOR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sector_bits</name> <operator>=</operator> <name>WTV_SECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>WTV_BIGSECTOR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sector_bits</name> <operator>=</operator> <name>WTV_BIGSECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>WTV_SECTOR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sector_bits</name> <operator>=</operator> <name>WTV_SECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>WTV_BIGSECTOR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sector_bits</name> <operator>=</operator> <name>WTV_BIGSECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported file allocation table depth (%"</literal><name>PRIi64</name><literal type="string">" bytes)\n"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>nb_sectors</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;&gt;</operator> <name>sector_bits</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sector_bits</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sector_bits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_sectors</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_pad</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>first_sector</name></name> <operator>=</operator> <call><name>write_fat_sector</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>nb_sectors</name></expr></argument>, <argument><expr><name>sector_bits</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>first_sector</name></name> <operator>=</operator> <name>start_pos</name> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>|=</operator> <literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sector_bits</name> <operator>==</operator> <name>WTV_SECTOR_BITS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>length</name></name> <operator>|=</operator> <literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>root_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>sector_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pos</name></decl>, <decl><type ref="prev"/><name>file_end_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>WTV_TIMELINE</name></expr></argument>, <argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>timeline_start_pos</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table_entries_events</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>WTV_TIMELINE_TABLE_0_ENTRIES_EVENTS</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table_entries_attrib</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>WTV_TABLE_0_ENTRIES_LEGACY_ATTRIB</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table_redirector_legacy_attrib</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>WTV_TABLE_0_REDIRECTOR_LEGACY_ATTRIB</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_table_entries_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>finish_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>WTV_TABLE_0_ENTRIES_TIME</name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>sector_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root_size</name> <operator>=</operator> <call><name>write_root_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sector_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_end_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sector_pos</name> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x5c</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_end_pos</name> <operator>&gt;&gt;</operator> <name>WTV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>sp_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>wctx</name><operator>-&gt;</operator><name>st_pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wctx</name><operator>-&gt;</operator><name>thumbnail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_wtv_muxer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wtv"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Television (WTV)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"wtv"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WtvContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>,
<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>write_header</name></expr>,
<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>write_packet</name></expr>,
<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>write_trailer</name></expr>,
<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>ff_codec_bmp_tags</name></expr>,
<expr><name>ff_codec_wav_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
