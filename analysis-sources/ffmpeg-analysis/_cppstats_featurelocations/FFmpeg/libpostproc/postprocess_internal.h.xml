<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libpostproc\postprocess_internal.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>POSTPROC_POSTPROCESS_INTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTPROC_POSTPROCESS_INTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_DEBLOCK</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_DEBLOCK</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DERING</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_FIX</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_V_DEBLOCK</name></cpp:macro> <cpp:value>V_DEBLOCK</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_H_DEBLOCK</name></cpp:macro> <cpp:value>H_DEBLOCK</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROM_V_DEBLOCK</name></cpp:macro> <cpp:value>(V_DEBLOCK&lt;&lt;4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROM_H_DEBLOCK</name></cpp:macro> <cpp:value>(H_DEBLOCK&lt;&lt;4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_DERING</name></cpp:macro> <cpp:value>DERING</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROM_DERING</name></cpp:macro> <cpp:value>(DERING&lt;&lt;4)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_LEVEL_FIX</name></cpp:macro> <cpp:value>LEVEL_FIX</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROM_LEVEL_FIX</name></cpp:macro> <cpp:value>(LEVEL_FIX&lt;&lt;4)</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_X1_FILTER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_A_DEBLOCK</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_X1_FILTER</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H_A_DEBLOCK</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FULL_Y_RANGE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEAR_IPOL_DEINT_FILTER</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEAR_BLEND_DEINT_FILTER</name></cpp:macro> <cpp:value>0x20000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUBIC_BLEND_DEINT_FILTER</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUBIC_IPOL_DEINT_FILTER</name></cpp:macro> <cpp:value>0x40000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEDIAN_DEINT_FILTER</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMPEG_DEINT_FILTER</name></cpp:macro> <cpp:value>0x400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWPASS5_DEINT_FILTER</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_NOISE_FILTER</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_QUANT</name></cpp:macro> <cpp:value>0x200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITEXACT</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISUALIZE</name></cpp:macro> <cpp:value>0x2000000</cpp:value></cpp:define>










<struct>struct <name>PPFilter</name><block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>longName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chromDefault</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>minLumQuality</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>minChromQuality</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt> 
}</block>;</struct>




<typedef>typedef <type><struct>struct <name>PPMode</name><block>{
<decl_stmt><decl><type><name>int</name></type> <name>lumMode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>chromMode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>minAllowedY</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxAllowedY</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>maxClippedThreshold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>maxTmpNoise</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>baseDcDiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flatnessThreshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forcedQuant</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PPMode</name>;</typedef>




<typedef>typedef <type><struct>struct <name>PPContext</name><block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempBlocks</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>yHistogram</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>packedYOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>packedYScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>tempBlurred</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>tempBlurredPast</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempDst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempSrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>deintTemp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pQPb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pQPb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pQPb_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pQPb2_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmxDcOffset</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmxDcThreshold</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>stdQPTable</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>nonBQPTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>forcedQPTable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>QP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nonBQP</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>QP_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>nonBQP_block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frameNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpuCaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpStride</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hChromaSubSample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vChromaSubSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PPMode</name></type> <name>ppMode</name></decl>;</decl_stmt>
}</block></struct></type> <name>PPContext</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>linecpy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stride</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>lines</name><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dest</name><operator>+</operator><operator>(</operator><name>lines</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>src</name><operator>+</operator><operator>(</operator><name>lines</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>-</operator><name>lines</name><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
